// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct3D9 namespace.
//     This code was generated by a tool.
//     Date : 28/03/2015 21:51:05
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct3D9 {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Defines constants that describe the type of back buffer.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Direct3D 9 does not support stereo view, so Direct3D does not use the <see cref="SharpDX.Direct3D9.BackBufferType.Left"/> and <see cref="SharpDX.Direct3D9.BackBufferType.Right"/> values of this enumerated type.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBACKBUFFER_TYPE']/*"/>	
    /// <msdn-id>bb172506</msdn-id>	
    /// <unmanaged>D3DBACKBUFFER_TYPE</unmanaged>	
    /// <unmanaged-short>D3DBACKBUFFER_TYPE</unmanaged-short>	
    internal enum BackBufferType : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies a nonstereo swap chain. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBACKBUFFER_TYPE_MONO']/*"/>	
        /// <msdn-id>bb172506</msdn-id>	
        /// <unmanaged>D3DBACKBUFFER_TYPE_MONO</unmanaged>	
        /// <unmanaged-short>D3DBACKBUFFER_TYPE_MONO</unmanaged-short>	
        Mono = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Specifies the left side of a stereo pair in a swap chain. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBACKBUFFER_TYPE_LEFT']/*"/>	
        /// <msdn-id>bb172506</msdn-id>	
        /// <unmanaged>D3DBACKBUFFER_TYPE_LEFT</unmanaged>	
        /// <unmanaged-short>D3DBACKBUFFER_TYPE_LEFT</unmanaged-short>	
        Left = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Specifies the right side of a stereo pair in a swap chain. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBACKBUFFER_TYPE_RIGHT']/*"/>	
        /// <msdn-id>bb172506</msdn-id>	
        /// <unmanaged>D3DBACKBUFFER_TYPE_RIGHT</unmanaged>	
        /// <unmanaged-short>D3DBACKBUFFER_TYPE_RIGHT</unmanaged-short>	
        Right = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the basis type of a high-order patch surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The members of <strong><see cref="SharpDX.Direct3D9.Basis"/></strong> specify the formulation to be used in evaluating the high-order patch surface primitive during tessellation.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBASISTYPE']/*"/>	
    /// <msdn-id>bb172507</msdn-id>	
    /// <unmanaged>D3DBASISTYPE</unmanaged>	
    /// <unmanaged-short>D3DBASISTYPE</unmanaged-short>	
    public enum Basis : int {	
        
        /// <summary>	
        /// <dd> <p>Input vertices are treated as a series of B?zier patches. The number of vertices specified must be divisible by 4. Portions of the mesh beyond this criterion will not be rendered. Full continuity is assumed between sub-patches in the interior of the surface rendered by each call. Only the vertices at the corners of each sub-patch are guaranteed to lie on the resulting surface. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBASIS_BEZIER']/*"/>	
        /// <msdn-id>bb172507</msdn-id>	
        /// <unmanaged>D3DBASIS_BEZIER</unmanaged>	
        /// <unmanaged-short>D3DBASIS_BEZIER</unmanaged-short>	
        Bezier = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Input vertices are treated as control points of a B-spline surface. The number of apertures rendered is two fewer than the number of apertures in that direction. In general, the generated surface does not contain the control vertices specified. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBASIS_BSPLINE']/*"/>	
        /// <msdn-id>bb172507</msdn-id>	
        /// <unmanaged>D3DBASIS_BSPLINE</unmanaged>	
        /// <unmanaged-short>D3DBASIS_BSPLINE</unmanaged-short>	
        BSpline = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>An interpolating basis defines the surface so that the surface goes through all the input vertices specified. In DirectX 8, this was D3DBASIS_INTERPOLATE.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBASIS_CATMULL_ROM']/*"/>	
        /// <msdn-id>bb172507</msdn-id>	
        /// <unmanaged>D3DBASIS_CATMULL_ROM</unmanaged>	
        /// <unmanaged-short>D3DBASIS_CATMULL_ROM</unmanaged-short>	
        CatmullRom = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the supported blend mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>In the preceding member descriptions, the RGBA values of the source and destination are indicated by the s and d subscripts.</p><p>The values in this enumerated type are used by the following render states:</p><ul> <li><see cref="SharpDX.Direct3D9.RenderState.DestinationBlend"/></li> <li><see cref="SharpDX.Direct3D9.RenderState.SourceBlend"/></li> <li><see cref="SharpDX.Direct3D9.RenderState.DestinationBlendAlpha"/></li> <li><see cref="SharpDX.Direct3D9.RenderState.SourceBlendAlpha"/></li> </ul><p>See <strong><see cref="SharpDX.Direct3D9.RenderState"/></strong> </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND']/*"/>	
    /// <msdn-id>bb172508</msdn-id>	
    /// <unmanaged>D3DBLEND</unmanaged>	
    /// <unmanaged-short>D3DBLEND</unmanaged-short>	
    public enum Blend : int {	
        
        /// <summary>	
        /// <dd> <p>Blend factor is (0, 0, 0, 0). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_ZERO']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_ZERO</unmanaged>	
        /// <unmanaged-short>D3DBLEND_ZERO</unmanaged-short>	
        Zero = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (1, 1, 1, 1). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_ONE']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_ONE</unmanaged>	
        /// <unmanaged-short>D3DBLEND_ONE</unmanaged-short>	
        One = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (Rs, Gs, Bs, As). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_SRCCOLOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_SRCCOLOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_SRCCOLOR</unmanaged-short>	
        SourceColor = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVSRCCOLOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVSRCCOLOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVSRCCOLOR</unmanaged-short>	
        InverseSourceColor = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (As, As, As, As). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_SRCALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_SRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_SRCALPHA</unmanaged-short>	
        SourceAlpha = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVSRCALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVSRCALPHA</unmanaged-short>	
        InverseSourceAlpha = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (Ad Ad Ad Ad). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_DESTALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_DESTALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_DESTALPHA</unmanaged-short>	
        DestinationAlpha = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (1 - Ad 1 - Ad 1 - Ad 1 - Ad). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVDESTALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVDESTALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVDESTALPHA</unmanaged-short>	
        InverseDestinationAlpha = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (Rd, Gd, Bd, Ad). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_DESTCOLOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_DESTCOLOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_DESTCOLOR</unmanaged-short>	
        DestinationColor = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVDESTCOLOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVDESTCOLOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVDESTCOLOR</unmanaged-short>	
        InverseDestinationColor = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (f, f, f, 1); where f = min(As, 1 - Ad). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_SRCALPHASAT']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_SRCALPHASAT</unmanaged>	
        /// <unmanaged-short>D3DBLEND_SRCALPHASAT</unmanaged-short>	
        SourceAlphaSaturated = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p><strong>Obsolete</strong>. Starting with DirectX 6, you can achieve the same effect by setting the source and destination blend factors to <see cref="SharpDX.Direct3D9.Blend.SourceAlpha"/> and <see cref="SharpDX.Direct3D9.Blend.InverseSourceAlpha"/> in separate calls. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_BOTHSRCALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_BOTHSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_BOTHSRCALPHA</unmanaged-short>	
        Bothsrcalpha = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p><strong>Obsolete</strong>. Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only for the <see cref="SharpDX.Direct3D9.RenderState.SourceBlend"/> render state. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_BOTHINVSRCALPHA']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_BOTHINVSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DBLEND_BOTHINVSRCALPHA</unmanaged-short>	
        BothInverseSourceAlpha = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if <see cref="SharpDX.Direct3D9.BlendCaps.BlendFactor"/> is set in the <strong>SrcBlendCaps</strong> or <strong>DestBlendCaps</strong> members of <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_BLENDFACTOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_BLENDFACTOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_BLENDFACTOR</unmanaged-short>	
        BlendFactor = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>Inverted constant color-blending factor used by the frame-buffer blender. This blend mode is supported only if the <see cref="SharpDX.Direct3D9.BlendCaps.BlendFactor"/> bit is set in the <strong>SrcBlendCaps</strong> or <strong>DestBlendCaps</strong> members of <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVBLENDFACTOR']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVBLENDFACTOR</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVBLENDFACTOR</unmanaged-short>	
        InverseBlendFactor = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (PSOutColor[1]r, PSOutColor[1]g, PSOutColor[1]b, not used). See Render. </p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p>This flag is available in Direct3D 9Ex only.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_SRCCOLOR2']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_SRCCOLOR2</unmanaged>	
        /// <unmanaged-short>D3DBLEND_SRCCOLOR2</unmanaged-short>	
        SourceColor2 = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Blend factor is (1 - PSOutColor[1]r, 1 - PSOutColor[1]g, 1 - PSOutColor[1]b, not used)). See Render. </p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p>This flag is available in Direct3D 9Ex only.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLEND_INVSRCCOLOR2']/*"/>	
        /// <msdn-id>bb172508</msdn-id>	
        /// <unmanaged>D3DBLEND_INVSRCCOLOR2</unmanaged>	
        /// <unmanaged-short>D3DBLEND_INVSRCCOLOR2</unmanaged-short>	
        InverseSourceColor2 = unchecked((int)17),			
    }
    
    /// <summary>	
    /// <p>Represents the capabilities of the hardware exposed through the Direct3D object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The MaxTextureBlendStages and MaxSimultaneousTextures members might seem similar, but they contain different information. The MaxTextureBlendStages member contains the total number of texture-blending stages supported by the current device, and the MaxSimultaneousTextures member describes how many of those stages can have textures bound to them by using the <strong>SetTexture</strong> method.</p><p>When the driver fills this structure, it can set values for execute-buffer capabilities, even when the interface being used to retrieve the capabilities (such as <strong><see cref="SharpDX.Direct3D9.Device"/></strong>) does not support execute buffers.</p><p>In general, performance problems may occur if you use a texture and then modify it during a scene. Ensure that no texture used in the current <strong>BeginScene</strong> and <strong>EndScene</strong> block is evicted unless absolutely necessary. In the case of extremely high texture usage within a scene, the results are undefined. This occurs when you modify a texture that you have used in the scene and there is no spare texture memory available. For such systems, the contents of the z-buffer become invalid at EndScene. Applications should not call <strong>UpdateSurface</strong> to or from the back buffer on this type of hardware inside a BeginScene/EndScene pair. In addition, applications should not try to access the z-buffer if the <see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/> capability flag is set. Finally, applications should not lock the back buffer or the z-buffer inside a BeginScene/EndScene pair.</p><p>The following flags concerning mipmapped textures are not supported in Direct3D 9. </p><ul> <li>D3DPTFILTERCAPS_LINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPLINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPNEAREST</li> <li>D3DPTFILTERCAPS_MIPNEAREST</li> <li>D3DPTFILTERCAPS_NEAREST</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS']/*"/>	
    /// <msdn-id>bb172513</msdn-id>	
    /// <unmanaged>D3DPBLENDCAPS</unmanaged>	
    /// <unmanaged-short>D3DPBLENDCAPS</unmanaged-short>	
    [Flags]
    public enum BlendCaps : int {	
        
        /// <summary>	
        /// <dd> <p>Member of the <strong><see cref="SharpDX.Direct3D9.DeviceType"/></strong> enumerated type, which identifies what type of resources are used for processing vertices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_ZERO']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_ZERO</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_ZERO</unmanaged-short>	
        Zero = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Adapter on which this Direct3D device was created. This ordinal is valid only to pass to methods of the <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface that created this Direct3D device. The <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface can always be retrieved by calling <strong>GetDirect3D</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_ONE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_ONE</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_ONE</unmanaged-short>	
        One = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> </p><p>The following driver-specific capability.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.ReadScanline"/></strong></dt> </dl> </td><td> <p>Display hardware is capable of returning the current scan line.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.Overlay"/></strong></dt> </dl> </td><td> <p>The display driver supports an overlay DDI that allows for verification of overlay capabilities. For more information about the overlay DDI, see Overlay DDI.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_SRCCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_SRCCOLOR</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_SRCCOLOR</unmanaged-short>	
        SourceColor = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps2"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_INVSRCCOLOR</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_INVSRCCOLOR</unmanaged-short>	
        InverseSourceColor = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps3"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_SRCALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_SRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_SRCALPHA</unmanaged-short>	
        SourceAlpha = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask of values representing what presentation swap intervals are available.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/></strong></dt> </dl> </td><td> <p>The driver supports an immediate presentation swap interval.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.One"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Two"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every second screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Three"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every third screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Four"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every fourth screen refresh.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_INVSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_INVSRCALPHA</unmanaged-short>	
        InverseSourceAlpha = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask indicating what hardware support is available for cursors. Direct3D 9 does not define alpha-blending cursor capabilities.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.Color"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports at least a hardware color cursor in high-resolution modes (with scan lines greater than or equal to 400).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.LowResolution"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports a hardware color cursor in both high-resolution and low-resolution modes (with scan lines less than 400).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_DESTALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_DESTALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_DESTALPHA</unmanaged-short>	
        DestinationAlpha = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Flags identifying the capabilities of the device.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanBlitSysToNonLocal"/></strong></dt> </dl> </td><td> <p>Device supports blits from system-memory textures to nonlocal video-memory textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanRenderAfterFlip"/></strong></dt> </dl> </td><td> <p>Device can queue rendering commands after a page flip. Applications do not change their behavior if this flag is set; this capability means that the device is relatively fast.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 5-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2Extended"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 7-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimTLVertex"/></strong></dt> </dl> </td><td> <p>Device exports an <strong><see cref="SharpDX.Direct3D9.Device.DrawPrimitives"/></strong>-aware hal.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWRasterization"/></strong></dt> </dl> </td><td> <p>Device has hardware acceleration for scene rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWTransformAndLight"/></strong></dt> </dl> </td><td> <p>Device can support transformation and lighting in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.NPatches"/></strong></dt> </dl> </td><td> <p>Device supports N patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.PureDevice"/></strong></dt> </dl> </td><td> <p>Device can support rasterization, transform, lighting, and shading in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.QuinticRTPatches"/></strong></dt> </dl> </td><td> <p>Device supports quintic B?zier curves and B-splines.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatches"/></strong></dt> </dl> </td><td> <p>Device supports rectangular and triangular patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/></strong></dt> </dl> </td><td> <p>When this device capability is set, the hardware architecture does not require caching of any information, and uncached patches (handle zero) will be drawn as efficiently as cached ones. Note that setting <see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/> does not mean that a patch with handle zero can be drawn. A handle-zero patch can always be drawn whether this cap is set or not.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.SeparateTextureMemory"/></strong></dt> </dl> </td><td> <p>Device is texturing from separate memory pools.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureNonLocalVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from non-local video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from device memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from system memory for transformed and lit vertices.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from video memory for transformed and lit vertices.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_INVDESTALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_INVDESTALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_INVDESTALPHA</unmanaged-short>	
        InverseDestinationAlpha = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Miscellaneous driver primitive capabilities. See <see cref="SharpDX.Direct3D9.PrimitiveMiscCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_DESTCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_DESTCOLOR</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_DESTCOLOR</unmanaged-short>	
        DestinationColor = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Information on raster-drawing capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Anisotropy"/></strong></dt> </dl> </td><td> <p>Device supports anisotropic filtering.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ColorPerspective"/></strong></dt> </dl> </td><td> <p>Device iterates colors perspective correctly.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Dither"/></strong></dt> </dl> </td><td> <p>Device can dither to improve color resolution.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthBias"/></strong></dt> </dl> </td><td> <p>Device supports legacy depth bias. For true depth bias, see <see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogRange"/></strong></dt> </dl> </td><td> <p>Device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogTable"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogVertex"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MipMapLodBias"/></strong></dt> </dl> </td><td> <p>Device supports level-of-detail bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would. For more information about level-of-detail bias in mipmaps, see <see cref="SharpDX.Direct3D9.SamplerState.MipMapLodBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MultisampleToggle"/></strong></dt> </dl> </td><td> <p>Device supports toggling multisampling on and off between <strong><see cref="SharpDX.Direct3D9.Device.BeginScene"/></strong> and <strong><see cref="SharpDX.Direct3D9.Device.EndScene"/></strong> (using <see cref="SharpDX.Direct3D9.RenderState.MultisampleAntialias"/>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ScissorTest"/></strong></dt> </dl> </td><td> <p>Device supports scissor test. See Scissor Test (Direct3D 9).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/></strong></dt> </dl> </td><td> <p>Device performs true slope-scale based depth bias. This is in contrast to the legacy style depth bias.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WBuffer"/></strong></dt> </dl> </td><td> <p>Device supports depth buffering using w.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WFog"/></strong></dt> </dl> </td><td> <p>Device supports w-based fog. W-based fog is used when a perspective projection matrix is specified, but affine projections still use z-based fog. The system considers a projection matrix that contains a nonzero value in the [3][4] element to be a perspective projection matrix.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/></strong></dt> </dl> </td><td> <p>Device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth-buffer. This leaves more video memory for textures. The method used to perform HSR is hardware-dependent and is transparent to the application.</p> <p>Z-bufferless HSR is performed if no depth-buffer surface is associated with the rendering-target surface and the depth-buffer comparison test is enabled (that is, when the state value associated with the <strong><see cref="SharpDX.Direct3D9.RenderState.ZEnable"/></strong> enumeration constant is set to <strong>TRUE</strong>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZFog"/></strong></dt> </dl> </td><td> <p>Device supports z-based fog.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthTest"/></strong></dt> </dl> </td><td> <p>Device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels have been rendered.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_INVDESTCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_INVDESTCOLOR</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_INVDESTCOLOR</unmanaged-short>	
        InverseDestinationColor = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Z-buffer comparison capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Always"/></strong></dt> </dl> </td><td> <p>Always pass the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Equal"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z equals the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Greater"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.GreaterEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Less"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.LessEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Never"/></strong></dt> </dl> </td><td> <p>Always fail the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.NotEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z does not equal the current z.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_SRCALPHASAT']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_SRCALPHASAT</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_SRCALPHASAT</unmanaged-short>	
        SourceAlphaSaturated = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Source-blending capabilities. This member can be one or more of the following flags. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BlendFactor"/></strong></dt> </dl> </td><td> <p>The driver supports both <see cref="SharpDX.Direct3D9.Blend.BlendFactor"/> and <see cref="SharpDX.Direct3D9.Blend.InverseBlendFactor"/>. See <strong><see cref="SharpDX.Direct3D9.Blend"/></strong>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BothInverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As) and destination blend factor is (As, As, As, As); the destination blend selection is overridden.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Bothsrcalpha"/></strong></dt> </dl> </td><td> <p>The driver supports the <see cref="SharpDX.Direct3D9.Blend.Bothsrcalpha"/> blend mode. (This blend mode is obsolete. For more information, see <see cref="SharpDX.Direct3D9.Blend"/>.)</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (Ad, Ad, Ad, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rd, Gd, Bd, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - As, 1 - As, 1 - As, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - PSOutColor[1]r, 1 - PSOutColor[1]g, 1 - PSOutColor[1]b, not used)). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.One"/></strong></dt> </dl> </td><td> <p>Blend factor is (1, 1, 1, 1).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (As, As, As, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlphaSaturated"/></strong></dt> </dl> </td><td> <p>Blend factor is (f, f, f, 1); f = min(As, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rs, Gs, Bs, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (PSOutColor[1]r, PSOutColor[1]g, PSOutColor[1]b, not used). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Zero"/></strong></dt> </dl> </td><td> <p>Blend factor is (0, 0, 0, 0).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_BOTHSRCALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_BOTHSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_BOTHSRCALPHA</unmanaged-short>	
        Bothsrcalpha = unchecked((int)2048),			
        
        /// <summary>	
        /// <dd> <p>Destination-blending capabilities. This member can be the same capabilities that are defined for the SrcBlendCaps member. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_BOTHINVSRCALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_BOTHINVSRCALPHA</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_BOTHINVSRCALPHA</unmanaged-short>	
        BothInverseSourceAlpha = unchecked((int)4096),			
        
        /// <summary>	
        /// <dd> <p>Alpha-test comparison capabilities. This member can include the same capability flags defined for the ZCmpCaps member. If this member contains only the <see cref="SharpDX.Direct3D9.CompareCaps.Always"/> capability or only the <see cref="SharpDX.Direct3D9.CompareCaps.Never"/> capability, the driver does not support alpha tests. Otherwise, the flags identify the individual comparisons that are supported for alpha testing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_BLENDFACTOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_BLENDFACTOR</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_BLENDFACTOR</unmanaged-short>	
        BlendFactor = unchecked((int)8192),			
        
        /// <summary>	
        /// <dd> <p>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the <see cref="SharpDX.Direct3D9.ShadeMode.Flat"/> mode (as specified in the <strong><see cref="SharpDX.Direct3D9.ShadeMode"/></strong> enumerated type). This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). </p> <p>The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver.</p> <p> </p><p>This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.AlphaGouraudBlend"/></strong></dt> </dl> </td><td> <p>Device can support an alpha component for Gouraud-blended transparency (the <see cref="SharpDX.Direct3D9.ShadeMode.Gouraud"/> state for the <see cref="SharpDX.Direct3D9.ShadeMode"/> enumerated type). In this mode, the alpha color component of a primitive is provided at vertices and interpolated across a face along with the other color components.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.ColorGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device can support colored Gouraud shading. In this mode, the per-vertex color components (red, green, and blue) are interpolated across a triangle face.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.FogGouraud"/></strong></dt> </dl> </td><td> <p>Device can support fog in the Gouraud shading mode.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.SpecularGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device supports Gouraud shading of specular highlights.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_SRCCOLOR2']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_SRCCOLOR2</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_SRCCOLOR2</unmanaged-short>	
        SourceColor2 = unchecked((int)16384),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Miscellaneous texture-mapping capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Alpha"/></strong></dt> </dl> </td><td> <p>Alpha in texture pixels is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.AlphaPalette"/></strong></dt> </dl> </td><td> <p>Device can draw alpha from texture palettes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMap"/></strong></dt> </dl> </td><td> <p>Supports cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that cube texture maps have dimensions specified as powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipCubeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipVolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/></strong></dt> </dl> </td><td> <p><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. A device that exposes this capability can use such a texture if all of the following requirements are met.</p> <p> </p><ul> <li>The texture addressing mode for the texture stage is set to <see cref="SharpDX.Direct3D9.TextureAddress.Clamp"/>.</li> <li>Texture wrapping for the texture stage is disabled (<strong>D3DRS_WRAP</strong> n set to 0).</li> <li>Mipmapping is not in use (use magnification filter only).</li> <li>Texture formats must not be <see cref="SharpDX.Direct3D9.Format.Dxt1"/> through <see cref="SharpDX.Direct3D9.Format.Dxt5"/>.</li> </ul> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> <p>A texture that is not a power of two cannot be set at a stage that will be read based on a shader computation (such as the bem - ps and texm3x3 - ps instructions in pixel shaders versions 1_0 to 1_3). For example, these textures can be used to store bumps that will be fed into texture reads, but not the environment maps that are used in texbem - ps, texbeml - ps, and texm3x3spec - ps. This means that a texture with dimensions that are not powers of two cannot be addressed or sampled using texture coordinates computed within the shader. This type of operation is known as a dependent read and cannot be performed on these types of textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NoProjectedBumpEnvironment"/></strong></dt> </dl> </td><td> <p>Device does not support a projected bump-environment loopkup operation in programmable and fixed function shaders.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Perspective"/></strong></dt> </dl> </td><td> <p>Perspective correction texturing is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/></strong></dt> </dl> </td><td> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is not set, all textures must have widths and heights specified as powers of two. This requirement does not apply to either cube textures or volume textures.</p> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. See <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> description.</p> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Projected"/></strong></dt> </dl> </td><td> <p>Supports the <see cref="SharpDX.Direct3D9.TextureTransform.Projected"/> texture transformation flag. When applied, the device divides transformed texture coordinates by the last texture coordinate. If this capability is present, then the projective divide occurs per pixel. If this capability is not present, but the projective divide needs to occur anyway, then it is performed on a per-vertex basis by the Direct3D runtime.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.SquareOnly"/></strong></dt> </dl> </td><td> <p>All textures must be square.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/></strong></dt> </dl> </td><td> <p>Texture indices are not scaled by the texture size prior to interpolation.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that volume texture maps have dimensions specified as powers of two.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPBLENDCAPS_INVSRCCOLOR2']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DPBLENDCAPS_INVSRCCOLOR2</unmanaged>	
        /// <unmanaged-short>D3DPBLENDCAPS_INVSRCCOLOR2</unmanaged-short>	
        InverseSourceColor2 = unchecked((int)32768),			
    }
    
    /// <summary>	
    /// <p>Defines the supported blend operations. See Remarks for definitions of terms.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Source, Destination, and Result are defined as: </p><table> <tr><th>Term</th><th>Type</th><th>Description</th></tr> <tr><td>Source</td><td>Input</td><td>Color of the source pixel before the operation.</td></tr> <tr><td>Destination</td><td>Input</td><td>Color of the pixel in the destination buffer before the operation.</td></tr> <tr><td>Result</td><td>Output</td><td>Returned value that is the blended color resulting from the operation.</td></tr> </table><p>?</p><p>This enumerated type defines values used by the following render states:</p><ul> <li><see cref="SharpDX.Direct3D9.RenderState.BlendOperation"/></li> <li><see cref="SharpDX.Direct3D9.RenderState.BlendOperationAlpha"/></li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP']/*"/>	
    /// <msdn-id>bb172509</msdn-id>	
    /// <unmanaged>D3DBLENDOP</unmanaged>	
    /// <unmanaged-short>D3DBLENDOP</unmanaged-short>	
    public enum BlendOperation : int {	
        
        /// <summary>	
        /// <dd> <p>The result is the destination added to the source.  Result = Source + Destination</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP_ADD']/*"/>	
        /// <msdn-id>bb172509</msdn-id>	
        /// <unmanaged>D3DBLENDOP_ADD</unmanaged>	
        /// <unmanaged-short>D3DBLENDOP_ADD</unmanaged-short>	
        Add = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The result is the destination subtracted from to the source.  Result = Source - Destination</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP_SUBTRACT']/*"/>	
        /// <msdn-id>bb172509</msdn-id>	
        /// <unmanaged>D3DBLENDOP_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D3DBLENDOP_SUBTRACT</unmanaged-short>	
        Subtract = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The result is the source subtracted from the destination.  Result = Destination - Source</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP_REVSUBTRACT']/*"/>	
        /// <msdn-id>bb172509</msdn-id>	
        /// <unmanaged>D3DBLENDOP_REVSUBTRACT</unmanaged>	
        /// <unmanaged-short>D3DBLENDOP_REVSUBTRACT</unmanaged-short>	
        ReverseSubtract = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The result is the minimum of the source and destination.  Result = MIN(Source, Destination)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP_MIN']/*"/>	
        /// <msdn-id>bb172509</msdn-id>	
        /// <unmanaged>D3DBLENDOP_MIN</unmanaged>	
        /// <unmanaged-short>D3DBLENDOP_MIN</unmanaged-short>	
        Minimum = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The result is the maximum of the source and destination.  Result = MAX(Source, Destination)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBLENDOP_MAX']/*"/>	
        /// <msdn-id>bb172509</msdn-id>	
        /// <unmanaged>D3DBLENDOP_MAX</unmanaged>	
        /// <unmanaged-short>D3DBLENDOP_MAX</unmanaged-short>	
        Maximum = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Flags used to obtain callback information.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCALLBACK_SEARCH_FLAGS']/*"/>	
    /// <msdn-id>bb172714</msdn-id>	
    /// <unmanaged>D3DXCALLBACK_SEARCH_FLAGS</unmanaged>	
    /// <unmanaged-short>D3DXCALLBACK_SEARCH_FLAGS</unmanaged-short>	
    [Flags]
    public enum CallbackSearchFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Exclude callbacks located at the initial position from the search.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION']/*"/>	
        /// <msdn-id>bb172714</msdn-id>	
        /// <unmanaged>D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION</unmanaged>	
        /// <unmanaged-short>D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION</unmanaged-short>	
        SearchExcludingInitialPosition = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Reverse the callback search direction.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION']/*"/>	
        /// <msdn-id>bb172714</msdn-id>	
        /// <unmanaged>D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION</unmanaged>	
        /// <unmanaged-short>D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION</unmanaged-short>	
        SearchBehindInitialPosition = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Obsolete in DirectX 8.0 and later versions; see Remarks. </p><p>The D3DLIGHTINGCAPS structure describes the lighting capabilities of a device.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure has been replaced by D3DCAPS8 (see the DirectX 8.0 SDK documentation) for DirectX 8.0 and later runtimes, but is required for DirectX 7.0 and earlier runtime compatibility. See Reporting DirectX 8.0 Style Direct3D Capabilities for details.</p><p>This structure is a member of the <strong>D3DDEVICEDESC_V1</strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS']/*"/>	
    /// <msdn-id>ff548471</msdn-id>	
    /// <unmanaged>D3DCAPS</unmanaged>	
    /// <unmanaged-short>D3DCAPS</unmanaged-short>	
    [Flags]
    public enum Caps : int {	
        
        /// <summary>	
        /// <dd> <p>Specifies the size, in bytes, of the D3DLIGHTINGCAPS structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS_OVERLAY']/*"/>	
        /// <msdn-id>ff548471</msdn-id>	
        /// <unmanaged>D3DCAPS_OVERLAY</unmanaged>	
        /// <unmanaged-short>D3DCAPS_OVERLAY</unmanaged-short>	
        Overlay = unchecked((int)2048),			
        
        /// <summary>	
        /// <dd> <p> Specifies flags describing the capabilities of the lighting module. The following flags are defined:    </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td>D3DLIGHTCAPS_DIRECTIONAL</td><td>Directional lights are supported. 	
        /// </td></tr> <tr><td>D3DLIGHTCAPS_GLSPOT</td><td>OpenGL-style spotlights are supported.</td></tr> <tr><td>D3DLIGHTCAPS_PARALLELPOINT</td><td>Parallel-point lights are supported.</td></tr> <tr><td>D3DLIGHTCAPS_POINT</td><td>Point lights are supported.</td></tr> <tr><td>D3DLIGHTCAPS_SPOT</td><td>Spotlights are supported. 	
        /// </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS_READ_SCANLINE']/*"/>	
        /// <msdn-id>ff548471</msdn-id>	
        /// <unmanaged>D3DCAPS_READ_SCANLINE</unmanaged>	
        /// <unmanaged-short>D3DCAPS_READ_SCANLINE</unmanaged-short>	
        ReadScanline = unchecked((int)131072),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Driver capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2']/*"/>	
    /// <msdn-id>bb172511</msdn-id>	
    /// <unmanaged>D3DCAPS2</unmanaged>	
    /// <unmanaged-short>D3DCAPS2</unmanaged-short>	
    [Flags]
    public enum Caps2 : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_FULLSCREENGAMMA']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_FULLSCREENGAMMA</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_FULLSCREENGAMMA</unmanaged-short>	
        FullScreenGamma = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_CANCALIBRATEGAMMA']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_CANCALIBRATEGAMMA</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_CANCALIBRATEGAMMA</unmanaged-short>	
        CanCalibrateGamma = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_CANMANAGERESOURCE']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_CANMANAGERESOURCE</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_CANMANAGERESOURCE</unmanaged-short>	
        CanManageResource = unchecked((int)268435456),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_DYNAMICTEXTURES']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_DYNAMICTEXTURES</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_DYNAMICTEXTURES</unmanaged-short>	
        DynamicTextures = unchecked((int)536870912),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_CANAUTOGENMIPMAP']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_CANAUTOGENMIPMAP</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_CANAUTOGENMIPMAP</unmanaged-short>	
        CanAutoGenerateMipMap = unchecked((int)1073741824),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS2_CANSHARERESOURCE']/*"/>	
        /// <msdn-id>bb172511</msdn-id>	
        /// <unmanaged>D3DCAPS2_CANSHARERESOURCE</unmanaged>	
        /// <unmanaged-short>D3DCAPS2_CANSHARERESOURCE</unmanaged-short>	
        CanShareResource = unchecked((int)-2147483648),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Driver capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3']/*"/>	
    /// <msdn-id>bb172512</msdn-id>	
    /// <unmanaged>D3DCAPS3</unmanaged>	
    /// <unmanaged-short>D3DCAPS3</unmanaged-short>	
    [Flags]
    public enum Caps3 : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD']/*"/>	
        /// <msdn-id>bb172512</msdn-id>	
        /// <unmanaged>D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD</unmanaged>	
        /// <unmanaged-short>D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD</unmanaged-short>	
        AlphaFullScreenFlipOrDiscard = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION']/*"/>	
        /// <msdn-id>bb172512</msdn-id>	
        /// <unmanaged>D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION</unmanaged>	
        /// <unmanaged-short>D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION</unmanaged-short>	
        LinearToSrgbPresentation = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3_COPY_TO_VIDMEM']/*"/>	
        /// <msdn-id>bb172512</msdn-id>	
        /// <unmanaged>D3DCAPS3_COPY_TO_VIDMEM</unmanaged>	
        /// <unmanaged-short>D3DCAPS3_COPY_TO_VIDMEM</unmanaged-short>	
        CopyToVideoMemory = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3_COPY_TO_SYSTEMMEM']/*"/>	
        /// <msdn-id>bb172512</msdn-id>	
        /// <unmanaged>D3DCAPS3_COPY_TO_SYSTEMMEM</unmanaged>	
        /// <unmanaged-short>D3DCAPS3_COPY_TO_SYSTEMMEM</unmanaged-short>	
        CopyToSystemMemory = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCAPS3_DXVAHD']/*"/>	
        /// <msdn-id>bb172512</msdn-id>	
        /// <unmanaged>D3DCAPS3_DXVAHD</unmanaged>	
        /// <unmanaged-short>D3DCAPS3_DXVAHD</unmanaged-short>	
        DXVAHd = unchecked((int)1024),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>The following flags are used to specify which channels in a texture to operate on.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL']/*"/>	
    /// <msdn-id>bb205563</msdn-id>	
    /// <unmanaged>D3DX_CHANNEL</unmanaged>	
    /// <unmanaged-short>D3DX_CHANNEL</unmanaged-short>	
    [Flags]
    public enum Channel : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL_RED']/*"/>	
        /// <msdn-id>bb205563</msdn-id>	
        /// <unmanaged>D3DX_CHANNEL_RED</unmanaged>	
        /// <unmanaged-short>D3DX_CHANNEL_RED</unmanaged-short>	
        Red = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL_BLUE']/*"/>	
        /// <msdn-id>bb205563</msdn-id>	
        /// <unmanaged>D3DX_CHANNEL_BLUE</unmanaged>	
        /// <unmanaged-short>D3DX_CHANNEL_BLUE</unmanaged-short>	
        Blue = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL_GREEN']/*"/>	
        /// <msdn-id>bb205563</msdn-id>	
        /// <unmanaged>D3DX_CHANNEL_GREEN</unmanaged>	
        /// <unmanaged-short>D3DX_CHANNEL_GREEN</unmanaged-short>	
        Green = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL_ALPHA']/*"/>	
        /// <msdn-id>bb205563</msdn-id>	
        /// <unmanaged>D3DX_CHANNEL_ALPHA</unmanaged>	
        /// <unmanaged-short>D3DX_CHANNEL_ALPHA</unmanaged-short>	
        Alpha = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_CHANNEL_LUMINANCE']/*"/>	
        /// <msdn-id>bb205563</msdn-id>	
        /// <unmanaged>D3DX_CHANNEL_LUMINANCE</unmanaged>	
        /// <unmanaged-short>D3DX_CHANNEL_LUMINANCE</unmanaged-short>	
        Luminance = unchecked((int)16),			
    }
    
    /// <summary>	
    /// <p>Defines operations to perform on vertices in preparation for mesh cleaning.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEANTYPE']/*"/>	
    /// <msdn-id>bb172720</msdn-id>	
    /// <unmanaged>D3DXCLEANTYPE</unmanaged>	
    /// <unmanaged-short>D3DXCLEANTYPE</unmanaged-short>	
    [Flags]
    public enum CleanType : int {	
        
        /// <summary>	
        /// <dd> <p>Merge triangles that share the same vertex indices but have face normals pointing in opposite directions (back-facing triangles). Unless the triangles are not split by adding a replicated vertex, mesh adjacency data from the two triangles may conflict.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEAN_BACKFACING']/*"/>	
        /// <msdn-id>bb172720</msdn-id>	
        /// <unmanaged>D3DXCLEAN_BACKFACING</unmanaged>	
        /// <unmanaged-short>D3DXCLEAN_BACKFACING</unmanaged-short>	
        BackFacing = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>If a vertex is the apex of two triangle fans (a bowtie) and mesh operations will affect one of the fans, then split the shared vertex into two new vertices. Bowties can cause problems for operations such as mesh simplification that remove vertices, because removing one vertex affects two distinct sets of triangles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEAN_BOWTIES']/*"/>	
        /// <msdn-id>bb172720</msdn-id>	
        /// <unmanaged>D3DXCLEAN_BOWTIES</unmanaged>	
        /// <unmanaged-short>D3DXCLEAN_BOWTIES</unmanaged-short>	
        Bowties = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Use this flag to prevent infinite loops during skinning setup mesh operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEAN_SKINNING']/*"/>	
        /// <msdn-id>bb172720</msdn-id>	
        /// <unmanaged>D3DXCLEAN_SKINNING</unmanaged>	
        /// <unmanaged-short>D3DXCLEAN_SKINNING</unmanaged-short>	
        Skinning = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use this flag to prevent infinite loops during mesh optimization operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEAN_OPTIMIZATION']/*"/>	
        /// <msdn-id>bb172720</msdn-id>	
        /// <unmanaged>D3DXCLEAN_OPTIMIZATION</unmanaged>	
        /// <unmanaged-short>D3DXCLEAN_OPTIMIZATION</unmanaged-short>	
        Optimization = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use this flag to prevent infinite loops during mesh simplification operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCLEAN_SIMPLIFICATION']/*"/>	
        /// <msdn-id>bb172720</msdn-id>	
        /// <unmanaged>D3DXCLEAN_SIMPLIFICATION</unmanaged>	
        /// <unmanaged-short>D3DXCLEAN_SIMPLIFICATION</unmanaged-short>	
        Simplification = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>These flags identify a surface to reset when calling <strong>Clear</strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCLEAR']/*"/>	
    /// <msdn-id>bb172514</msdn-id>	
    /// <unmanaged>D3DCLEAR</unmanaged>	
    /// <unmanaged-short>D3DCLEAR</unmanaged-short>	
    [Flags]
    public enum ClearFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCLEAR_TARGET']/*"/>	
        /// <msdn-id>bb172514</msdn-id>	
        /// <unmanaged>D3DCLEAR_TARGET</unmanaged>	
        /// <unmanaged-short>D3DCLEAR_TARGET</unmanaged-short>	
        Target = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCLEAR_ZBUFFER']/*"/>	
        /// <msdn-id>bb172514</msdn-id>	
        /// <unmanaged>D3DCLEAR_ZBUFFER</unmanaged>	
        /// <unmanaged-short>D3DCLEAR_ZBUFFER</unmanaged-short>	
        ZBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCLEAR_STENCIL']/*"/>	
        /// <msdn-id>bb172514</msdn-id>	
        /// <unmanaged>D3DCLEAR_STENCIL</unmanaged>	
        /// <unmanaged-short>D3DCLEAR_STENCIL</unmanaged-short>	
        Stencil = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCLEAR_ALL']/*"/>	
        /// <msdn-id>bb172514</msdn-id>	
        /// <unmanaged>D3DCLEAR_ALL</unmanaged>	
        /// <unmanaged-short>D3DCLEAR_ALL</unmanaged-short>	
        All = unchecked((int)7),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Describes the current clip status.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>When clipping is enabled during vertex processing (by <strong>ProcessVertices</strong>, <strong>DrawPrimitive</strong>, or other drawing functions), Direct3D computes a clip code for every vertex. The clip code is a combination of D3DCS_* bits. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clipping code. Direct3D maintains the clip status using <strong><see cref="SharpDX.Direct3D9.ClipStatus"/></strong>, which has ClipUnion and ClipIntersection members. ClipUnion is a bitwise OR of all vertex clip codes and ClipIntersection is a bitwise AND of all vertex clip codes. Initial values are zero for ClipUnion and 0xFFFFFFFF for ClipIntersection. When <see cref="SharpDX.Direct3D9.RenderState.Clipping"/> is set to <strong><see cref="SharpDX.Result.False"/></strong>, ClipUnion and ClipIntersection are set to zero. Direct3D updates the clip status during drawing calls. To compute clip status for a particular object, set ClipUnion and ClipIntersection to their initial value and continue drawing.</p><p> Clip status is not updated by <strong>DrawRectPatch</strong> and <strong>DrawTriPatch</strong> because there is no software emulation for them.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS']/*"/>	
    /// <msdn-id>bb172516</msdn-id>	
    /// <unmanaged>D3DCS</unmanaged>	
    /// <unmanaged-short>D3DCS</unmanaged-short>	
    [Flags]
    public enum ClipFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Clip union flags that describe the current clip status. This member can be one or more of the following flags:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.All"/></strong></dt> </dl> </td><td> <p>Combination of all clip flags.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Left"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the left plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Right"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the right plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Top"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the top plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Bottom"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the bottom plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Front"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the front plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Back"/></strong></dt> </dl> </td><td> <p>All vertices are clipped by the back plane of the viewing frustum.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane0"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane1"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane2"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane3"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane4"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ClipFlags.Plane5"/></strong></dt> </dl> </td><td> <p>Application-defined clipping planes.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_LEFT']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_LEFT</unmanaged>	
        /// <unmanaged-short>D3DCS_LEFT</unmanaged-short>	
        Left = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Clip intersection flags that describe the current clip status. This member can take the same flags as ClipUnion. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_RIGHT']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_RIGHT</unmanaged>	
        /// <unmanaged-short>D3DCS_RIGHT</unmanaged-short>	
        Right = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_TOP']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_TOP</unmanaged>	
        /// <unmanaged-short>D3DCS_TOP</unmanaged-short>	
        Top = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_BOTTOM']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_BOTTOM</unmanaged>	
        /// <unmanaged-short>D3DCS_BOTTOM</unmanaged-short>	
        Bottom = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_FRONT']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_FRONT</unmanaged>	
        /// <unmanaged-short>D3DCS_FRONT</unmanaged-short>	
        Front = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_BACK']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_BACK</unmanaged>	
        /// <unmanaged-short>D3DCS_BACK</unmanaged-short>	
        Back = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE0']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE0</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE0</unmanaged-short>	
        Plane0 = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE1']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE1</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE1</unmanaged-short>	
        Plane1 = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE2']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE2</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE2</unmanaged-short>	
        Plane2 = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE3']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE3</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE3</unmanaged-short>	
        Plane3 = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE4']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE4</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE4</unmanaged-short>	
        Plane4 = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_PLANE5']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_PLANE5</unmanaged>	
        /// <unmanaged-short>D3DCS_PLANE5</unmanaged-short>	
        Plane5 = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCS_ALL']/*"/>	
        /// <msdn-id>bb172516</msdn-id>	
        /// <unmanaged>D3DCS_ALL</unmanaged>	
        /// <unmanaged-short>D3DCS_ALL</unmanaged-short>	
        All = unchecked((int)4095),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMATERIALCOLORSOURCE']/*"/>	
    /// <unmanaged>D3DMATERIALCOLORSOURCE</unmanaged>	
    /// <unmanaged-short>D3DMATERIALCOLORSOURCE</unmanaged-short>	
    public enum ColorSource : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMCS_MATERIAL']/*"/>	
        /// <unmanaged>D3DMCS_MATERIAL</unmanaged>	
        /// <unmanaged-short>D3DMCS_MATERIAL</unmanaged-short>	
        Material = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMCS_COLOR1']/*"/>	
        /// <unmanaged>D3DMCS_COLOR1</unmanaged>	
        /// <unmanaged-short>D3DMCS_COLOR1</unmanaged-short>	
        Color1 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMCS_COLOR2']/*"/>	
        /// <unmanaged>D3DMCS_COLOR2</unmanaged>	
        /// <unmanaged-short>D3DMCS_COLOR2</unmanaged-short>	
        Color2 = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Render states define set-up states for all kinds of vertex and pixel processing. Some render states set up vertex processing, and some set up pixel processing (see Render States (Direct3D 9)). Render states can be saved and restored using stateblocks (see State Blocks Save and Restore State (Direct3D 9)).</p>	
    /// </summary>	
    /// <remarks>	
    /// <table> <tr><th>Render States</th></tr> <tr><td>ps_1_1 to ps_1_3</td><td>4 texture samplers</td></tr> </table><p>?</p><p>Direct3D defines the D3DRENDERSTATE_WRAPBIAS constant as a convenience for applications to enable or disable texture wrapping, based on the zero-based integer of a texture coordinate set (rather than explicitly using one of the D3DRS_WRAP n state values). Add the D3DRENDERSTATE_WRAPBIAS value to the zero-based index of a texture coordinate set to calculate the D3DRS_WRAP n value that corresponds to that index, as shown in the following example.</p><pre> // Enable U/V wrapping for textures that use the texture 	
    /// // coordinate set at the index within the dwIndex variable <see cref="SharpDX.Result"/> hr = pd3dDevice-&gt;SetRenderState(	
    /// dwIndex + D3DRENDERSTATE_WRAPBIAS,  	
    /// <see cref="SharpDX.Direct3D9.TextureWrapping.WrapCoordinate0"/> | <see cref="SharpDX.Direct3D9.TextureWrapping.WrapCoordinate1"/>); // If dwIndex is 3, the value that results from 	
    /// // the addition equals <see cref="SharpDX.Direct3D9.RenderState.Wrap3"/> (131)	
    /// </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOLORWRITEENABLE']/*"/>	
    /// <msdn-id>bb172599</msdn-id>	
    /// <unmanaged>D3DCOLORWRITEENABLE</unmanaged>	
    /// <unmanaged-short>D3DCOLORWRITEENABLE</unmanaged-short>	
    [Flags]
    public enum ColorWriteEnable : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOLORWRITEENABLE_RED']/*"/>	
        /// <msdn-id>bb172599</msdn-id>	
        /// <unmanaged>D3DCOLORWRITEENABLE_RED</unmanaged>	
        /// <unmanaged-short>D3DCOLORWRITEENABLE_RED</unmanaged-short>	
        Red = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOLORWRITEENABLE_GREEN']/*"/>	
        /// <msdn-id>bb172599</msdn-id>	
        /// <unmanaged>D3DCOLORWRITEENABLE_GREEN</unmanaged>	
        /// <unmanaged-short>D3DCOLORWRITEENABLE_GREEN</unmanaged-short>	
        Green = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOLORWRITEENABLE_BLUE']/*"/>	
        /// <msdn-id>bb172599</msdn-id>	
        /// <unmanaged>D3DCOLORWRITEENABLE_BLUE</unmanaged>	
        /// <unmanaged-short>D3DCOLORWRITEENABLE_BLUE</unmanaged-short>	
        Blue = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOLORWRITEENABLE_ALPHA']/*"/>	
        /// <msdn-id>bb172599</msdn-id>	
        /// <unmanaged>D3DCOLORWRITEENABLE_ALPHA</unmanaged>	
        /// <unmanaged-short>D3DCOLORWRITEENABLE_ALPHA</unmanaged-short>	
        Alpha = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Defines the supported compare functions.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumerated type define the supported compare functions for the <see cref="SharpDX.Direct3D9.RenderState.ZFunc"/>, <see cref="SharpDX.Direct3D9.RenderState.AlphaFunc"/>, and <see cref="SharpDX.Direct3D9.RenderState.StencilFunc"/> render states.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMPFUNC']/*"/>	
    /// <msdn-id>bb172517</msdn-id>	
    /// <unmanaged>D3DCMPFUNC</unmanaged>	
    /// <unmanaged-short>D3DCMPFUNC</unmanaged-short>	
    public enum Compare : int {	
        
        /// <summary>	
        /// <dd> <p>Always fail the test. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_NEVER']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_NEVER</unmanaged>	
        /// <unmanaged-short>D3DCMP_NEVER</unmanaged-short>	
        Never = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value is less than the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_LESS']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_LESS</unmanaged>	
        /// <unmanaged-short>D3DCMP_LESS</unmanaged-short>	
        Less = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value equals the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_EQUAL']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_EQUAL</unmanaged>	
        /// <unmanaged-short>D3DCMP_EQUAL</unmanaged-short>	
        Equal = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value is less than or equal to the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_LESSEQUAL']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_LESSEQUAL</unmanaged>	
        /// <unmanaged-short>D3DCMP_LESSEQUAL</unmanaged-short>	
        LessEqual = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value is greater than the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_GREATER']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_GREATER</unmanaged>	
        /// <unmanaged-short>D3DCMP_GREATER</unmanaged-short>	
        Greater = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value does not equal the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_NOTEQUAL']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_NOTEQUAL</unmanaged>	
        /// <unmanaged-short>D3DCMP_NOTEQUAL</unmanaged-short>	
        NotEqual = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Accept the new pixel if its value is greater than or equal to the value of the current pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_GREATEREQUAL']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_GREATEREQUAL</unmanaged>	
        /// <unmanaged-short>D3DCMP_GREATEREQUAL</unmanaged-short>	
        GreaterEqual = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Always pass the test. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCMP_ALWAYS']/*"/>	
        /// <msdn-id>bb172517</msdn-id>	
        /// <unmanaged>D3DCMP_ALWAYS</unmanaged>	
        /// <unmanaged-short>D3DCMP_ALWAYS</unmanaged-short>	
        Always = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>C++ applications can use alpha testing to control when pixels are written to the render-target surface. By using the <strong><see cref="SharpDX.Direct3D9.RenderState.AlphaTestEnable"/></strong> render state, your application sets the current Direct3D device so that it tests each pixel according to an alpha test function. If the test succeeds, the pixel is written to the surface. If it does not, Direct3D ignores the pixel. Select the alpha test function with the <strong><see cref="SharpDX.Direct3D9.RenderState.AlphaFunc"/></strong> render state. Your application can set a reference alpha value for all pixels to compare against by using the <strong><see cref="SharpDX.Direct3D9.RenderState.AlphaRef"/></strong> render state.</p><p>The most common use for alpha testing is to improve performance when rasterizing objects that are nearly transparent. If the color data being rasterized is more opaque than the color at a given pixel (<see cref="SharpDX.Direct3D9.CompareCaps.GreaterEqual"/>), then the pixel is written. Otherwise, the rasterizer ignores the pixel altogether, saving the processing required to blend the two colors. The following code example checks if a given comparison function is supported and, if so, it sets the comparison function parameters required to improve performance during rendering.</p><pre> // This code example assumes that pCaps is a	
    /// // <see cref="SharpDX.Direct3D9.Capabilities"/> structure that was filled with a 	
    /// // previous call to <see cref="SharpDX.Direct3D9.Direct3D.GetDeviceCaps"/>. if (pCaps.AlphaCmpCaps &amp; <see cref="SharpDX.Direct3D9.CompareCaps.GreaterEqual"/>)	
    /// { dev-&gt;SetRenderState(<see cref="SharpDX.Direct3D9.RenderState.AlphaRef"/>, (DWORD)0x00000001); dev-&gt;SetRenderState(<see cref="SharpDX.Direct3D9.RenderState.AlphaTestEnable"/>, TRUE);  dev-&gt;SetRenderState(<see cref="SharpDX.Direct3D9.RenderState.AlphaFunc"/>, <see cref="SharpDX.Direct3D9.Compare.GreaterEqual"/>);	
    /// } // If the comparison is not supported, render anyway. 	
    /// // The only drawback is no performance gain.	
    /// </pre><p>Not all hardware supports all alpha-testing features. You can check the device capabilities by calling the <strong><see cref="SharpDX.Direct3D9.Direct3D.GetDeviceCaps"/></strong> method. After retrieving the device capabilities, check the associated <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong> structure's AlphaCmpCaps member for the desired comparison function. If the AlphaCmpCaps member contains only the <see cref="SharpDX.Direct3D9.CompareCaps.Always"/> capability or only the <see cref="SharpDX.Direct3D9.CompareCaps.Never"/> capability, the driver does not support alpha tests.</p><p>?</p><p>?</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS']/*"/>	
    /// <msdn-id>bb172254</msdn-id>	
    /// <unmanaged>D3DPCMPCAPS</unmanaged>	
    /// <unmanaged-short>D3DPCMPCAPS</unmanaged-short>	
    [Flags]
    public enum CompareCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_NEVER']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_NEVER</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_NEVER</unmanaged-short>	
        Never = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_LESS']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_LESS</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_LESS</unmanaged-short>	
        Less = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_EQUAL']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_EQUAL</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_EQUAL</unmanaged-short>	
        Equal = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_LESSEQUAL']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_LESSEQUAL</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_LESSEQUAL</unmanaged-short>	
        LessEqual = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_GREATER']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_GREATER</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_GREATER</unmanaged-short>	
        Greater = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_NOTEQUAL']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_NOTEQUAL</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_NOTEQUAL</unmanaged-short>	
        NotEqual = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_GREATEREQUAL']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_GREATEREQUAL</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_GREATEREQUAL</unmanaged-short>	
        GreaterEqual = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPCMPCAPS_ALWAYS']/*"/>	
        /// <msdn-id>bb172254</msdn-id>	
        /// <unmanaged>D3DPCMPCAPS_ALWAYS</unmanaged>	
        /// <unmanaged-short>D3DPCMPCAPS_ALWAYS</unmanaged-short>	
        Always = unchecked((int)128),			
    }
    
    /// <summary>	
    /// <p>Specifies how to combine the glyph data from the source and destination surfaces in a call to <strong>ComposeRects</strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOMPOSERECTSOP']/*"/>	
    /// <msdn-id>bb509546</msdn-id>	
    /// <unmanaged>D3DCOMPOSERECTSOP</unmanaged>	
    /// <unmanaged-short>D3DCOMPOSERECTSOP</unmanaged-short>	
    public enum ComposeRectOperation : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOMPOSERECTS_COPY']/*"/>	
        /// <msdn-id>bb509546</msdn-id>	
        /// <unmanaged>D3DCOMPOSERECTS_COPY</unmanaged>	
        /// <unmanaged-short>D3DCOMPOSERECTS_COPY</unmanaged-short>	
        Copy = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOMPOSERECTS_OR']/*"/>	
        /// <msdn-id>bb509546</msdn-id>	
        /// <unmanaged>D3DCOMPOSERECTS_OR</unmanaged>	
        /// <unmanaged-short>D3DCOMPOSERECTS_OR</unmanaged-short>	
        Or = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOMPOSERECTS_AND']/*"/>	
        /// <msdn-id>bb509546</msdn-id>	
        /// <unmanaged>D3DCOMPOSERECTS_AND</unmanaged>	
        /// <unmanaged-short>D3DCOMPOSERECTS_AND</unmanaged-short>	
        And = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCOMPOSERECTS_NEG']/*"/>	
        /// <msdn-id>bb509546</msdn-id>	
        /// <unmanaged>D3DCOMPOSERECTS_NEG</unmanaged>	
        /// <unmanaged-short>D3DCOMPOSERECTS_NEG</unmanaged-short>	
        Negate = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Defines the compression mode used for storing compressed animation set data.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCOMPRESSION_FLAGS']/*"/>	
    /// <msdn-id>bb172734</msdn-id>	
    /// <unmanaged>D3DXCOMPRESSION_FLAGS</unmanaged>	
    /// <unmanaged-short>D3DXCOMPRESSION_FLAGS</unmanaged-short>	
    [Flags]
    public enum CompressionFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Implements fast compression.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXCOMPRESS_DEFAULT']/*"/>	
        /// <msdn-id>bb172734</msdn-id>	
        /// <unmanaged>D3DXCOMPRESS_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DXCOMPRESS_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>A combination of one or more flags that control the device create behavior.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE']/*"/>	
    /// <msdn-id>bb172527</msdn-id>	
    /// <unmanaged>D3DCREATE</unmanaged>	
    /// <unmanaged-short>D3DCREATE</unmanaged-short>	
    [Flags]
    public enum CreateFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_FPU_PRESERVE']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_FPU_PRESERVE</unmanaged>	
        /// <unmanaged-short>D3DCREATE_FPU_PRESERVE</unmanaged-short>	
        FpuPreserve = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_MULTITHREADED']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_MULTITHREADED</unmanaged>	
        /// <unmanaged-short>D3DCREATE_MULTITHREADED</unmanaged-short>	
        Multithreaded = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_PUREDEVICE']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_PUREDEVICE</unmanaged>	
        /// <unmanaged-short>D3DCREATE_PUREDEVICE</unmanaged-short>	
        PureDevice = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_SOFTWARE_VERTEXPROCESSING']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_SOFTWARE_VERTEXPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DCREATE_SOFTWARE_VERTEXPROCESSING</unmanaged-short>	
        SoftwareVertexProcessing = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_HARDWARE_VERTEXPROCESSING']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_HARDWARE_VERTEXPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DCREATE_HARDWARE_VERTEXPROCESSING</unmanaged-short>	
        HardwareVertexProcessing = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_MIXED_VERTEXPROCESSING']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_MIXED_VERTEXPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DCREATE_MIXED_VERTEXPROCESSING</unmanaged-short>	
        MixedVertexProcessing = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_DISABLE_DRIVER_MANAGEMENT']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_DISABLE_DRIVER_MANAGEMENT</unmanaged>	
        /// <unmanaged-short>D3DCREATE_DISABLE_DRIVER_MANAGEMENT</unmanaged-short>	
        DisableDriverManagement = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_ADAPTERGROUP_DEVICE']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_ADAPTERGROUP_DEVICE</unmanaged>	
        /// <unmanaged-short>D3DCREATE_ADAPTERGROUP_DEVICE</unmanaged-short>	
        AdapterGroupDevice = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX</unmanaged>	
        /// <unmanaged-short>D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX</unmanaged-short>	
        DisableExtendedDriverManagement = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_NOWINDOWCHANGES']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_NOWINDOWCHANGES</unmanaged>	
        /// <unmanaged-short>D3DCREATE_NOWINDOWCHANGES</unmanaged-short>	
        NoWindowChanges = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_DISABLE_PSGP_THREADING']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_DISABLE_PSGP_THREADING</unmanaged>	
        /// <unmanaged-short>D3DCREATE_DISABLE_PSGP_THREADING</unmanaged-short>	
        DisablePsgpThreading = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_ENABLE_PRESENTSTATS']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_ENABLE_PRESENTSTATS</unmanaged>	
        /// <unmanaged-short>D3DCREATE_ENABLE_PRESENTSTATS</unmanaged-short>	
        EnablePresentStatistics = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_DISABLE_PRINTSCREEN']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_DISABLE_PRINTSCREEN</unmanaged>	
        /// <unmanaged-short>D3DCREATE_DISABLE_PRINTSCREEN</unmanaged-short>	
        DisablePrintScreen = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCREATE_SCREENSAVER']/*"/>	
        /// <msdn-id>bb172527</msdn-id>	
        /// <unmanaged>D3DCREATE_SCREENSAVER</unmanaged>	
        /// <unmanaged-short>D3DCREATE_SCREENSAVER</unmanaged-short>	
        AllowScreensavers = unchecked((int)268435456),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines the faces of a cubemap.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACES']/*"/>	
    /// <msdn-id>bb172528</msdn-id>	
    /// <unmanaged>D3DCUBEMAP_FACES</unmanaged>	
    /// <unmanaged-short>D3DCUBEMAP_FACES</unmanaged-short>	
    public enum CubeMapFace : int {	
        
        /// <summary>	
        /// <dd> <p>Positive x-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_X']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_POSITIVE_X</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_POSITIVE_X</unmanaged-short>	
        PositiveX = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Negative x-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_X']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_X</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_NEGATIVE_X</unmanaged-short>	
        NegativeX = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Positive y-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_Y']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_POSITIVE_Y</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_POSITIVE_Y</unmanaged-short>	
        PositiveY = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Negative y-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_Y']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_Y</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_NEGATIVE_Y</unmanaged-short>	
        NegativeY = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Positive z-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_POSITIVE_Z']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_POSITIVE_Z</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_POSITIVE_Z</unmanaged-short>	
        PositiveZ = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Negative z-face of the cubemap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCUBEMAP_FACE_NEGATIVE_Z']/*"/>	
        /// <msdn-id>bb172528</msdn-id>	
        /// <unmanaged>D3DCUBEMAP_FACE_NEGATIVE_Z</unmanaged>	
        /// <unmanaged-short>D3DCUBEMAP_FACE_NEGATIVE_Z</unmanaged-short>	
        NegativeZ = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Defines the supported culling modes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumerated type are used by the <see cref="SharpDX.Direct3D9.RenderState.CullMode"/> render state. The culling modes define how back faces are culled when rendering a geometry.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCULL']/*"/>	
    /// <msdn-id>bb172529</msdn-id>	
    /// <unmanaged>D3DCULL</unmanaged>	
    /// <unmanaged-short>D3DCULL</unmanaged-short>	
    public enum Cull : int {	
        
        /// <summary>	
        /// <dd> <p>Do not cull back faces. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCULL_NONE']/*"/>	
        /// <msdn-id>bb172529</msdn-id>	
        /// <unmanaged>D3DCULL_NONE</unmanaged>	
        /// <unmanaged-short>D3DCULL_NONE</unmanaged-short>	
        None = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Cull back faces with clockwise vertices. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCULL_CW']/*"/>	
        /// <msdn-id>bb172529</msdn-id>	
        /// <unmanaged>D3DCULL_CW</unmanaged>	
        /// <unmanaged-short>D3DCULL_CW</unmanaged-short>	
        Clockwise = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Cull back faces with counterclockwise vertices. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCULL_CCW']/*"/>	
        /// <msdn-id>bb172529</msdn-id>	
        /// <unmanaged>D3DCULL_CCW</unmanaged>	
        /// <unmanaged-short>D3DCULL_CCW</unmanaged-short>	
        Counterclockwise = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Driver cursor capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCURSORCAPS']/*"/>	
    /// <msdn-id>bb172530</msdn-id>	
    /// <unmanaged>D3DCURSORCAPS</unmanaged>	
    /// <unmanaged-short>D3DCURSORCAPS</unmanaged-short>	
    [Flags]
    public enum CursorCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCURSORCAPS_COLOR']/*"/>	
        /// <msdn-id>bb172530</msdn-id>	
        /// <unmanaged>D3DCURSORCAPS_COLOR</unmanaged>	
        /// <unmanaged-short>D3DCURSORCAPS_COLOR</unmanaged-short>	
        Color = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DCURSORCAPS_LOWRES']/*"/>	
        /// <msdn-id>bb172530</msdn-id>	
        /// <unmanaged>D3DCURSORCAPS_LOWRES</unmanaged>	
        /// <unmanaged-short>D3DCURSORCAPS_LOWRES</unmanaged-short>	
        LowResolution = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEBUGMONITORTOKENS']/*"/>	
    /// <unmanaged>D3DDEBUGMONITORTOKENS</unmanaged>	
    /// <unmanaged-short>D3DDEBUGMONITORTOKENS</unmanaged-short>	
    public enum DebugMonitorTokens : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDMT_ENABLE']/*"/>	
        /// <unmanaged>D3DDMT_ENABLE</unmanaged>	
        /// <unmanaged-short>D3DDMT_ENABLE</unmanaged-short>	
        Enable = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDMT_DISABLE']/*"/>	
        /// <unmanaged>D3DDMT_DISABLE</unmanaged>	
        /// <unmanaged-short>D3DDMT_DISABLE</unmanaged-short>	
        Disable = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Defines the vertex declaration method which is a predefined operation performed by the tessellator (or any procedural geometry routine on the vertex data during tessellation).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The tessellator looks at the method to determine what data to calculate from the vertex data during tessellation. Mesh data should use the default value. Patches can use any of the other implemented types. </p><p>Vertex data is declared with an array of <strong><see cref="SharpDX.Direct3D9.VertexElement"/></strong> structures. Each element in the array contains a vertex declaration method.</p><p>In addition to using <see cref="SharpDX.Direct3D9.DeclarationMethod.Default"/>, a normal mesh can use <see cref="SharpDX.Direct3D9.DeclarationMethod.Lookup"/> and <see cref="SharpDX.Direct3D9.DeclarationMethod.LookupPresampled"/> methods when N-patches are enabled. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD']/*"/>	
    /// <msdn-id>bb172532</msdn-id>	
    /// <unmanaged>D3DDECLMETHOD</unmanaged>	
    /// <unmanaged-short>D3DDECLMETHOD</unmanaged-short>	
    public enum DeclarationMethod : byte {	
        
        /// <summary>	
        /// <dd> <p>Default value. The tessellator copies the vertex data (spline data for patches) as is, with no additional calculations. When the tessellator is used, this element is interpolated. Otherwise vertex data is copied into the input register. The input and output type can be any value, but are always the same type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_DEFAULT']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_DEFAULT</unmanaged-short>	
        Default = unchecked((byte)0),			
        
        /// <summary>	
        /// <dd> <p>Computes the tangent at a point on the rectangle or triangle patch in the U direction. The input type can be one of the following:	
        /// </p> <ul> <li><see cref="SharpDX.Direct3D9.DeclarationType.Color"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float3"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Short4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Ubyte4"/></li> </ul> <p> The output type is always <see cref="SharpDX.Direct3D9.DeclarationType.Float3"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_PARTIALU']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_PARTIALU</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_PARTIALU</unmanaged-short>	
        PartialU = unchecked((byte)1),			
        
        /// <summary>	
        /// <dd> <p>Computes the tangent at a point on the rectangle or triangle patch in the V direction. The input type can be one of the following:	
        /// </p> <ul> <li><see cref="SharpDX.Direct3D9.DeclarationType.Color"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float3"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Short4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Ubyte4"/></li> </ul> <p> The output type is always <see cref="SharpDX.Direct3D9.DeclarationType.Float3"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_PARTIALV']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_PARTIALV</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_PARTIALV</unmanaged-short>	
        PartialV = unchecked((byte)2),			
        
        /// <summary>	
        /// <dd> <p>Computes the normal at a point on the rectangle or triangle patch by taking the cross product of two tangents. The input type can be one of the following:	
        /// </p> <ul> <li><see cref="SharpDX.Direct3D9.DeclarationType.Color"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float3"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Short4"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Ubyte4"/></li> </ul> <p> The output type is always <see cref="SharpDX.Direct3D9.DeclarationType.Float3"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_CROSSUV']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_CROSSUV</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_CROSSUV</unmanaged-short>	
        CrossUV = unchecked((byte)3),			
        
        /// <summary>	
        /// <dd> <p>Copy out the U, V values at a point on the rectangle or triangle patch. This results in a 2D float. The input type must be set to <see cref="SharpDX.Direct3D9.DeclarationType.Unused"/>. The output data type is always <see cref="SharpDX.Direct3D9.DeclarationType.Float2"/>. The input stream and offset are also unused (but must be set to 0).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_UV']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_UV</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_UV</unmanaged-short>	
        UV = unchecked((byte)4),			
        
        /// <summary>	
        /// <dd> <p>Look up a displacement map. The input type can be one of the following:	
        /// </p> <ul> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float2"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float3"/></li> <li><see cref="SharpDX.Direct3D9.DeclarationType.Float4"/></li> </ul> <p> Only the .x and .y components are used for the texture map lookup. The output type is always <see cref="SharpDX.Direct3D9.DeclarationType.Float1"/>. The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping (Direct3D 9). This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_LOOKUP']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_LOOKUP</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_LOOKUP</unmanaged-short>	
        Lookup = unchecked((byte)5),			
        
        /// <summary>	
        /// <dd> <p>Look up a presampled displacement map. The input type must be set to <see cref="SharpDX.Direct3D9.DeclarationType.Unused"/>; the stream index and the stream offset must be set to 0. The output type for this operation is always <see cref="SharpDX.Direct3D9.DeclarationType.Float1"/>. The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping (Direct3D 9). This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. This method can be used only with <see cref="SharpDX.Direct3D9.DeclarationUsage.Sample"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLMETHOD_LOOKUPPRESAMPLED']/*"/>	
        /// <msdn-id>bb172532</msdn-id>	
        /// <unmanaged>D3DDECLMETHOD_LOOKUPPRESAMPLED</unmanaged>	
        /// <unmanaged-short>D3DDECLMETHOD_LOOKUPPRESAMPLED</unmanaged-short>	
        LookupPresampled = unchecked((byte)6),			
    }
    
    /// <summary>	
    /// <p>Defines a vertex declaration data type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Vertex data is declared with an array of <strong><see cref="SharpDX.Direct3D9.VertexElement"/></strong> structures. Each element in the array contains a vertex declaration data type.</p><p>Use the DirectX Caps Viewer Tool tool to see which types are supported on your device.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE']/*"/>	
    /// <msdn-id>bb172533</msdn-id>	
    /// <unmanaged>D3DDECLTYPE</unmanaged>	
    /// <unmanaged-short>D3DDECLTYPE</unmanaged-short>	
    public enum DeclarationType : byte {	
        
        /// <summary>	
        /// <dd> <p>One-component float expanded to (float, 0, 0, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT1']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT1</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT1</unmanaged-short>	
        Float1 = unchecked((byte)0),			
        
        /// <summary>	
        /// <dd> <p>Two-component float expanded to (float, float, 0, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT2']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT2</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT2</unmanaged-short>	
        Float2 = unchecked((byte)1),			
        
        /// <summary>	
        /// <dd> <p>Three-component float expanded to (float, float, float, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT3']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT3</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT3</unmanaged-short>	
        Float3 = unchecked((byte)2),			
        
        /// <summary>	
        /// <dd> <p>Four-component float expanded to (float, float, float, float).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT4']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT4</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT4</unmanaged-short>	
        Float4 = unchecked((byte)3),			
        
        /// <summary>	
        /// <dd> <p>Four-component, packed, unsigned bytes mapped to 0 to 1 range. Input is a <strong><see cref="SharpDX.Mathematics.Interop.RawColorBGRA"/></strong> and is expanded to RGBA order.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_D3DCOLOR']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_D3DCOLOR</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_D3DCOLOR</unmanaged-short>	
        Color = unchecked((byte)4),			
        
        /// <summary>	
        /// <dd> <p>Four-component, unsigned byte.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_UBYTE4']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_UBYTE4</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_UBYTE4</unmanaged-short>	
        Ubyte4 = unchecked((byte)5),			
        
        /// <summary>	
        /// <dd> <p>Two-component, signed short expanded to (value, value, 0, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_SHORT2']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_SHORT2</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_SHORT2</unmanaged-short>	
        Short2 = unchecked((byte)6),			
        
        /// <summary>	
        /// <dd> <p>Four-component, signed short expanded to (value, value, value, value).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_SHORT4']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_SHORT4</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_SHORT4</unmanaged-short>	
        Short4 = unchecked((byte)7),			
        
        /// <summary>	
        /// <dd> <p>Four-component byte with each byte normalized by dividing with 255.0f.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_UBYTE4N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_UBYTE4N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_UBYTE4N</unmanaged-short>	
        UByte4N = unchecked((byte)8),			
        
        /// <summary>	
        /// <dd> <p>Normalized, two-component, signed short, expanded to (first short/32767.0, second short/32767.0, 0, 1). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_SHORT2N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_SHORT2N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_SHORT2N</unmanaged-short>	
        Short2N = unchecked((byte)9),			
        
        /// <summary>	
        /// <dd> <p>Normalized, four-component, signed short, expanded to (first short/32767.0, second short/32767.0, third short/32767.0, fourth short/32767.0). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_SHORT4N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_SHORT4N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_SHORT4N</unmanaged-short>	
        Short4N = unchecked((byte)10),			
        
        /// <summary>	
        /// <dd> <p>Normalized, two-component, unsigned short, expanded to (first short/65535.0, short short/65535.0, 0, 1). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_USHORT2N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_USHORT2N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_USHORT2N</unmanaged-short>	
        UShort2N = unchecked((byte)11),			
        
        /// <summary>	
        /// <dd> <p>Normalized, four-component, unsigned short, expanded to (first short/65535.0, second short/65535.0, third short/65535.0, fourth short/65535.0). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_USHORT4N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_USHORT4N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_USHORT4N</unmanaged-short>	
        UShort4N = unchecked((byte)12),			
        
        /// <summary>	
        /// <dd> <p>Three-component, unsigned, 10 10 10 format expanded to (value, value, value, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_UDEC3']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_UDEC3</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_UDEC3</unmanaged-short>	
        UDec3 = unchecked((byte)13),			
        
        /// <summary>	
        /// <dd> <p>Three-component, signed, 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_DEC3N']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_DEC3N</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_DEC3N</unmanaged-short>	
        Dec3N = unchecked((byte)14),			
        
        /// <summary>	
        /// <dd> <p>Two-component, 16-bit, floating point expanded to (value, value, 0, 1).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT16_2']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT16_2</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT16_2</unmanaged-short>	
        HalfTwo = unchecked((byte)15),			
        
        /// <summary>	
        /// <dd> <p>Four-component, 16-bit, floating point expanded to (value, value, value, value). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_FLOAT16_4']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_FLOAT16_4</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_FLOAT16_4</unmanaged-short>	
        HalfFour = unchecked((byte)16),			
        
        /// <summary>	
        /// <dd> <p>Type field in the declaration is unused. This is designed for use with <see cref="SharpDX.Direct3D9.DeclarationMethod.UV"/>  and <see cref="SharpDX.Direct3D9.DeclarationMethod.LookupPresampled"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLTYPE_UNUSED']/*"/>	
        /// <msdn-id>bb172533</msdn-id>	
        /// <unmanaged>D3DDECLTYPE_UNUSED</unmanaged>	
        /// <unmanaged-short>D3DDECLTYPE_UNUSED</unmanaged-short>	
        Unused = unchecked((byte)17),			
    }
    
    /// <summary>	
    /// <p>Constants describing the vertex data types supported by a device.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS']/*"/>	
    /// <msdn-id>bb172552</msdn-id>	
    /// <unmanaged>D3DDTCAPS</unmanaged>	
    /// <unmanaged-short>D3DDTCAPS</unmanaged-short>	
    [Flags]
    public enum DeclarationTypeCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_UBYTE4']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_UBYTE4</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_UBYTE4</unmanaged-short>	
        UByte4 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_UBYTE4N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_UBYTE4N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_UBYTE4N</unmanaged-short>	
        UByte4N = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_SHORT2N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_SHORT2N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_SHORT2N</unmanaged-short>	
        Short2N = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_SHORT4N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_SHORT4N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_SHORT4N</unmanaged-short>	
        Short4N = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_USHORT2N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_USHORT2N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_USHORT2N</unmanaged-short>	
        UShort2N = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_USHORT4N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_USHORT4N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_USHORT4N</unmanaged-short>	
        UShort4N = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_UDEC3']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_UDEC3</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_UDEC3</unmanaged-short>	
        UDec3 = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_DEC3N']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_DEC3N</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_DEC3N</unmanaged-short>	
        Dec3N = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_FLOAT16_2']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_FLOAT16_2</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_FLOAT16_2</unmanaged-short>	
        HalfTwo = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDTCAPS_FLOAT16_4']/*"/>	
        /// <msdn-id>bb172552</msdn-id>	
        /// <unmanaged>D3DDTCAPS_FLOAT16_4</unmanaged>	
        /// <unmanaged-short>D3DDTCAPS_FLOAT16_4</unmanaged-short>	
        HalfFour = unchecked((int)512),			
    }
    
    /// <summary>	
    /// <p>Identifies the intended use of vertex data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Vertex data is declared with an array of <strong><see cref="SharpDX.Direct3D9.VertexElement"/></strong> structures. Each element in the array contains a usage type.</p><p>For more information about vertex declarations, see Vertex Declaration (Direct3D 9).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE']/*"/>	
    /// <msdn-id>bb172534</msdn-id>	
    /// <unmanaged>D3DDECLUSAGE</unmanaged>	
    /// <unmanaged-short>D3DDECLUSAGE</unmanaged-short>	
    public enum DeclarationUsage : byte {	
        
        /// <summary>	
        /// <dd> <p>Position data ranging from (-1,-1) to (1,1). Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Position"/> with a usage index of 0 to specify untransformed position for fixed function vertex processing and the n-patch tessellator. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Position"/> with a usage index of 1 to specify untransformed position in the fixed function vertex shader for vertex tweening. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_POSITION']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_POSITION</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_POSITION</unmanaged-short>	
        Position = unchecked((byte)0),			
        
        /// <summary>	
        /// <dd> <p>Blending weight data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.BlendWeight"/> with a usage index of 0 to specify the blend weights used in indexed and nonindexed vertex blending.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_BLENDWEIGHT']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_BLENDWEIGHT</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_BLENDWEIGHT</unmanaged-short>	
        BlendWeight = unchecked((byte)1),			
        
        /// <summary>	
        /// <dd> <p>Blending indices data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.BlendIndices"/> with a usage index of 0 to specify matrix indices for indexed paletted skinning.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_BLENDINDICES']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_BLENDINDICES</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_BLENDINDICES</unmanaged-short>	
        BlendIndices = unchecked((byte)2),			
        
        /// <summary>	
        /// <dd> <p>Vertex normal data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Normal"/> with a usage index of 0 to specify vertex normals for fixed function vertex processing and the n-patch tessellator. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Normal"/> with a usage index of 1 to specify vertex normals for fixed function vertex processing for vertex tweening.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_NORMAL']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_NORMAL</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_NORMAL</unmanaged-short>	
        Normal = unchecked((byte)3),			
        
        /// <summary>	
        /// <dd> <p>Point size data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.PointSize"/> with a usage index of 0 to specify the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_PSIZE']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_PSIZE</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_PSIZE</unmanaged-short>	
        PointSize = unchecked((byte)4),			
        
        /// <summary>	
        /// <dd> <p>Texture coordinate data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.TextureCoordinate"/>, n to specify texture coordinates in fixed function vertex processing and in pixel shaders prior to ps_3_0. These can be used to pass user defined data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_TEXCOORD']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_TEXCOORD</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_TEXCOORD</unmanaged-short>	
        TextureCoordinate = unchecked((byte)5),			
        
        /// <summary>	
        /// <dd> <p>Vertex tangent data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_TANGENT']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_TANGENT</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_TANGENT</unmanaged-short>	
        Tangent = unchecked((byte)6),			
        
        /// <summary>	
        /// <dd> <p>Vertex binormal data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_BINORMAL']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_BINORMAL</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_BINORMAL</unmanaged-short>	
        Binormal = unchecked((byte)7),			
        
        /// <summary>	
        /// <dd> <p>Single positive floating point value. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.TessellateFactor"/> with a usage index of 0 to specify a tessellation factor used in the tessellation unit to control the rate of tessellation. For more information about the data type, see <see cref="SharpDX.Direct3D9.DeclarationType.Float1"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_TESSFACTOR']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_TESSFACTOR</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_TESSFACTOR</unmanaged-short>	
        TessellateFactor = unchecked((byte)8),			
        
        /// <summary>	
        /// <dd> <p>Vertex data contains transformed position data ranging from (0,0) to (viewport width, viewport height). Use <see cref="SharpDX.Direct3D9.DeclarationUsage.PositionTransformed"/> with a usage index of 0 to specify transformed position. When a declaration containing this is set, the pipeline does not perform vertex processing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_POSITIONT']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_POSITIONT</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_POSITIONT</unmanaged-short>	
        PositionTransformed = unchecked((byte)9),			
        
        /// <summary>	
        /// <dd> <p>Vertex data contains diffuse or specular color. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Color"/> with a usage index of 0 to specify the diffuse color in the fixed function vertex shader and pixel shaders prior to ps_3_0. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Color"/> with a usage index of 1 to specify the specular color in the fixed function vertex shader and pixel shaders prior to ps_3_0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_COLOR']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_COLOR</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_COLOR</unmanaged-short>	
        Color = unchecked((byte)10),			
        
        /// <summary>	
        /// <dd> <p>Vertex data contains fog data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Fog"/> with a usage index of 0 to specify a fog blend value used after pixel shading finishes. This applies to pixel shaders prior to version ps_3_0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_FOG']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_FOG</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_FOG</unmanaged-short>	
        Fog = unchecked((byte)11),			
        
        /// <summary>	
        /// <dd> <p>Vertex data contains depth data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_DEPTH']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_DEPTH</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_DEPTH</unmanaged-short>	
        Depth = unchecked((byte)12),			
        
        /// <summary>	
        /// <dd> <p>Vertex data contains sampler data. Use <see cref="SharpDX.Direct3D9.DeclarationUsage.Sample"/> with a usage index of 0 to specify the displacement value to look up. It can be used only with D3DDECLUSAGE_LOOKUPPRESAMPLED or D3DDECLUSAGE_LOOKUP.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDECLUSAGE_SAMPLE']/*"/>	
        /// <msdn-id>bb172534</msdn-id>	
        /// <unmanaged>D3DDECLUSAGE_SAMPLE</unmanaged>	
        /// <unmanaged-short>D3DDECLUSAGE_SAMPLE</unmanaged-short>	
        Sample = unchecked((byte)13),			
    }
    
    /// <summary>	
    /// <p>Defines the degree of the variables in the equation that describes a curve.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumeration are used to describe the curves used by rectangle and triangle patches. For more information, see <see cref="SharpDX.Direct3D9.RenderState.CullMode"/>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEGREETYPE']/*"/>	
    /// <msdn-id>bb172536</msdn-id>	
    /// <unmanaged>D3DDEGREETYPE</unmanaged>	
    /// <unmanaged-short>D3DDEGREETYPE</unmanaged-short>	
    public enum Degree : int {	
        
        /// <summary>	
        /// <dd> <p>Curve is described by variables of first order.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEGREE_LINEAR']/*"/>	
        /// <msdn-id>bb172536</msdn-id>	
        /// <unmanaged>D3DDEGREE_LINEAR</unmanaged>	
        /// <unmanaged-short>D3DDEGREE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Curve is described by variables of second order.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEGREE_QUADRATIC']/*"/>	
        /// <msdn-id>bb172536</msdn-id>	
        /// <unmanaged>D3DDEGREE_QUADRATIC</unmanaged>	
        /// <unmanaged-short>D3DDEGREE_QUADRATIC</unmanaged-short>	
        Quadratic = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Curve is described by variables of third order.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEGREE_CUBIC']/*"/>	
        /// <msdn-id>bb172536</msdn-id>	
        /// <unmanaged>D3DDEGREE_CUBIC</unmanaged>	
        /// <unmanaged-short>D3DDEGREE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Curve is described by variables of fourth order.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEGREE_QUINTIC']/*"/>	
        /// <msdn-id>bb172536</msdn-id>	
        /// <unmanaged>D3DDEGREE_QUINTIC</unmanaged>	
        /// <unmanaged-short>D3DDEGREE_QUINTIC</unmanaged-short>	
        Quintic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Represents the capabilities of the hardware exposed through the Direct3D object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The MaxTextureBlendStages and MaxSimultaneousTextures members might seem similar, but they contain different information. The MaxTextureBlendStages member contains the total number of texture-blending stages supported by the current device, and the MaxSimultaneousTextures member describes how many of those stages can have textures bound to them by using the <strong>SetTexture</strong> method.</p><p>When the driver fills this structure, it can set values for execute-buffer capabilities, even when the interface being used to retrieve the capabilities (such as <strong><see cref="SharpDX.Direct3D9.Device"/></strong>) does not support execute buffers.</p><p>In general, performance problems may occur if you use a texture and then modify it during a scene. Ensure that no texture used in the current <strong>BeginScene</strong> and <strong>EndScene</strong> block is evicted unless absolutely necessary. In the case of extremely high texture usage within a scene, the results are undefined. This occurs when you modify a texture that you have used in the scene and there is no spare texture memory available. For such systems, the contents of the z-buffer become invalid at EndScene. Applications should not call <strong>UpdateSurface</strong> to or from the back buffer on this type of hardware inside a BeginScene/EndScene pair. In addition, applications should not try to access the z-buffer if the <see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/> capability flag is set. Finally, applications should not lock the back buffer or the z-buffer inside a BeginScene/EndScene pair.</p><p>The following flags concerning mipmapped textures are not supported in Direct3D 9. </p><ul> <li>D3DPTFILTERCAPS_LINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPLINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPNEAREST</li> <li>D3DPTFILTERCAPS_MIPNEAREST</li> <li>D3DPTFILTERCAPS_NEAREST</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS']/*"/>	
    /// <msdn-id>bb172513</msdn-id>	
    /// <unmanaged>D3DDEVCAPS</unmanaged>	
    /// <unmanaged-short>D3DDEVCAPS</unmanaged-short>	
    [Flags]
    public enum DeviceCaps : int {	
        
        /// <summary>	
        /// <dd> <p>Member of the <strong><see cref="SharpDX.Direct3D9.DeviceType"/></strong> enumerated type, which identifies what type of resources are used for processing vertices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_EXECUTESYSTEMMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_EXECUTESYSTEMMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_EXECUTESYSTEMMEMORY</unmanaged-short>	
        ExecuteSystemMemory = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Adapter on which this Direct3D device was created. This ordinal is valid only to pass to methods of the <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface that created this Direct3D device. The <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface can always be retrieved by calling <strong>GetDirect3D</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_EXECUTEVIDEOMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_EXECUTEVIDEOMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_EXECUTEVIDEOMEMORY</unmanaged-short>	
        ExecuteVideoMemory = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p> </p><p>The following driver-specific capability.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.ReadScanline"/></strong></dt> </dl> </td><td> <p>Display hardware is capable of returning the current scan line.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.Overlay"/></strong></dt> </dl> </td><td> <p>The display driver supports an overlay DDI that allows for verification of overlay capabilities. For more information about the overlay DDI, see Overlay DDI.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_TLVERTEXSYSTEMMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_TLVERTEXSYSTEMMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_TLVERTEXSYSTEMMEMORY</unmanaged-short>	
        TLVertexSystemMemory = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps2"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_TLVERTEXVIDEOMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_TLVERTEXVIDEOMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_TLVERTEXVIDEOMEMORY</unmanaged-short>	
        TLVertexVideoMemory = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps3"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_TEXTURESYSTEMMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_TEXTURESYSTEMMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_TEXTURESYSTEMMEMORY</unmanaged-short>	
        TextureSystemMemory = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask of values representing what presentation swap intervals are available.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/></strong></dt> </dl> </td><td> <p>The driver supports an immediate presentation swap interval.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.One"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Two"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every second screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Three"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every third screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Four"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every fourth screen refresh.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_TEXTUREVIDEOMEMORY']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_TEXTUREVIDEOMEMORY</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_TEXTUREVIDEOMEMORY</unmanaged-short>	
        TextureVideoMemory = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask indicating what hardware support is available for cursors. Direct3D 9 does not define alpha-blending cursor capabilities.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.Color"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports at least a hardware color cursor in high-resolution modes (with scan lines greater than or equal to 400).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.LowResolution"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports a hardware color cursor in both high-resolution and low-resolution modes (with scan lines less than 400).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMTLVERTEX']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_DRAWPRIMTLVERTEX</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_DRAWPRIMTLVERTEX</unmanaged-short>	
        DrawPrimTLVertex = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Flags identifying the capabilities of the device.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanBlitSysToNonLocal"/></strong></dt> </dl> </td><td> <p>Device supports blits from system-memory textures to nonlocal video-memory textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanRenderAfterFlip"/></strong></dt> </dl> </td><td> <p>Device can queue rendering commands after a page flip. Applications do not change their behavior if this flag is set; this capability means that the device is relatively fast.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 5-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2Extended"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 7-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimTLVertex"/></strong></dt> </dl> </td><td> <p>Device exports an <strong><see cref="SharpDX.Direct3D9.Device.DrawPrimitives"/></strong>-aware hal.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWRasterization"/></strong></dt> </dl> </td><td> <p>Device has hardware acceleration for scene rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWTransformAndLight"/></strong></dt> </dl> </td><td> <p>Device can support transformation and lighting in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.NPatches"/></strong></dt> </dl> </td><td> <p>Device supports N patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.PureDevice"/></strong></dt> </dl> </td><td> <p>Device can support rasterization, transform, lighting, and shading in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.QuinticRTPatches"/></strong></dt> </dl> </td><td> <p>Device supports quintic B?zier curves and B-splines.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatches"/></strong></dt> </dl> </td><td> <p>Device supports rectangular and triangular patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/></strong></dt> </dl> </td><td> <p>When this device capability is set, the hardware architecture does not require caching of any information, and uncached patches (handle zero) will be drawn as efficiently as cached ones. Note that setting <see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/> does not mean that a patch with handle zero can be drawn. A handle-zero patch can always be drawn whether this cap is set or not.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.SeparateTextureMemory"/></strong></dt> </dl> </td><td> <p>Device is texturing from separate memory pools.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureNonLocalVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from non-local video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from device memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from system memory for transformed and lit vertices.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from video memory for transformed and lit vertices.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_CANRENDERAFTERFLIP']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_CANRENDERAFTERFLIP</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_CANRENDERAFTERFLIP</unmanaged-short>	
        CanRenderAfterFlip = unchecked((int)2048),			
        
        /// <summary>	
        /// <dd> <p>Miscellaneous driver primitive capabilities. See <see cref="SharpDX.Direct3D9.PrimitiveMiscCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_TEXTURENONLOCALVIDMEM']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_TEXTURENONLOCALVIDMEM</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_TEXTURENONLOCALVIDMEM</unmanaged-short>	
        TextureNonLocalVideoMemory = unchecked((int)4096),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Information on raster-drawing capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Anisotropy"/></strong></dt> </dl> </td><td> <p>Device supports anisotropic filtering.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ColorPerspective"/></strong></dt> </dl> </td><td> <p>Device iterates colors perspective correctly.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Dither"/></strong></dt> </dl> </td><td> <p>Device can dither to improve color resolution.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthBias"/></strong></dt> </dl> </td><td> <p>Device supports legacy depth bias. For true depth bias, see <see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogRange"/></strong></dt> </dl> </td><td> <p>Device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogTable"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogVertex"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MipMapLodBias"/></strong></dt> </dl> </td><td> <p>Device supports level-of-detail bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would. For more information about level-of-detail bias in mipmaps, see <see cref="SharpDX.Direct3D9.SamplerState.MipMapLodBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MultisampleToggle"/></strong></dt> </dl> </td><td> <p>Device supports toggling multisampling on and off between <strong><see cref="SharpDX.Direct3D9.Device.BeginScene"/></strong> and <strong><see cref="SharpDX.Direct3D9.Device.EndScene"/></strong> (using <see cref="SharpDX.Direct3D9.RenderState.MultisampleAntialias"/>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ScissorTest"/></strong></dt> </dl> </td><td> <p>Device supports scissor test. See Scissor Test (Direct3D 9).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/></strong></dt> </dl> </td><td> <p>Device performs true slope-scale based depth bias. This is in contrast to the legacy style depth bias.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WBuffer"/></strong></dt> </dl> </td><td> <p>Device supports depth buffering using w.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WFog"/></strong></dt> </dl> </td><td> <p>Device supports w-based fog. W-based fog is used when a perspective projection matrix is specified, but affine projections still use z-based fog. The system considers a projection matrix that contains a nonzero value in the [3][4] element to be a perspective projection matrix.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/></strong></dt> </dl> </td><td> <p>Device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth-buffer. This leaves more video memory for textures. The method used to perform HSR is hardware-dependent and is transparent to the application.</p> <p>Z-bufferless HSR is performed if no depth-buffer surface is associated with the rendering-target surface and the depth-buffer comparison test is enabled (that is, when the state value associated with the <strong><see cref="SharpDX.Direct3D9.RenderState.ZEnable"/></strong> enumeration constant is set to <strong>TRUE</strong>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZFog"/></strong></dt> </dl> </td><td> <p>Device supports z-based fog.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthTest"/></strong></dt> </dl> </td><td> <p>Device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels have been rendered.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMITIVES2']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_DRAWPRIMITIVES2</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_DRAWPRIMITIVES2</unmanaged-short>	
        DrawPrimitives2 = unchecked((int)8192),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Z-buffer comparison capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Always"/></strong></dt> </dl> </td><td> <p>Always pass the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Equal"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z equals the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Greater"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.GreaterEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Less"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.LessEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Never"/></strong></dt> </dl> </td><td> <p>Always fail the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.NotEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z does not equal the current z.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_SEPARATETEXTUREMEMORIES']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_SEPARATETEXTUREMEMORIES</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_SEPARATETEXTUREMEMORIES</unmanaged-short>	
        SeparateTextureMemory = unchecked((int)16384),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Source-blending capabilities. This member can be one or more of the following flags. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BlendFactor"/></strong></dt> </dl> </td><td> <p>The driver supports both <see cref="SharpDX.Direct3D9.Blend.BlendFactor"/> and <see cref="SharpDX.Direct3D9.Blend.InverseBlendFactor"/>. See <strong><see cref="SharpDX.Direct3D9.Blend"/></strong>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BothInverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As) and destination blend factor is (As, As, As, As); the destination blend selection is overridden.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Bothsrcalpha"/></strong></dt> </dl> </td><td> <p>The driver supports the <see cref="SharpDX.Direct3D9.Blend.Bothsrcalpha"/> blend mode. (This blend mode is obsolete. For more information, see <see cref="SharpDX.Direct3D9.Blend"/>.)</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (Ad, Ad, Ad, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rd, Gd, Bd, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - As, 1 - As, 1 - As, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - PSOutColor[1]r, 1 - PSOutColor[1]g, 1 - PSOutColor[1]b, not used)). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.One"/></strong></dt> </dl> </td><td> <p>Blend factor is (1, 1, 1, 1).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (As, As, As, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlphaSaturated"/></strong></dt> </dl> </td><td> <p>Blend factor is (f, f, f, 1); f = min(As, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rs, Gs, Bs, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (PSOutColor[1]r, PSOutColor[1]g, PSOutColor[1]b, not used). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Zero"/></strong></dt> </dl> </td><td> <p>Blend factor is (0, 0, 0, 0).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_DRAWPRIMITIVES2EX']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_DRAWPRIMITIVES2EX</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_DRAWPRIMITIVES2EX</unmanaged-short>	
        DrawPrimitives2Extended = unchecked((int)32768),			
        
        /// <summary>	
        /// <dd> <p>Destination-blending capabilities. This member can be the same capabilities that are defined for the SrcBlendCaps member. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_HWTRANSFORMANDLIGHT']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_HWTRANSFORMANDLIGHT</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_HWTRANSFORMANDLIGHT</unmanaged-short>	
        HWTransformAndLight = unchecked((int)65536),			
        
        /// <summary>	
        /// <dd> <p>Alpha-test comparison capabilities. This member can include the same capability flags defined for the ZCmpCaps member. If this member contains only the <see cref="SharpDX.Direct3D9.CompareCaps.Always"/> capability or only the <see cref="SharpDX.Direct3D9.CompareCaps.Never"/> capability, the driver does not support alpha tests. Otherwise, the flags identify the individual comparisons that are supported for alpha testing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_CANBLTSYSTONONLOCAL']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_CANBLTSYSTONONLOCAL</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_CANBLTSYSTONONLOCAL</unmanaged-short>	
        CanBlitSysToNonLocal = unchecked((int)131072),			
        
        /// <summary>	
        /// <dd> <p>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the <see cref="SharpDX.Direct3D9.ShadeMode.Flat"/> mode (as specified in the <strong><see cref="SharpDX.Direct3D9.ShadeMode"/></strong> enumerated type). This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). </p> <p>The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver.</p> <p> </p><p>This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.AlphaGouraudBlend"/></strong></dt> </dl> </td><td> <p>Device can support an alpha component for Gouraud-blended transparency (the <see cref="SharpDX.Direct3D9.ShadeMode.Gouraud"/> state for the <see cref="SharpDX.Direct3D9.ShadeMode"/> enumerated type). In this mode, the alpha color component of a primitive is provided at vertices and interpolated across a face along with the other color components.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.ColorGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device can support colored Gouraud shading. In this mode, the per-vertex color components (red, green, and blue) are interpolated across a triangle face.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.FogGouraud"/></strong></dt> </dl> </td><td> <p>Device can support fog in the Gouraud shading mode.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.SpecularGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device supports Gouraud shading of specular highlights.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_HWRASTERIZATION']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_HWRASTERIZATION</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_HWRASTERIZATION</unmanaged-short>	
        HWRasterization = unchecked((int)524288),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Miscellaneous texture-mapping capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Alpha"/></strong></dt> </dl> </td><td> <p>Alpha in texture pixels is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.AlphaPalette"/></strong></dt> </dl> </td><td> <p>Device can draw alpha from texture palettes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMap"/></strong></dt> </dl> </td><td> <p>Supports cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that cube texture maps have dimensions specified as powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipCubeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipVolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/></strong></dt> </dl> </td><td> <p><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. A device that exposes this capability can use such a texture if all of the following requirements are met.</p> <p> </p><ul> <li>The texture addressing mode for the texture stage is set to <see cref="SharpDX.Direct3D9.TextureAddress.Clamp"/>.</li> <li>Texture wrapping for the texture stage is disabled (<strong>D3DRS_WRAP</strong> n set to 0).</li> <li>Mipmapping is not in use (use magnification filter only).</li> <li>Texture formats must not be <see cref="SharpDX.Direct3D9.Format.Dxt1"/> through <see cref="SharpDX.Direct3D9.Format.Dxt5"/>.</li> </ul> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> <p>A texture that is not a power of two cannot be set at a stage that will be read based on a shader computation (such as the bem - ps and texm3x3 - ps instructions in pixel shaders versions 1_0 to 1_3). For example, these textures can be used to store bumps that will be fed into texture reads, but not the environment maps that are used in texbem - ps, texbeml - ps, and texm3x3spec - ps. This means that a texture with dimensions that are not powers of two cannot be addressed or sampled using texture coordinates computed within the shader. This type of operation is known as a dependent read and cannot be performed on these types of textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NoProjectedBumpEnvironment"/></strong></dt> </dl> </td><td> <p>Device does not support a projected bump-environment loopkup operation in programmable and fixed function shaders.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Perspective"/></strong></dt> </dl> </td><td> <p>Perspective correction texturing is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/></strong></dt> </dl> </td><td> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is not set, all textures must have widths and heights specified as powers of two. This requirement does not apply to either cube textures or volume textures.</p> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. See <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> description.</p> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Projected"/></strong></dt> </dl> </td><td> <p>Supports the <see cref="SharpDX.Direct3D9.TextureTransform.Projected"/> texture transformation flag. When applied, the device divides transformed texture coordinates by the last texture coordinate. If this capability is present, then the projective divide occurs per pixel. If this capability is not present, but the projective divide needs to occur anyway, then it is performed on a per-vertex basis by the Direct3D runtime.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.SquareOnly"/></strong></dt> </dl> </td><td> <p>All textures must be square.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/></strong></dt> </dl> </td><td> <p>Texture indices are not scaled by the texture size prior to interpolation.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that volume texture maps have dimensions specified as powers of two.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_PUREDEVICE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_PUREDEVICE</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_PUREDEVICE</unmanaged-short>	
        PureDevice = unchecked((int)1048576),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_QUINTICRTPATCHES']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_QUINTICRTPATCHES</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_QUINTICRTPATCHES</unmanaged-short>	
        QuinticRTPatches = unchecked((int)2097152),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a cube texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_RTPATCHES']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_RTPATCHES</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_RTPATCHES</unmanaged-short>	
        RTPatches = unchecked((int)4194304),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a volume texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_RTPATCHHANDLEZERO']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_RTPATCHHANDLEZERO</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_RTPATCHHANDLEZERO</unmanaged-short>	
        RTPatchHandleZero = unchecked((int)8388608),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Texture-addressing capabilities for texture objects. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Border"/></strong></dt> </dl> </td><td> <p>Device supports setting coordinates outside the range [0.0, 1.0] to the border color, as specified by the <see cref="SharpDX.Direct3D9.SamplerState.BorderColor"/> texture-stage state.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Clamp"/></strong></dt> </dl> </td><td> <p>Device can clamp textures to addresses.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.IndependentUV"/></strong></dt> </dl> </td><td> <p>Device can separate the texture-addressing modes of the u and v coordinates of the texture. This ability corresponds to the <see cref="SharpDX.Direct3D9.SamplerState.AddressU"/> and <see cref="SharpDX.Direct3D9.SamplerState.AddressV"/> render-state values.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Mirror"/></strong></dt> </dl> </td><td> <p>Device can mirror textures to addresses.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.MirrorOnce"/></strong></dt> </dl> </td><td> <p>Device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Wrap"/></strong></dt> </dl> </td><td> <p>Device can wrap textures to addresses.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS_NPATCHES']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DDEVCAPS_NPATCHES</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS_NPATCHES</unmanaged-short>	
        NPatches = unchecked((int)16777216),			
    }
    
    /// <summary>	
    /// <p><see cref="SharpDX.Direct3D9.DeviceCaps2"/> driver capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2']/*"/>	
    /// <msdn-id>bb172537</msdn-id>	
    /// <unmanaged>D3DDEVCAPS2</unmanaged>	
    /// <unmanaged-short>D3DDEVCAPS2</unmanaged-short>	
    [Flags]
    public enum DeviceCaps2 : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_STREAMOFFSET']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_STREAMOFFSET</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_STREAMOFFSET</unmanaged-short>	
        StreamOffset = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_DMAPNPATCH']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_DMAPNPATCH</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_DMAPNPATCH</unmanaged-short>	
        DMapNPatch = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_ADAPTIVETESSRTPATCH']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_ADAPTIVETESSRTPATCH</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_ADAPTIVETESSRTPATCH</unmanaged-short>	
        AdaptiveTessRTPatch = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_ADAPTIVETESSNPATCH']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_ADAPTIVETESSNPATCH</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_ADAPTIVETESSNPATCH</unmanaged-short>	
        AdaptiveTessNPatch = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES</unmanaged-short>	
        CanStretchRectFromTextures = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH</unmanaged-short>	
        PresampledMapNPatch = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET']/*"/>	
        /// <msdn-id>bb172537</msdn-id>	
        /// <unmanaged>D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET</unmanaged>	
        /// <unmanaged-short>D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET</unmanaged-short>	
        VertexElementsCanShareStreamOffset = unchecked((int)64),			
    }
    
    /// <summary>	
    /// <p>Defines device types.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>All methods of the <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface that take a <strong><see cref="SharpDX.Direct3D9.DeviceType"/></strong> device type will fail if <see cref="SharpDX.Direct3D9.DeviceType.NullReference"/> is specified. To use these methods, substitute <see cref="SharpDX.Direct3D9.DeviceType.Reference"/> in the method call.</p><p>A <see cref="SharpDX.Direct3D9.DeviceType.Reference"/> device should be created in <see cref="SharpDX.Direct3D9.Pool.Scratch"/> memory, unless vertex and index buffers are required. To support vertex and index buffers, create the device in <see cref="SharpDX.Direct3D9.Pool.SystemMemory"/> memory.</p><p>If D3dref9.dll is installed, Direct3D will use the reference rasterizer to create a <see cref="SharpDX.Direct3D9.DeviceType.Reference"/> device type, even if <see cref="SharpDX.Direct3D9.DeviceType.NullReference"/> is specified. If D3dref9.dll is not available and <see cref="SharpDX.Direct3D9.DeviceType.NullReference"/> is specified, Direct3D will neither render nor present the scene.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVTYPE']/*"/>	
    /// <msdn-id>bb172547</msdn-id>	
    /// <unmanaged>D3DDEVTYPE</unmanaged>	
    /// <unmanaged-short>D3DDEVTYPE</unmanaged-short>	
    public enum DeviceType : int {	
        
        /// <summary>	
        /// <dd> <p>Hardware rasterization. Shading is done with software, hardware, or mixed transform and lighting.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVTYPE_HAL']/*"/>	
        /// <msdn-id>bb172547</msdn-id>	
        /// <unmanaged>D3DDEVTYPE_HAL</unmanaged>	
        /// <unmanaged-short>D3DDEVTYPE_HAL</unmanaged-short>	
        Hardware = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Direct3D features are implemented in software; however, the reference rasterizer does make use of special CPU instructions whenever it can.</p> <p>The reference device is installed by the Windows SDK 8.0 or later and is intended as an aid in debugging for development only.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVTYPE_REF']/*"/>	
        /// <msdn-id>bb172547</msdn-id>	
        /// <unmanaged>D3DDEVTYPE_REF</unmanaged>	
        /// <unmanaged-short>D3DDEVTYPE_REF</unmanaged-short>	
        Reference = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>A pluggable software device that has been registered with <strong><see cref="SharpDX.Direct3D9.Direct3D.RegisterSoftwareDevice"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVTYPE_SW']/*"/>	
        /// <msdn-id>bb172547</msdn-id>	
        /// <unmanaged>D3DDEVTYPE_SW</unmanaged>	
        /// <unmanaged-short>D3DDEVTYPE_SW</unmanaged-short>	
        Software = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Initialize Direct3D on a computer that has neither hardware nor reference rasterization available, and enable resources for 3D content creation. See Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDEVTYPE_NULLREF']/*"/>	
        /// <msdn-id>bb172547</msdn-id>	
        /// <unmanaged>D3DDEVTYPE_NULLREF</unmanaged>	
        /// <unmanaged-short>D3DDEVTYPE_NULLREF</unmanaged-short>	
        NullReference = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies how the monitor being used to display a full-screen application is rotated.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used in <strong><see cref="SharpDX.Direct3D9.Direct3DEx.GetAdapterDisplayModeEx"/></strong>, <strong><see cref="SharpDX.Direct3D9.DeviceEx.GetDisplayModeEx"/></strong>, and <strong><see cref="SharpDX.Direct3D9.SwapChain9Ex.GetDisplayModeEx"/></strong>.</p><p>Applications may choose to handle monitor rotation themselves by using the <see cref="SharpDX.Direct3D9.PresentFlags.NoAutoRotate"/>, in which case, the application will need to know how the monitor is rotated so that it may adjust its rendering accordingly.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDISPLAYROTATION']/*"/>	
    /// <msdn-id>bb172551</msdn-id>	
    /// <unmanaged>D3DDISPLAYROTATION</unmanaged>	
    /// <unmanaged-short>D3DDISPLAYROTATION</unmanaged-short>	
    public enum DisplayRotation : int {	
        
        /// <summary>	
        /// <dd> <p>Display is not rotated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDISPLAYROTATION_IDENTITY']/*"/>	
        /// <msdn-id>bb172551</msdn-id>	
        /// <unmanaged>D3DDISPLAYROTATION_IDENTITY</unmanaged>	
        /// <unmanaged-short>D3DDISPLAYROTATION_IDENTITY</unmanaged-short>	
        Identity = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Display is rotated 90 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDISPLAYROTATION_90']/*"/>	
        /// <msdn-id>bb172551</msdn-id>	
        /// <unmanaged>D3DDISPLAYROTATION_90</unmanaged>	
        /// <unmanaged-short>D3DDISPLAYROTATION_90</unmanaged-short>	
        Rotation90 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Display is rotated 180 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDISPLAYROTATION_180']/*"/>	
        /// <msdn-id>bb172551</msdn-id>	
        /// <unmanaged>D3DDISPLAYROTATION_180</unmanaged>	
        /// <unmanaged-short>D3DDISPLAYROTATION_180</unmanaged-short>	
        Rotation180 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Display is rotated 270 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DDISPLAYROTATION_270']/*"/>	
        /// <msdn-id>bb172551</msdn-id>	
        /// <unmanaged>D3DDISPLAYROTATION_270</unmanaged>	
        /// <unmanaged-short>D3DDISPLAYROTATION_270</unmanaged-short>	
        Rotation270 = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Effect data types. The data is contained in the pValue member of <strong><see cref="SharpDX.Direct3D9.EffectDefault"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEFFECTDEFAULTTYPE']/*"/>	
    /// <msdn-id>bb172822</msdn-id>	
    /// <unmanaged>D3DXEFFECTDEFAULTTYPE</unmanaged>	
    /// <unmanaged-short>D3DXEFFECTDEFAULTTYPE</unmanaged-short>	
    public enum EffectDefaultType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEDT_STRING']/*"/>	
        /// <msdn-id>bb172822</msdn-id>	
        /// <unmanaged>D3DXEDT_STRING</unmanaged>	
        /// <unmanaged-short>D3DXEDT_STRING</unmanaged-short>	
        String = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEDT_FLOATS']/*"/>	
        /// <msdn-id>bb172822</msdn-id>	
        /// <unmanaged>D3DXEDT_FLOATS</unmanaged>	
        /// <unmanaged-short>D3DXEDT_FLOATS</unmanaged-short>	
        Floats = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEDT_DWORD']/*"/>	
        /// <msdn-id>bb172822</msdn-id>	
        /// <unmanaged>D3DXEDT_DWORD</unmanaged>	
        /// <unmanaged-short>D3DXEDT_DWORD</unmanaged-short>	
        Dword = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEDT_FORCEDWORD']/*"/>	
        /// <msdn-id>bb172822</msdn-id>	
        /// <unmanaged>D3DXEDT_FORCEDWORD</unmanaged>	
        /// <unmanaged-short>D3DXEDT_FORCEDWORD</unmanaged-short>	
        DtForcedWord = unchecked((int)2147483647),			
    }
    
    /// <summary>	
    /// <p>Describes the type of events that can be keyed by the animation controller.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_TYPE']/*"/>	
    /// <msdn-id>bb172827</msdn-id>	
    /// <unmanaged>D3DXEVENT_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXEVENT_TYPE</unmanaged-short>	
    public enum EventType : int {	
        
        /// <summary>	
        /// <dd> <p>Track speed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_TRACKSPEED']/*"/>	
        /// <msdn-id>bb172827</msdn-id>	
        /// <unmanaged>D3DXEVENT_TRACKSPEED</unmanaged>	
        /// <unmanaged-short>D3DXEVENT_TRACKSPEED</unmanaged-short>	
        TrackSpeed = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Track weight.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_TRACKWEIGHT']/*"/>	
        /// <msdn-id>bb172827</msdn-id>	
        /// <unmanaged>D3DXEVENT_TRACKWEIGHT</unmanaged>	
        /// <unmanaged-short>D3DXEVENT_TRACKWEIGHT</unmanaged-short>	
        TrackWeight = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Track position.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_TRACKPOSITION']/*"/>	
        /// <msdn-id>bb172827</msdn-id>	
        /// <unmanaged>D3DXEVENT_TRACKPOSITION</unmanaged>	
        /// <unmanaged-short>D3DXEVENT_TRACKPOSITION</unmanaged-short>	
        TrackPosition = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Enable flag.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_TRACKENABLE']/*"/>	
        /// <msdn-id>bb172827</msdn-id>	
        /// <unmanaged>D3DXEVENT_TRACKENABLE</unmanaged>	
        /// <unmanaged-short>D3DXEVENT_TRACKENABLE</unmanaged-short>	
        TrackEnable = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Priority blend value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXEVENT_PRIORITYBLEND']/*"/>	
        /// <msdn-id>bb172827</msdn-id>	
        /// <unmanaged>D3DXEVENT_PRIORITYBLEND</unmanaged>	
        /// <unmanaged-short>D3DXEVENT_PRIORITYBLEND</unmanaged-short>	
        PriorityBlend = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Defines constants describing the fill mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumerated type are used by the <see cref="SharpDX.Direct3D9.RenderState.FillMode"/> render state.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFILLMODE']/*"/>	
    /// <msdn-id>bb172556</msdn-id>	
    /// <unmanaged>D3DFILLMODE</unmanaged>	
    /// <unmanaged-short>D3DFILLMODE</unmanaged-short>	
    public enum FillMode : int {	
        
        /// <summary>	
        /// <dd> <p>Fill points.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFILL_POINT']/*"/>	
        /// <msdn-id>bb172556</msdn-id>	
        /// <unmanaged>D3DFILL_POINT</unmanaged>	
        /// <unmanaged-short>D3DFILL_POINT</unmanaged-short>	
        Point = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Fill wireframes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFILL_WIREFRAME']/*"/>	
        /// <msdn-id>bb172556</msdn-id>	
        /// <unmanaged>D3DFILL_WIREFRAME</unmanaged>	
        /// <unmanaged-short>D3DFILL_WIREFRAME</unmanaged-short>	
        Wireframe = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Fill solids. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFILL_SOLID']/*"/>	
        /// <msdn-id>bb172556</msdn-id>	
        /// <unmanaged>D3DFILL_SOLID</unmanaged>	
        /// <unmanaged-short>D3DFILL_SOLID</unmanaged-short>	
        Solid = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>The following flags are used to specify which channels in a texture to operate on.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER']/*"/>	
    /// <msdn-id>bb205565</msdn-id>	
    /// <unmanaged>D3DX_FILTER</unmanaged>	
    /// <unmanaged-short>D3DX_FILTER</unmanaged-short>	
    [Flags]
    public enum Filter : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_NONE']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_NONE</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_NONE</unmanaged-short>	
        None = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_POINT']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_POINT</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_POINT</unmanaged-short>	
        Point = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_LINEAR']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_LINEAR</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_LINEAR</unmanaged-short>	
        Linear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_TRIANGLE']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_TRIANGLE</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_TRIANGLE</unmanaged-short>	
        Triangle = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_BOX']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_BOX</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_BOX</unmanaged-short>	
        Box = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_MIRROR_U']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_MIRROR_U</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_MIRROR_U</unmanaged-short>	
        MirrorU = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_MIRROR_V']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_MIRROR_V</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_MIRROR_V</unmanaged-short>	
        MirrorV = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_MIRROR_W']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_MIRROR_W</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_MIRROR_W</unmanaged-short>	
        MirrorW = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_MIRROR']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_MIRROR</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)458752),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_DITHER']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_DITHER</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_DITHER</unmanaged-short>	
        Dither = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_DITHER_DIFFUSION']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_DITHER_DIFFUSION</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_DITHER_DIFFUSION</unmanaged-short>	
        DitherDiffusion = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_SRGB_IN']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_SRGB_IN</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_SRGB_IN</unmanaged-short>	
        SrgbIn = unchecked((int)2097152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_SRGB_OUT']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_SRGB_OUT</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_SRGB_OUT</unmanaged-short>	
        SrgbOut = unchecked((int)4194304),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_SRGB']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_SRGB</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_SRGB</unmanaged-short>	
        Srgb = unchecked((int)6291456),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_FILTER_DEFAULT']/*"/>	
        /// <msdn-id>bb205565</msdn-id>	
        /// <unmanaged>D3DX_FILTER_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DX_FILTER_DEFAULT</unmanaged-short>	
        Default = unchecked((int)-1),			
    }
    
    /// <summary>	
    /// <p>Texture filtering constants.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS']/*"/>	
    /// <msdn-id>bb172593</msdn-id>	
    /// <unmanaged>D3DPTFILTERCAPS</unmanaged>	
    /// <unmanaged-short>D3DPTFILTERCAPS</unmanaged-short>	
    [Flags]
    public enum FilterCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MINFPOINT']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MINFPOINT</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MINFPOINT</unmanaged-short>	
        MinPoint = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MINFLINEAR']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MINFLINEAR</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MINFLINEAR</unmanaged-short>	
        MinLinear = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MINFANISOTROPIC']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MINFANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MINFANISOTROPIC</unmanaged-short>	
        MinAnisotropic = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MINFPYRAMIDALQUAD']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MINFPYRAMIDALQUAD</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MINFPYRAMIDALQUAD</unmanaged-short>	
        MinPyramidalQuad = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MINFGAUSSIANQUAD']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MINFGAUSSIANQUAD</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MINFGAUSSIANQUAD</unmanaged-short>	
        MinGaussianQuad = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MIPFPOINT']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MIPFPOINT</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MIPFPOINT</unmanaged-short>	
        MipPoint = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MIPFLINEAR']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MIPFLINEAR</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MIPFLINEAR</unmanaged-short>	
        MipLinear = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_CONVOLUTIONMONO']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_CONVOLUTIONMONO</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_CONVOLUTIONMONO</unmanaged-short>	
        ConvolutionMono = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFPOINT']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MAGFPOINT</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MAGFPOINT</unmanaged-short>	
        MagPoint = unchecked((int)16777216),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFLINEAR']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MAGFLINEAR</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MAGFLINEAR</unmanaged-short>	
        MagLinear = unchecked((int)33554432),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFANISOTROPIC']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MAGFANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MAGFANISOTROPIC</unmanaged-short>	
        MagAnisotropic = unchecked((int)67108864),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD</unmanaged-short>	
        MagPyramidalQuad = unchecked((int)134217728),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTFILTERCAPS_MAGFGAUSSIANQUAD']/*"/>	
        /// <msdn-id>bb172593</msdn-id>	
        /// <unmanaged>D3DPTFILTERCAPS_MAGFGAUSSIANQUAD</unmanaged>	
        /// <unmanaged-short>D3DPTFILTERCAPS_MAGFGAUSSIANQUAD</unmanaged-short>	
        MagGaussianQuad = unchecked((int)268435456),			
    }
    
    /// <summary>	
    /// <p>Defines constants that describe the fog mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The values in this enumerated type are used by the <see cref="SharpDX.Direct3D9.RenderState.FogTableMode"/> and <see cref="SharpDX.Direct3D9.RenderState.FogVertexMode"/> render states.</p><p>Fog can be considered a measure of visibility: the lower the fog value produced by a fog equation, the less visible an object is.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFOGMODE']/*"/>	
    /// <msdn-id>bb172557</msdn-id>	
    /// <unmanaged>D3DFOGMODE</unmanaged>	
    /// <unmanaged-short>D3DFOGMODE</unmanaged-short>	
    public enum FogMode : int {	
        
        /// <summary>	
        /// <dd> <p>No fog effect. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFOG_NONE']/*"/>	
        /// <msdn-id>bb172557</msdn-id>	
        /// <unmanaged>D3DFOG_NONE</unmanaged>	
        /// <unmanaged-short>D3DFOG_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Fog effect intensifies exponentially, according to the following formula. 	
        /// </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFOG_EXP']/*"/>	
        /// <msdn-id>bb172557</msdn-id>	
        /// <unmanaged>D3DFOG_EXP</unmanaged>	
        /// <unmanaged-short>D3DFOG_EXP</unmanaged-short>	
        Exponential = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Fog effect intensifies exponentially with the square of the distance, according to the following formula. 	
        /// </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFOG_EXP2']/*"/>	
        /// <msdn-id>bb172557</msdn-id>	
        /// <unmanaged>D3DFOG_EXP2</unmanaged>	
        /// <unmanaged-short>D3DFOG_EXP2</unmanaged-short>	
        ExponentialSquared = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Fog effect intensifies linearly between the start and end points, according to the following formula. </p> <p></p> <p>This is the only fog mode currently supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFOG_LINEAR']/*"/>	
        /// <msdn-id>bb172557</msdn-id>	
        /// <unmanaged>D3DFOG_LINEAR</unmanaged>	
        /// <unmanaged-short>D3DFOG_LINEAR</unmanaged-short>	
        Linear = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Defines the various types of surface formats.</p>typedef enum _D3DFORMAT { <see cref="SharpDX.Direct3D9.Format.Unknown"/>              =  0, <see cref="SharpDX.Direct3D9.Format.R8G8B8"/>               = 20, <see cref="SharpDX.Direct3D9.Format.A8R8G8B8"/>             = 21, <see cref="SharpDX.Direct3D9.Format.X8R8G8B8"/>             = 22, <see cref="SharpDX.Direct3D9.Format.R5G6B5"/>               = 23, <see cref="SharpDX.Direct3D9.Format.X1R5G5B5"/>             = 24, <see cref="SharpDX.Direct3D9.Format.A1R5G5B5"/>             = 25, <see cref="SharpDX.Direct3D9.Format.A4R4G4B4"/>             = 26, <see cref="SharpDX.Direct3D9.Format.R3G3B2"/>               = 27, <see cref="SharpDX.Direct3D9.Format.A8"/>                   = 28, <see cref="SharpDX.Direct3D9.Format.A8R3G3B2"/>             = 29, <see cref="SharpDX.Direct3D9.Format.X4R4G4B4"/>             = 30, <see cref="SharpDX.Direct3D9.Format.A2B10G10R10"/>          = 31, <see cref="SharpDX.Direct3D9.Format.A8B8G8R8"/>             = 32, <see cref="SharpDX.Direct3D9.Format.X8B8G8R8"/>             = 33, <see cref="SharpDX.Direct3D9.Format.G16R16"/>               = 34, <see cref="SharpDX.Direct3D9.Format.A2R10G10B10"/>          = 35, <see cref="SharpDX.Direct3D9.Format.A16B16G16R16"/>         = 36, <see cref="SharpDX.Direct3D9.Format.A8P8"/>                 = 40, <see cref="SharpDX.Direct3D9.Format.P8"/>                   = 41, <see cref="SharpDX.Direct3D9.Format.L8"/>                   = 50, <see cref="SharpDX.Direct3D9.Format.A8L8"/>                 = 51, <see cref="SharpDX.Direct3D9.Format.A4L4"/>                 = 52, <see cref="SharpDX.Direct3D9.Format.V8U8"/>                 = 60, <see cref="SharpDX.Direct3D9.Format.L6V5U5"/>               = 61, <see cref="SharpDX.Direct3D9.Format.X8L8V8U8"/>             = 62, <see cref="SharpDX.Direct3D9.Format.Q8W8V8U8"/>             = 63, <see cref="SharpDX.Direct3D9.Format.V16U16"/>               = 64, <see cref="SharpDX.Direct3D9.Format.A2W10V10U10"/>          = 67, <see cref="SharpDX.Direct3D9.Format.Uyvy"/>                 = MAKEFOURCC('U', 'Y', 'V', 'Y'), <see cref="SharpDX.Direct3D9.Format.R8G8_B8G8"/>            = MAKEFOURCC('R', 'G', 'B', 'G'), <see cref="SharpDX.Direct3D9.Format.Yuy2"/>                 = MAKEFOURCC('Y', 'U', 'Y', '2'), <see cref="SharpDX.Direct3D9.Format.G8R8_G8B8"/>            = MAKEFOURCC('G', 'R', 'G', 'B'), <see cref="SharpDX.Direct3D9.Format.Dxt1"/>                 = MAKEFOURCC('D', 'X', 'T', '1'), <see cref="SharpDX.Direct3D9.Format.Dxt2"/>                 = MAKEFOURCC('D', 'X', 'T', '2'), <see cref="SharpDX.Direct3D9.Format.Dxt3"/>                 = MAKEFOURCC('D', 'X', 'T', '3'), <see cref="SharpDX.Direct3D9.Format.Dxt4"/>                 = MAKEFOURCC('D', 'X', 'T', '4'), <see cref="SharpDX.Direct3D9.Format.Dxt5"/>                 = MAKEFOURCC('D', 'X', 'T', '5'), <see cref="SharpDX.Direct3D9.Format.D16Lockable"/>         = 70, <see cref="SharpDX.Direct3D9.Format.D32"/>                  = 71, <see cref="SharpDX.Direct3D9.Format.D15S1"/>                = 73, <see cref="SharpDX.Direct3D9.Format.D24S8"/>                = 75, <see cref="SharpDX.Direct3D9.Format.D24X8"/>                = 77, <see cref="SharpDX.Direct3D9.Format.D24X4S4"/>              = 79, <see cref="SharpDX.Direct3D9.Format.D16"/>                  = 80, <see cref="SharpDX.Direct3D9.Format.D32SingleLockable"/>        = 82, <see cref="SharpDX.Direct3D9.Format.D24SingleS8"/>               = 83, #if !defined(D3D_DISABLE_9EX) <see cref="SharpDX.Direct3D9.Format.D32Lockable"/>         = 84, <see cref="SharpDX.Direct3D9.Format.S8Lockable"/>          = 85,	
    /// #endif // !D3D_DISABLE_9EX <see cref="SharpDX.Direct3D9.Format.L16"/>                  = 81, <see cref="SharpDX.Direct3D9.Format.VertexData"/>           =100, <see cref="SharpDX.Direct3D9.Format.Index16"/>              =101, <see cref="SharpDX.Direct3D9.Format.Index32"/>              =102, <see cref="SharpDX.Direct3D9.Format.Q16W16V16U16"/>         =110, <see cref="SharpDX.Direct3D9.Format.Multi2Argb8"/>         = MAKEFOURCC('M','E','T','1'), <see cref="SharpDX.Direct3D9.Format.R16F"/>                 = 111, <see cref="SharpDX.Direct3D9.Format.G16R16F"/>              = 112, <see cref="SharpDX.Direct3D9.Format.A16B16G16R16F"/>        = 113, <see cref="SharpDX.Direct3D9.Format.R32F"/>                 = 114, <see cref="SharpDX.Direct3D9.Format.G32R32F"/>              = 115, <see cref="SharpDX.Direct3D9.Format.A32B32G32R32F"/>        = 116, <see cref="SharpDX.Direct3D9.Format.MtCxV8U8"/>               = 117, #if !defined(D3D_DISABLE_9EX) <see cref="SharpDX.Direct3D9.Format.A1"/>                   = 118, <see cref="SharpDX.Direct3D9.Format.MtA2B10G10R10XrBias"/>  = 119, <see cref="SharpDX.Direct3D9.Format.BinaryBuffer"/>         = 199,	
    /// #endif // !D3D_DISABLE_9EX D3DFMT_FORCE_DWORD          =0x7fffffff	
    /// } <see cref="SharpDX.Direct3D9.Format"/>;	
    /// </summary>	
    /// <remarks>	
    /// <p>There are several types of formats:</p><ul> <li>BackBuffer</li> <li>Buffer</li> <li>DXTn</li> <li>Floating-Point</li> <li>FOURCC</li> <li>IEEE</li> <li>Mixed</li> <li>Signed</li> <li>Unsigned</li> <li>Other</li> </ul><p>All formats are listed from left to right, most-significant bit to least-significant bit. For example, <strong>D3DFORMAT_ARGB</strong> is ordered from the most-significant bit channel A (alpha), to the least-significant bit channel B (blue). When traversing surface data, the data is stored in memory from least-significant bit to most-significant bit, which means that the channel order in memory is from least-significant bit (blue) to most-significant bit (alpha).</p><p>The default value for formats that contain undefined channels (G16R16, A8, and so on) is 1. The only exception is the A8 format, which is initialized to 000 for the three color channels.</p><p>The order of the bits is from the most significant byte first, so <see cref="SharpDX.Direct3D9.Format.A8L8"/> indicates that the high byte of this 2-byte format is alpha. <strong><see cref="SharpDX.Direct3D9.Format.D16"/></strong> indicates a 16-bit integer value and an application-lockable surface.</p><p>Pixel formats have been chosen to enable the expression of hardware-vendor-defined extension formats, as well as to include the well-established FOURCC method. The set of formats understood by the Direct3D runtime is defined by <see cref="SharpDX.Direct3D9.Format"/>.</p><p>Note that formats are supplied by independent hardware vendors (IHVs) and many FOURCC codes are not listed. The formats in this enumeration are unique in that they are sanctioned by the runtime, meaning that the reference rasterizer will operate on all these types. IHV-supplied formats will be supported by the individual IHVs on a card-by-card basis.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFORMAT']/*"/>	
    /// <msdn-id>bb172558</msdn-id>	
    /// <unmanaged>D3DFORMAT</unmanaged>	
    /// <unmanaged-short>D3DFORMAT</unmanaged-short>	
    public enum Format : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_UNKNOWN']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D3DFMT_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R8G8B8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R8G8B8</unmanaged>	
        /// <unmanaged-short>D3DFMT_R8G8B8</unmanaged-short>	
        R8G8B8 = unchecked((int)20),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8R8G8B8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8R8G8B8</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8R8G8B8</unmanaged-short>	
        A8R8G8B8 = unchecked((int)21),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_X8R8G8B8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_X8R8G8B8</unmanaged>	
        /// <unmanaged-short>D3DFMT_X8R8G8B8</unmanaged-short>	
        X8R8G8B8 = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R5G6B5']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R5G6B5</unmanaged>	
        /// <unmanaged-short>D3DFMT_R5G6B5</unmanaged-short>	
        R5G6B5 = unchecked((int)23),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_X1R5G5B5']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_X1R5G5B5</unmanaged>	
        /// <unmanaged-short>D3DFMT_X1R5G5B5</unmanaged-short>	
        X1R5G5B5 = unchecked((int)24),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A1R5G5B5']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A1R5G5B5</unmanaged>	
        /// <unmanaged-short>D3DFMT_A1R5G5B5</unmanaged-short>	
        A1R5G5B5 = unchecked((int)25),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A4R4G4B4']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A4R4G4B4</unmanaged>	
        /// <unmanaged-short>D3DFMT_A4R4G4B4</unmanaged-short>	
        A4R4G4B4 = unchecked((int)26),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R3G3B2']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R3G3B2</unmanaged>	
        /// <unmanaged-short>D3DFMT_R3G3B2</unmanaged-short>	
        R3G3B2 = unchecked((int)27),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8</unmanaged-short>	
        A8 = unchecked((int)28),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8R3G3B2']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8R3G3B2</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8R3G3B2</unmanaged-short>	
        A8R3G3B2 = unchecked((int)29),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_X4R4G4B4']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_X4R4G4B4</unmanaged>	
        /// <unmanaged-short>D3DFMT_X4R4G4B4</unmanaged-short>	
        X4R4G4B4 = unchecked((int)30),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A2B10G10R10']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A2B10G10R10</unmanaged>	
        /// <unmanaged-short>D3DFMT_A2B10G10R10</unmanaged-short>	
        A2B10G10R10 = unchecked((int)31),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8B8G8R8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8B8G8R8</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8B8G8R8</unmanaged-short>	
        A8B8G8R8 = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_X8B8G8R8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_X8B8G8R8</unmanaged>	
        /// <unmanaged-short>D3DFMT_X8B8G8R8</unmanaged-short>	
        X8B8G8R8 = unchecked((int)33),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_G16R16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_G16R16</unmanaged>	
        /// <unmanaged-short>D3DFMT_G16R16</unmanaged-short>	
        G16R16 = unchecked((int)34),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A2R10G10B10']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A2R10G10B10</unmanaged>	
        /// <unmanaged-short>D3DFMT_A2R10G10B10</unmanaged-short>	
        A2R10G10B10 = unchecked((int)35),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A16B16G16R16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A16B16G16R16</unmanaged>	
        /// <unmanaged-short>D3DFMT_A16B16G16R16</unmanaged-short>	
        A16B16G16R16 = unchecked((int)36),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8P8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8P8</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8P8</unmanaged-short>	
        A8P8 = unchecked((int)40),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_P8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_P8</unmanaged>	
        /// <unmanaged-short>D3DFMT_P8</unmanaged-short>	
        P8 = unchecked((int)41),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_L8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_L8</unmanaged>	
        /// <unmanaged-short>D3DFMT_L8</unmanaged-short>	
        L8 = unchecked((int)50),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A8L8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A8L8</unmanaged>	
        /// <unmanaged-short>D3DFMT_A8L8</unmanaged-short>	
        A8L8 = unchecked((int)51),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A4L4']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A4L4</unmanaged>	
        /// <unmanaged-short>D3DFMT_A4L4</unmanaged-short>	
        A4L4 = unchecked((int)52),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_V8U8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_V8U8</unmanaged>	
        /// <unmanaged-short>D3DFMT_V8U8</unmanaged-short>	
        V8U8 = unchecked((int)60),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_L6V5U5']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_L6V5U5</unmanaged>	
        /// <unmanaged-short>D3DFMT_L6V5U5</unmanaged-short>	
        L6V5U5 = unchecked((int)61),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_X8L8V8U8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_X8L8V8U8</unmanaged>	
        /// <unmanaged-short>D3DFMT_X8L8V8U8</unmanaged-short>	
        X8L8V8U8 = unchecked((int)62),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_Q8W8V8U8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_Q8W8V8U8</unmanaged>	
        /// <unmanaged-short>D3DFMT_Q8W8V8U8</unmanaged-short>	
        Q8W8V8U8 = unchecked((int)63),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_V16U16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_V16U16</unmanaged>	
        /// <unmanaged-short>D3DFMT_V16U16</unmanaged-short>	
        V16U16 = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A2W10V10U10']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A2W10V10U10</unmanaged>	
        /// <unmanaged-short>D3DFMT_A2W10V10U10</unmanaged-short>	
        A2W10V10U10 = unchecked((int)67),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_UYVY']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_UYVY</unmanaged>	
        /// <unmanaged-short>D3DFMT_UYVY</unmanaged-short>	
        Uyvy = unchecked((int)1498831189),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R8G8_B8G8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R8G8_B8G8</unmanaged>	
        /// <unmanaged-short>D3DFMT_R8G8_B8G8</unmanaged-short>	
        R8G8_B8G8 = unchecked((int)1195525970),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_YUY2']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_YUY2</unmanaged>	
        /// <unmanaged-short>D3DFMT_YUY2</unmanaged-short>	
        Yuy2 = unchecked((int)844715353),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_G8R8_G8B8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_G8R8_G8B8</unmanaged>	
        /// <unmanaged-short>D3DFMT_G8R8_G8B8</unmanaged-short>	
        G8R8_G8B8 = unchecked((int)1111970375),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_DXT1']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_DXT1</unmanaged>	
        /// <unmanaged-short>D3DFMT_DXT1</unmanaged-short>	
        Dxt1 = unchecked((int)827611204),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_DXT2']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_DXT2</unmanaged>	
        /// <unmanaged-short>D3DFMT_DXT2</unmanaged-short>	
        Dxt2 = unchecked((int)844388420),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_DXT3']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_DXT3</unmanaged>	
        /// <unmanaged-short>D3DFMT_DXT3</unmanaged-short>	
        Dxt3 = unchecked((int)861165636),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_DXT4']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_DXT4</unmanaged>	
        /// <unmanaged-short>D3DFMT_DXT4</unmanaged-short>	
        Dxt4 = unchecked((int)877942852),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_DXT5']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_DXT5</unmanaged>	
        /// <unmanaged-short>D3DFMT_DXT5</unmanaged-short>	
        Dxt5 = unchecked((int)894720068),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D16_LOCKABLE']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D16_LOCKABLE</unmanaged>	
        /// <unmanaged-short>D3DFMT_D16_LOCKABLE</unmanaged-short>	
        D16Lockable = unchecked((int)70),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D32']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D32</unmanaged>	
        /// <unmanaged-short>D3DFMT_D32</unmanaged-short>	
        D32 = unchecked((int)71),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D15S1']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D15S1</unmanaged>	
        /// <unmanaged-short>D3DFMT_D15S1</unmanaged-short>	
        D15S1 = unchecked((int)73),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D24S8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D24S8</unmanaged>	
        /// <unmanaged-short>D3DFMT_D24S8</unmanaged-short>	
        D24S8 = unchecked((int)75),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D24X8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D24X8</unmanaged>	
        /// <unmanaged-short>D3DFMT_D24X8</unmanaged-short>	
        D24X8 = unchecked((int)77),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D24X4S4']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D24X4S4</unmanaged>	
        /// <unmanaged-short>D3DFMT_D24X4S4</unmanaged-short>	
        D24X4S4 = unchecked((int)79),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D16</unmanaged>	
        /// <unmanaged-short>D3DFMT_D16</unmanaged-short>	
        D16 = unchecked((int)80),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D32F_LOCKABLE']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D32F_LOCKABLE</unmanaged>	
        /// <unmanaged-short>D3DFMT_D32F_LOCKABLE</unmanaged-short>	
        D32SingleLockable = unchecked((int)82),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D24FS8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D24FS8</unmanaged>	
        /// <unmanaged-short>D3DFMT_D24FS8</unmanaged-short>	
        D24SingleS8 = unchecked((int)83),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_D32_LOCKABLE']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_D32_LOCKABLE</unmanaged>	
        /// <unmanaged-short>D3DFMT_D32_LOCKABLE</unmanaged-short>	
        D32Lockable = unchecked((int)84),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_S8_LOCKABLE']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_S8_LOCKABLE</unmanaged>	
        /// <unmanaged-short>D3DFMT_S8_LOCKABLE</unmanaged-short>	
        S8Lockable = unchecked((int)85),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_L16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_L16</unmanaged>	
        /// <unmanaged-short>D3DFMT_L16</unmanaged-short>	
        L16 = unchecked((int)81),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_VERTEXDATA']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_VERTEXDATA</unmanaged>	
        /// <unmanaged-short>D3DFMT_VERTEXDATA</unmanaged-short>	
        VertexData = unchecked((int)100),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_INDEX16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_INDEX16</unmanaged>	
        /// <unmanaged-short>D3DFMT_INDEX16</unmanaged-short>	
        Index16 = unchecked((int)101),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_INDEX32']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_INDEX32</unmanaged>	
        /// <unmanaged-short>D3DFMT_INDEX32</unmanaged-short>	
        Index32 = unchecked((int)102),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_Q16W16V16U16']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_Q16W16V16U16</unmanaged>	
        /// <unmanaged-short>D3DFMT_Q16W16V16U16</unmanaged-short>	
        Q16W16V16U16 = unchecked((int)110),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_MULTI2_ARGB8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_MULTI2_ARGB8</unmanaged>	
        /// <unmanaged-short>D3DFMT_MULTI2_ARGB8</unmanaged-short>	
        Multi2Argb8 = unchecked((int)827606349),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R16F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R16F</unmanaged>	
        /// <unmanaged-short>D3DFMT_R16F</unmanaged-short>	
        R16F = unchecked((int)111),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_G16R16F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_G16R16F</unmanaged>	
        /// <unmanaged-short>D3DFMT_G16R16F</unmanaged-short>	
        G16R16F = unchecked((int)112),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A16B16G16R16F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A16B16G16R16F</unmanaged>	
        /// <unmanaged-short>D3DFMT_A16B16G16R16F</unmanaged-short>	
        A16B16G16R16F = unchecked((int)113),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_R32F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_R32F</unmanaged>	
        /// <unmanaged-short>D3DFMT_R32F</unmanaged-short>	
        R32F = unchecked((int)114),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_G32R32F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_G32R32F</unmanaged>	
        /// <unmanaged-short>D3DFMT_G32R32F</unmanaged-short>	
        G32R32F = unchecked((int)115),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A32B32G32R32F']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A32B32G32R32F</unmanaged>	
        /// <unmanaged-short>D3DFMT_A32B32G32R32F</unmanaged-short>	
        A32B32G32R32F = unchecked((int)116),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_CxV8U8']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_CxV8U8</unmanaged>	
        /// <unmanaged-short>D3DFMT_CxV8U8</unmanaged-short>	
        MtCxV8U8 = unchecked((int)117),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A1']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A1</unmanaged>	
        /// <unmanaged-short>D3DFMT_A1</unmanaged-short>	
        A1 = unchecked((int)118),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_A2B10G10R10_XR_BIAS']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_A2B10G10R10_XR_BIAS</unmanaged>	
        /// <unmanaged-short>D3DFMT_A2B10G10R10_XR_BIAS</unmanaged-short>	
        MtA2B10G10R10XrBias = unchecked((int)119),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFMT_BINARYBUFFER']/*"/>	
        /// <msdn-id>bb172558</msdn-id>	
        /// <unmanaged>D3DFMT_BINARYBUFFER</unmanaged>	
        /// <unmanaged-short>D3DFMT_BINARYBUFFER</unmanaged-short>	
        BinaryBuffer = unchecked((int)199),			
    }
    
    /// <summary>	
    /// <p>Options for saving and creating effects.</p><p>The constants in the following table are defined in d3dx9effect.h.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX']/*"/>	
    /// <msdn-id>bb172855</msdn-id>	
    /// <unmanaged>D3DXFX</unmanaged>	
    /// <unmanaged-short>D3DXFX</unmanaged-short>	
    [Flags]
    public enum FX : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX_DONOTSAVESTATE']/*"/>	
        /// <msdn-id>bb172855</msdn-id>	
        /// <unmanaged>D3DXFX_DONOTSAVESTATE</unmanaged>	
        /// <unmanaged-short>D3DXFX_DONOTSAVESTATE</unmanaged-short>	
        DoNotSaveState = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX_DONOTSAVESHADERSTATE']/*"/>	
        /// <msdn-id>bb172855</msdn-id>	
        /// <unmanaged>D3DXFX_DONOTSAVESHADERSTATE</unmanaged>	
        /// <unmanaged-short>D3DXFX_DONOTSAVESHADERSTATE</unmanaged-short>	
        DoNotSaveShaderState = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX_DONOTSAVESAMPLERSTATE']/*"/>	
        /// <msdn-id>bb172855</msdn-id>	
        /// <unmanaged>D3DXFX_DONOTSAVESAMPLERSTATE</unmanaged>	
        /// <unmanaged-short>D3DXFX_DONOTSAVESAMPLERSTATE</unmanaged-short>	
        DoNotSaveSamplerState = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX_NOT_CLONEABLE']/*"/>	
        /// <msdn-id>bb172855</msdn-id>	
        /// <unmanaged>D3DXFX_NOT_CLONEABLE</unmanaged>	
        /// <unmanaged-short>D3DXFX_NOT_CLONEABLE</unmanaged-short>	
        NotCloneable = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXFX_LARGEADDRESSAWARE']/*"/>	
        /// <msdn-id>bb172855</msdn-id>	
        /// <unmanaged>D3DXFX_LARGEADDRESSAWARE</unmanaged>	
        /// <unmanaged-short>D3DXFX_LARGEADDRESSAWARE</unmanaged-short>	
        LargeAddressAware = unchecked((int)131072),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Describes the supported image file formats. See Remarks for descriptions of these formats.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Functions that begin with D3DXLoadxxx support all of the formats listed. Functions that begin with D3DXSavexxx support all of the formats listed except the Truevision (.tga) and portable pixmap (.ppm) formats.</p><p>The following table lists the available input and output formats. </p><table> <tr><th>File Extension</th><th>Description</th></tr> <tr><td>.bmp</td><td>Windows bitmap format. Contains a header that describes the resolution of the device on which the rectangle of pixels was created, the dimensions of the rectangle, the size of the array of bits, a logical palette, and an array of bits that defines the relationship between pixels in the bitmapped image and entries in the logical palette.</td></tr> <tr><td>.dds</td><td>DirectDraw Surface file format. Stores textures, volume textures, and cubic environment maps, with or without mipmap levels, and with or without pixel compression. See DDS.</td></tr> <tr><td>.dib</td><td>Windows DIB. Contains an array of bits combined with structures that specify width and height of the bitmapped image, color format of the device where the image was created, and resolution of the device used to create that image.</td></tr> <tr><td>.hdr</td><td>HDR format. Encodes each pixel as an RGBE 32-bit color, with 8 bits of mantissa for red, green, and blue, and a shared 8-bit exponent. Each channel is separately compressed with run-length encoding (RLE).</td></tr> <tr><td>.jpg</td><td>JPEG standard. Specifies variable compression of 24-bit RGB color and 8-bit gray-scale Tagged Image File Format (TIFF) image document files.</td></tr> <tr><td>.pfm</td><td>Portable float map format. A raw floating point image format, without any compression. The file header specifies image width, height, monochrome or color, and machine word order. Pixel data is stored as 32-bit floating point values, with 3 values per pixel for color, and one value per pixel for monochrome.</td></tr> <tr><td>.png</td><td>PNG format. A non-proprietary bitmap format using lossless compression.</td></tr> <tr><td>.ppm</td><td>Portable Pixmap format. A binary or ASCII file format for color images that includes image height and width and the maximum color component value.</td></tr> <tr><td>.tga</td><td>Targa or Truevision Graphics Adapter format. Supports depths of 8, 15, 16, 24, and 32 bits, including 8-bit gray scale, and contains optional color palette data, image (x, y) origin and size data, and pixel data.</td></tr> </table><p>?</p><p>See Types of Bitmaps for more information on some of these formats.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIMAGE_FILEFORMAT']/*"/>	
    /// <msdn-id>bb172878</msdn-id>	
    /// <unmanaged>D3DXIMAGE_FILEFORMAT</unmanaged>	
    /// <unmanaged-short>D3DXIMAGE_FILEFORMAT</unmanaged-short>	
    public enum ImageFileFormat : int {	
        
        /// <summary>	
        /// <dd> <p>Windows bitmap (BMP) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_BMP']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_BMP</unmanaged>	
        /// <unmanaged-short>D3DXIFF_BMP</unmanaged-short>	
        Bmp = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Joint Photographics Experts Group (JPEG) compressed file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_JPG']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_JPG</unmanaged>	
        /// <unmanaged-short>D3DXIFF_JPG</unmanaged-short>	
        Jpg = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Truevision (Targa, or TGA) image file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_TGA']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_TGA</unmanaged>	
        /// <unmanaged-short>D3DXIFF_TGA</unmanaged-short>	
        Tga = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Portable Network Graphics (PNG) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_PNG']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_PNG</unmanaged>	
        /// <unmanaged-short>D3DXIFF_PNG</unmanaged-short>	
        Png = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>DirectDraw surface (DDS) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_DDS']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_DDS</unmanaged>	
        /// <unmanaged-short>D3DXIFF_DDS</unmanaged-short>	
        Dds = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Portable pixmap (PPM) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_PPM']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_PPM</unmanaged>	
        /// <unmanaged-short>D3DXIFF_PPM</unmanaged-short>	
        Ppm = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Windows device-independent bitmap (DIB) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_DIB']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_DIB</unmanaged>	
        /// <unmanaged-short>D3DXIFF_DIB</unmanaged-short>	
        Dib = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>High dynamic range (HDR) file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_HDR']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_HDR</unmanaged>	
        /// <unmanaged-short>D3DXIFF_HDR</unmanaged-short>	
        Hdr = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Portable float map file format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIFF_PFM']/*"/>	
        /// <msdn-id>bb172878</msdn-id>	
        /// <unmanaged>D3DXIFF_PFM</unmanaged>	
        /// <unmanaged-short>D3DXIFF_PFM</unmanaged-short>	
        Pfm = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Describes the location for the include file.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXINCLUDE_TYPE']/*"/>	
    /// <msdn-id>bb172881</msdn-id>	
    /// <unmanaged>D3DXINCLUDE_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXINCLUDE_TYPE</unmanaged-short>	
    public enum IncludeType : int {	
        
        /// <summary>	
        /// <dd> <p>Look in the local project for the include file.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXINC_LOCAL']/*"/>	
        /// <msdn-id>bb172881</msdn-id>	
        /// <unmanaged>D3DXINC_LOCAL</unmanaged>	
        /// <unmanaged-short>D3DXINC_LOCAL</unmanaged-short>	
        Local = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Look in the system path for the include file.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXINC_SYSTEM']/*"/>	
        /// <msdn-id>bb172881</msdn-id>	
        /// <unmanaged>D3DXINC_SYSTEM</unmanaged>	
        /// <unmanaged-short>D3DXINC_SYSTEM</unmanaged-short>	
        System = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>This macro creates a value used by <strong>Issue</strong> to issue a query end. </p>#define <see cref="SharpDX.Direct3D9.Issue.End"/> (1 &lt;&lt; 0)	
    /// </summary>	
    /// <remarks>	
    /// <p>This macro changes the query state to nonsignaled.</p><p><see cref="SharpDX.Direct3D9.Issue.End"/> is valid for the following query types.</p><ul> <li><see cref="SharpDX.Direct3D9.QueryType.VCache"/></li> <li>D3DQUERYTYPE_ResourceManager</li> <li><see cref="SharpDX.Direct3D9.QueryType.VertexStats"/></li> <li><see cref="SharpDX.Direct3D9.QueryType.Event"/></li> <li><see cref="SharpDX.Direct3D9.QueryType.Occlusion"/></li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DISSUE']/*"/>	
    /// <msdn-id>bb172565</msdn-id>	
    /// <unmanaged>D3DISSUE</unmanaged>	
    /// <unmanaged-short>D3DISSUE</unmanaged-short>	
    [Flags]
    public enum Issue : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DISSUE_END']/*"/>	
        /// <msdn-id>bb172565</msdn-id>	
        /// <unmanaged>D3DISSUE_END</unmanaged>	
        /// <unmanaged-short>D3DISSUE_END</unmanaged-short>	
        End = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DISSUE_BEGIN']/*"/>	
        /// <msdn-id>bb172565</msdn-id>	
        /// <unmanaged>D3DISSUE_BEGIN</unmanaged>	
        /// <unmanaged-short>D3DISSUE_BEGIN</unmanaged-short>	
        Begin = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the light type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Directional lights are slightly faster than point light sources, but point lights look a little better. Spotlights offer interesting visual effects but are computationally time-consuming.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLIGHTTYPE']/*"/>	
    /// <msdn-id>bb172567</msdn-id>	
    /// <unmanaged>D3DLIGHTTYPE</unmanaged>	
    /// <unmanaged-short>D3DLIGHTTYPE</unmanaged-short>	
    public enum LightType : int {	
        
        /// <summary>	
        /// <dd> <p>Light is a point source. The light has a position in space and radiates light in all directions. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLIGHT_POINT']/*"/>	
        /// <msdn-id>bb172567</msdn-id>	
        /// <unmanaged>D3DLIGHT_POINT</unmanaged>	
        /// <unmanaged-short>D3DLIGHT_POINT</unmanaged-short>	
        Point = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Light is a spotlight source. This light is like a point light, except that the illumination is limited to a cone. This light type has a direction and several other parameters that determine the shape of the cone it produces. For information about these parameters, see the <strong><see cref="SharpDX.Direct3D9.Light"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLIGHT_SPOT']/*"/>	
        /// <msdn-id>bb172567</msdn-id>	
        /// <unmanaged>D3DLIGHT_SPOT</unmanaged>	
        /// <unmanaged-short>D3DLIGHT_SPOT</unmanaged-short>	
        Spot = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Light is a directional light source. This is equivalent to using a point light source at an infinite distance. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLIGHT_DIRECTIONAL']/*"/>	
        /// <msdn-id>bb172567</msdn-id>	
        /// <unmanaged>D3DLIGHT_DIRECTIONAL</unmanaged>	
        /// <unmanaged-short>D3DLIGHT_DIRECTIONAL</unmanaged-short>	
        Directional = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS']/*"/>	
    /// <msdn-id>bb206304</msdn-id>	
    /// <unmanaged>D3DLINECAPS</unmanaged>	
    /// <unmanaged-short>D3DLINECAPS</unmanaged-short>	
    [Flags]
    public enum LineCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_TEXTURE']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_TEXTURE</unmanaged-short>	
        Texture = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_ZTEST']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_ZTEST</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_ZTEST</unmanaged-short>	
        DepthTest = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_BLEND']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_BLEND</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_BLEND</unmanaged-short>	
        Blend = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_ALPHACMP']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_ALPHACMP</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_ALPHACMP</unmanaged-short>	
        AlphaCompare = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_FOG']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_FOG</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_FOG</unmanaged-short>	
        Fog = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLINECAPS_ANTIALIAS']/*"/>	
        /// <msdn-id>bb206304</msdn-id>	
        /// <unmanaged>D3DLINECAPS_ANTIALIAS</unmanaged>	
        /// <unmanaged-short>D3DLINECAPS_ANTIALIAS</unmanaged-short>	
        Antialias = unchecked((int)32),			
    }
    
    /// <summary>	
    /// <p>A combination of zero or more locking options that describe the type of lock to perform.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK']/*"/>	
    /// <msdn-id>bb172568</msdn-id>	
    /// <unmanaged>D3DLOCK</unmanaged>	
    /// <unmanaged-short>D3DLOCK</unmanaged-short>	
    [Flags]
    public enum LockFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_READONLY']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_READONLY</unmanaged>	
        /// <unmanaged-short>D3DLOCK_READONLY</unmanaged-short>	
        ReadOnly = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_DISCARD']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_DISCARD</unmanaged>	
        /// <unmanaged-short>D3DLOCK_DISCARD</unmanaged-short>	
        Discard = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_NOOVERWRITE']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_NOOVERWRITE</unmanaged>	
        /// <unmanaged-short>D3DLOCK_NOOVERWRITE</unmanaged-short>	
        NoOverwrite = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_NOSYSLOCK']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_NOSYSLOCK</unmanaged>	
        /// <unmanaged-short>D3DLOCK_NOSYSLOCK</unmanaged-short>	
        NoSystemLock = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_DONOTWAIT']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_DONOTWAIT</unmanaged>	
        /// <unmanaged-short>D3DLOCK_DONOTWAIT</unmanaged-short>	
        DoNotWait = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_NO_DIRTY_UPDATE']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_NO_DIRTY_UPDATE</unmanaged>	
        /// <unmanaged-short>D3DLOCK_NO_DIRTY_UPDATE</unmanaged-short>	
        NoDirtyUpdate = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DLOCK_DONOTCOPYDATA']/*"/>	
        /// <msdn-id>bb172568</msdn-id>	
        /// <unmanaged>D3DLOCK_DONOTCOPYDATA</unmanaged>	
        /// <unmanaged-short>D3DLOCK_DONOTCOPYDATA</unmanaged-short>	
        DoNotCopyData = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines the type of mesh data present in <strong><see cref="SharpDX.Direct3D9.MeshData"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHDATATYPE']/*"/>	
    /// <msdn-id>bb205373</msdn-id>	
    /// <unmanaged>D3DXMESHDATATYPE</unmanaged>	
    /// <unmanaged-short>D3DXMESHDATATYPE</unmanaged-short>	
    public enum MeshDataType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHTYPE_MESH']/*"/>	
        /// <msdn-id>bb205373</msdn-id>	
        /// <unmanaged>D3DXMESHTYPE_MESH</unmanaged>	
        /// <unmanaged-short>D3DXMESHTYPE_MESH</unmanaged-short>	
        Mesh = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHTYPE_PMESH']/*"/>	
        /// <msdn-id>bb205373</msdn-id>	
        /// <unmanaged>D3DXMESHTYPE_PMESH</unmanaged>	
        /// <unmanaged-short>D3DXMESHTYPE_PMESH</unmanaged-short>	
        ProgressiveMesh = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHTYPE_PATCHMESH']/*"/>	
        /// <msdn-id>bb205373</msdn-id>	
        /// <unmanaged>D3DXMESHTYPE_PATCHMESH</unmanaged>	
        /// <unmanaged-short>D3DXMESHTYPE_PATCHMESH</unmanaged-short>	
        PatchMesh = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Flags used to specify creation options for a mesh.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A 32-bit mesh (<see cref="SharpDX.Direct3D9.MeshFlags.Use32Bit"/>) can theoretically support (2^32)-1 faces and vertices. However, allocating memory for a mesh that large on a 32-bit operating system is not practical.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_D3DXMESH']/*"/>	
    /// <msdn-id>bb205370</msdn-id>	
    /// <unmanaged>_D3DXMESH</unmanaged>	
    /// <unmanaged-short>_D3DXMESH</unmanaged-short>	
    [Flags]
    public enum MeshFlags : int {	
        
        /// <summary>	
        /// <dd> <p>The mesh has 32-bit indices instead of 16-bit indices. See Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_32BIT']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_32BIT</unmanaged>	
        /// <unmanaged-short>D3DXMESH_32BIT</unmanaged-short>	
        Use32Bit = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.DoNotClip"/></strong> usage flag for vertex and index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_DONOTCLIP']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_DONOTCLIP</unmanaged>	
        /// <unmanaged-short>D3DXMESH_DONOTCLIP</unmanaged-short>	
        DoNotClip = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.Points"/></strong> usage flag for vertex and index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_POINTS']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_POINTS</unmanaged>	
        /// <unmanaged-short>D3DXMESH_POINTS</unmanaged-short>	
        Points = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.RTPatches"/></strong> usage flag for vertex and index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_RTPATCHES']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_RTPATCHES</unmanaged>	
        /// <unmanaged-short>D3DXMESH_RTPATCHES</unmanaged-short>	
        RTPatches = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Specifying this flag causes the vertex and index buffer of the mesh to be created with <strong><see cref="SharpDX.Direct3D9.Usage.NPatches"/></strong> flag. This is required if the mesh object is to be rendered using N-patch enhancement using Direct3D.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_NPATCHES']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_NPATCHES</unmanaged>	
        /// <unmanaged-short>D3DXMESH_NPATCHES</unmanaged-short>	
        NPatches = unchecked((int)16384),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Pool.SystemMemory"/></strong> usage flag for vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_SYSTEMMEM']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_SYSTEMMEM</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_SYSTEMMEM</unmanaged-short>	
        VertexBufferSystemMemory = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Pool.Managed"/></strong> usage flag for vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_MANAGED']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_MANAGED</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_MANAGED</unmanaged-short>	
        VertexBufferManaged = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.WriteOnly"/></strong> usage flag for vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_WRITEONLY']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_WRITEONLY</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_WRITEONLY</unmanaged-short>	
        VertexBufferWriteOnly = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.Dynamic"/></strong> usage flag for vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_DYNAMIC']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_DYNAMIC</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_DYNAMIC</unmanaged-short>	
        VertexBufferDynamic = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.SoftwareProcessing"/></strong> usage flag for vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_SOFTWAREPROCESSING']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_SOFTWAREPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_SOFTWAREPROCESSING</unmanaged-short>	
        VertexBufferSoftware = unchecked((int)32768),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Pool.SystemMemory"/></strong> usage flag for index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_IB_SYSTEMMEM']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_IB_SYSTEMMEM</unmanaged>	
        /// <unmanaged-short>D3DXMESH_IB_SYSTEMMEM</unmanaged-short>	
        IndexBufferSystemMemory = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Pool.Managed"/></strong> usage flag for index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_IB_MANAGED']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_IB_MANAGED</unmanaged>	
        /// <unmanaged-short>D3DXMESH_IB_MANAGED</unmanaged-short>	
        IndexBufferManaged = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.WriteOnly"/></strong> usage flag for index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_IB_WRITEONLY']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_IB_WRITEONLY</unmanaged>	
        /// <unmanaged-short>D3DXMESH_IB_WRITEONLY</unmanaged-short>	
        IndexBufferWriteOnly = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.Dynamic"/></strong> usage flag for index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_IB_DYNAMIC']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_IB_DYNAMIC</unmanaged>	
        /// <unmanaged-short>D3DXMESH_IB_DYNAMIC</unmanaged-short>	
        IndexBufferDynamic = unchecked((int)2048),			
        
        /// <summary>	
        /// <dd> <p>Use the <strong><see cref="SharpDX.Direct3D9.Usage.SoftwareProcessing"/></strong> usage flag for index buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_IB_SOFTWAREPROCESSING']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_IB_SOFTWAREPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DXMESH_IB_SOFTWAREPROCESSING</unmanaged-short>	
        IndexBufferSoftware = unchecked((int)65536),			
        
        /// <summary>	
        /// <dd> <p>Forces the cloned meshes to share vertex buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_VB_SHARE']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_VB_SHARE</unmanaged>	
        /// <unmanaged-short>D3DXMESH_VB_SHARE</unmanaged-short>	
        VertexBufferShare = unchecked((int)4096),			
        
        /// <summary>	
        /// <dd> <p>Use hardware processing only. For mixed-mode device, this flag will cause the system to use hardware (if supported in hardware) or will default to software processing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_USEHWONLY']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_USEHWONLY</unmanaged>	
        /// <unmanaged-short>D3DXMESH_USEHWONLY</unmanaged-short>	
        UseHardwareOnly = unchecked((int)8192),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to specifying both <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferSystemMemory"/> and <see cref="SharpDX.Direct3D9.MeshFlags.IndexBufferSystemMemory"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_SYSTEMMEM']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_SYSTEMMEM</unmanaged>	
        /// <unmanaged-short>D3DXMESH_SYSTEMMEM</unmanaged-short>	
        SystemMemory = unchecked((int)272),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to specifying both <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferManaged"/> and <see cref="SharpDX.Direct3D9.MeshFlags.IndexBufferManaged"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_MANAGED']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_MANAGED</unmanaged>	
        /// <unmanaged-short>D3DXMESH_MANAGED</unmanaged-short>	
        Managed = unchecked((int)544),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to specifying both <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferWriteOnly"/> and <see cref="SharpDX.Direct3D9.MeshFlags.IndexBufferWriteOnly"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_WRITEONLY']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_WRITEONLY</unmanaged>	
        /// <unmanaged-short>D3DXMESH_WRITEONLY</unmanaged-short>	
        WriteOnly = unchecked((int)1088),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to specifying both <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferDynamic"/> and <see cref="SharpDX.Direct3D9.MeshFlags.IndexBufferDynamic"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_DYNAMIC']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_DYNAMIC</unmanaged>	
        /// <unmanaged-short>D3DXMESH_DYNAMIC</unmanaged-short>	
        Dynamic = unchecked((int)2176),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to specifying both <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferSoftware"/> and <see cref="SharpDX.Direct3D9.MeshFlags.IndexBufferSoftware"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESH_SOFTWAREPROCESSING']/*"/>	
        /// <msdn-id>bb205370</msdn-id>	
        /// <unmanaged>D3DXMESH_SOFTWAREPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DXMESH_SOFTWAREPROCESSING</unmanaged-short>	
        Software = unchecked((int)98304),			
    }
    
    /// <summary>	
    /// <p>Specifies the type of mesh optimization to be performed.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <see cref="SharpDX.Direct3D9.MeshOptimizeFlags.StripReorder"/> and <see cref="SharpDX.Direct3D9.MeshOptimizeFlags.VertexCache"/> optimization flags are mutually exclusive.</p><p>The D3DXMESHOPT_SHAREVB flag has been removed from this enumeration. Use <see cref="SharpDX.Direct3D9.MeshFlags.VertexBufferShare"/> instead, in <strong>D3DXMESH</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_D3DXMESHOPT']/*"/>	
    /// <msdn-id>bb205374</msdn-id>	
    /// <unmanaged>_D3DXMESHOPT</unmanaged>	
    /// <unmanaged-short>_D3DXMESHOPT</unmanaged-short>	
    [Flags]
    public enum MeshOptimizeFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Reorders faces to remove unused vertices and faces.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_COMPACT']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_COMPACT</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_COMPACT</unmanaged-short>	
        Compact = unchecked((int)16777216),			
        
        /// <summary>	
        /// <dd> <p>Reorders faces to optimize for fewer attribute bundle state changes and enhanced <strong><see cref="SharpDX.Direct3D9.BaseMesh.DrawSubset"/></strong> performance.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_ATTRSORT']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_ATTRSORT</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_ATTRSORT</unmanaged-short>	
        AttributeSort = unchecked((int)33554432),			
        
        /// <summary>	
        /// <dd> <p>Reorders faces to increase the cache hit rate of vertex caches.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_VERTEXCACHE']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_VERTEXCACHE</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_VERTEXCACHE</unmanaged-short>	
        VertexCache = unchecked((int)67108864),			
        
        /// <summary>	
        /// <dd> <p>Reorders faces to maximize length of adjacent triangles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_STRIPREORDER']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_STRIPREORDER</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_STRIPREORDER</unmanaged-short>	
        StripReorder = unchecked((int)134217728),			
        
        /// <summary>	
        /// <dd> <p>Optimize the faces only; do not optimize the vertices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_IGNOREVERTS']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_IGNOREVERTS</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_IGNOREVERTS</unmanaged-short>	
        IgnoreVertices = unchecked((int)268435456),			
        
        /// <summary>	
        /// <dd> <p>While attribute sorting, do not split vertices that are shared between attribute groups.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_DONOTSPLIT']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_DONOTSPLIT</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_DONOTSPLIT</unmanaged-short>	
        DoNotSplit = unchecked((int)536870912),			
        
        /// <summary>	
        /// <dd> <p>Affects the vertex cache size. Using this flag specifies a default vertex cache size that works well on legacy hardware.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHOPT_DEVICEINDEPENDENT']/*"/>	
        /// <msdn-id>bb205374</msdn-id>	
        /// <unmanaged>D3DXMESHOPT_DEVICEINDEPENDENT</unmanaged>	
        /// <unmanaged-short>D3DXMESHOPT_DEVICEINDEPENDENT</unmanaged-short>	
        DeviceIndependent = unchecked((int)4194304),			
    }
    
    /// <summary>	
    /// <p>Specifies simplification options for a mesh.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_D3DXMESHSIMP']/*"/>	
    /// <msdn-id>bb205375</msdn-id>	
    /// <unmanaged>_D3DXMESHSIMP</unmanaged>	
    /// <unmanaged-short>_D3DXMESHSIMP</unmanaged-short>	
    public enum MeshSimplification : int {	
        
        /// <summary>	
        /// <dd> <p>The mesh will be simplified by the number of vertices specified in the MinValue parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHSIMP_VERTEX']/*"/>	
        /// <msdn-id>bb205375</msdn-id>	
        /// <unmanaged>D3DXMESHSIMP_VERTEX</unmanaged>	
        /// <unmanaged-short>D3DXMESHSIMP_VERTEX</unmanaged-short>	
        Vertex = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The mesh will be simplified by the number of faces specified in the MinValue parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXMESHSIMP_FACE']/*"/>	
        /// <msdn-id>bb205375</msdn-id>	
        /// <unmanaged>D3DXMESHSIMP_FACE</unmanaged>	
        /// <unmanaged-short>D3DXMESHSIMP_FACE</unmanaged-short>	
        Face = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the levels of full-scene multisampling that the device can apply.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>In addition to enabling full-scene multisampling at <strong><see cref="SharpDX.Direct3D9.Device.Reset"/></strong> time, there will be render states that turn various aspects on and off at fine-grained levels.</p><p>Multisampling is valid only on a swap chain that is being created or reset with the <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> swap effect.</p><p>The multisample antialiasing value can be set with the parameters (or sub-parameters) in the following methods.</p><table> <tr><th>Method</th><th>Parameters</th><th>Sub-parameters</th></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_"/></strong> </td><td>MultiSampleType and pQualityLevels</td><td></td></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Direct3D.CreateDevice"/></strong> </td><td>pPresentationParameters</td><td>MultiSampleType and pQualityLevels</td></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Device.CreateAdditionalSwapChain"/></strong> </td><td>pPresentationParameters</td><td>MultiSampleType and pQualityLevels</td></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Device.CreateDepthStencilSurface"/></strong> </td><td>MultiSampleType and pQualityLevels</td><td></td></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Device.CreateRenderTarget"/></strong> </td><td>MultiSampleType and pQualityLevels</td><td></td></tr> <tr><td> <strong><see cref="SharpDX.Direct3D9.Device.Reset"/></strong> </td><td>pPresentationParameters</td><td>MultiSampleType and pQualityLevels</td></tr> </table><p>?</p><p>It is not good practice to switch from one multisample type to another to raise the quality of the antialiasing.</p><p><see cref="SharpDX.Direct3D9.MultisampleType.None"/> enables swap effects other than discarding, locking, and so on.</p><p>Whether the display device supports maskable multisampling (more than one sample for a multiple-sample render-target format plus antialias support) or just non-maskable multisampling (only antialias support), the driver for the device provides the number of quality levels for the <see cref="SharpDX.Direct3D9.MultisampleType.NonMaskable"/> multiple-sample type. Applications that just use multisampling for antialiasing purposes only need to query for the number of non-maskable multiple-sample quality levels that the driver supports.</p><p>The quality levels supported by the device can be obtained with the pQualityLevels parameter of <strong><see cref="SharpDX.Direct3D9.Direct3D.CheckDeviceMultiSampleType_"/></strong>. Quality levels used by the application are set with the MultiSampleQuality parameter of <strong><see cref="SharpDX.Direct3D9.Device.CreateDepthStencilSurface"/></strong> and <strong><see cref="SharpDX.Direct3D9.Device.CreateRenderTarget"/></strong>.</p><p>See <see cref="SharpDX.Direct3D9.RenderState.MultisampleMask"/> for discussion of maskable multisampling.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_TYPE']/*"/>	
    /// <msdn-id>bb172574</msdn-id>	
    /// <unmanaged>D3DMULTISAMPLE_TYPE</unmanaged>	
    /// <unmanaged-short>D3DMULTISAMPLE_TYPE</unmanaged-short>	
    public enum MultisampleType : int {	
        
        /// <summary>	
        /// <dd> <p>No level of full-scene multisampling is available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_NONE']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_NONE</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Enables the multisample quality value. See Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_NONMASKABLE']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_NONMASKABLE</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_NONMASKABLE</unmanaged-short>	
        NonMaskable = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_2_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_2_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_2_SAMPLES</unmanaged-short>	
        TwoSamples = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_3_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_3_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_3_SAMPLES</unmanaged-short>	
        ThreeSamples = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_4_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_4_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_4_SAMPLES</unmanaged-short>	
        FourSamples = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_5_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_5_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_5_SAMPLES</unmanaged-short>	
        FiveSamples = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_6_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_6_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_6_SAMPLES</unmanaged-short>	
        SixSamples = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_7_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_7_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_7_SAMPLES</unmanaged-short>	
        SevenSamples = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_8_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_8_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_8_SAMPLES</unmanaged-short>	
        EightSamples = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_9_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_9_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_9_SAMPLES</unmanaged-short>	
        NineSamples = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_10_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_10_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_10_SAMPLES</unmanaged-short>	
        TenSamples = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_11_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_11_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_11_SAMPLES</unmanaged-short>	
        ElevenSamples = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_12_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_12_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_12_SAMPLES</unmanaged-short>	
        TwelveSamples = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_13_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_13_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_13_SAMPLES</unmanaged-short>	
        ThirteenSamples = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_14_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_14_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_14_SAMPLES</unmanaged-short>	
        FourteenSamples = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_15_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_15_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_15_SAMPLES</unmanaged-short>	
        FifteenSamples = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>Level of full-scene multisampling available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DMULTISAMPLE_16_SAMPLES']/*"/>	
        /// <msdn-id>bb172574</msdn-id>	
        /// <unmanaged>D3DMULTISAMPLE_16_SAMPLES</unmanaged>	
        /// <unmanaged-short>D3DMULTISAMPLE_16_SAMPLES</unmanaged-short>	
        SixteenSamples = unchecked((int)16),			
    }
    
    /// <summary>	
    /// <p>Normal maps generation constants.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP']/*"/>	
    /// <msdn-id>bb205566</msdn-id>	
    /// <unmanaged>D3DX_NORMALMAP</unmanaged>	
    /// <unmanaged-short>D3DX_NORMALMAP</unmanaged-short>	
    [Flags]
    public enum NormalMapFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR_U']/*"/>	
        /// <msdn-id>bb205566</msdn-id>	
        /// <unmanaged>D3DX_NORMALMAP_MIRROR_U</unmanaged>	
        /// <unmanaged-short>D3DX_NORMALMAP_MIRROR_U</unmanaged-short>	
        MirrorU = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR_V']/*"/>	
        /// <msdn-id>bb205566</msdn-id>	
        /// <unmanaged>D3DX_NORMALMAP_MIRROR_V</unmanaged>	
        /// <unmanaged-short>D3DX_NORMALMAP_MIRROR_V</unmanaged-short>	
        MirrorV = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP_MIRROR']/*"/>	
        /// <msdn-id>bb205566</msdn-id>	
        /// <unmanaged>D3DX_NORMALMAP_MIRROR</unmanaged>	
        /// <unmanaged-short>D3DX_NORMALMAP_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)196608),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP_INVERTSIGN']/*"/>	
        /// <msdn-id>bb205566</msdn-id>	
        /// <unmanaged>D3DX_NORMALMAP_INVERTSIGN</unmanaged>	
        /// <unmanaged-short>D3DX_NORMALMAP_INVERTSIGN</unmanaged-short>	
        InvertSign = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_NORMALMAP_COMPUTE_OCCLUSION']/*"/>	
        /// <msdn-id>bb205566</msdn-id>	
        /// <unmanaged>D3DX_NORMALMAP_COMPUTE_OCCLUSION</unmanaged>	
        /// <unmanaged-short>D3DX_NORMALMAP_COMPUTE_OCCLUSION</unmanaged-short>	
        ComputeOcclusion = unchecked((int)1048576),			
    }
    
    /// <summary>	
    /// <p>The type of object.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPARAMETER_CLASS']/*"/>	
    /// <msdn-id>bb205378</msdn-id>	
    /// <unmanaged>D3DXPARAMETER_CLASS</unmanaged>	
    /// <unmanaged-short>D3DXPARAMETER_CLASS</unmanaged-short>	
    public enum ParameterClass : int {	
        
        /// <summary>	
        /// <dd> <p>Constant is a scalar.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_SCALAR']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_SCALAR</unmanaged>	
        /// <unmanaged-short>D3DXPC_SCALAR</unmanaged-short>	
        Scalar = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Constant is a vector.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_VECTOR']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_VECTOR</unmanaged>	
        /// <unmanaged-short>D3DXPC_VECTOR</unmanaged-short>	
        Vector = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Constant is a row major matrix.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_MATRIX_ROWS']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_MATRIX_ROWS</unmanaged>	
        /// <unmanaged-short>D3DXPC_MATRIX_ROWS</unmanaged-short>	
        MatrixRows = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Constant is a column major matrix.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_MATRIX_COLUMNS']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_MATRIX_COLUMNS</unmanaged>	
        /// <unmanaged-short>D3DXPC_MATRIX_COLUMNS</unmanaged-short>	
        MatrixColumns = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Constant is either a texture, shader, or a string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_OBJECT']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_OBJECT</unmanaged>	
        /// <unmanaged-short>D3DXPC_OBJECT</unmanaged-short>	
        Object = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Constant is a structure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPC_STRUCT']/*"/>	
        /// <msdn-id>bb205378</msdn-id>	
        /// <unmanaged>D3DXPC_STRUCT</unmanaged>	
        /// <unmanaged-short>D3DXPC_STRUCT</unmanaged-short>	
        Struct = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>These flags provide additional information about effect parameters.</p><p>Effect parameter constants are used by <strong><see cref="SharpDX.Direct3D9.ParameterDescription"/></strong>.</p><p></p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_PARAMETER']/*"/>	
    /// <msdn-id>bb205567</msdn-id>	
    /// <unmanaged>D3DX_PARAMETER</unmanaged>	
    /// <unmanaged-short>D3DX_PARAMETER</unmanaged-short>	
    [Flags]
    public enum ParameterFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_PARAMETER_SHARED']/*"/>	
        /// <msdn-id>bb205567</msdn-id>	
        /// <unmanaged>D3DX_PARAMETER_SHARED</unmanaged>	
        /// <unmanaged-short>D3DX_PARAMETER_SHARED</unmanaged-short>	
        Shared = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_PARAMETER_LITERAL']/*"/>	
        /// <msdn-id>bb205567</msdn-id>	
        /// <unmanaged>D3DX_PARAMETER_LITERAL</unmanaged>	
        /// <unmanaged-short>D3DX_PARAMETER_LITERAL</unmanaged-short>	
        Literal = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_PARAMETER_ANNOTATION']/*"/>	
        /// <msdn-id>bb205567</msdn-id>	
        /// <unmanaged>D3DX_PARAMETER_ANNOTATION</unmanaged>	
        /// <unmanaged-short>D3DX_PARAMETER_ANNOTATION</unmanaged-short>	
        Annotation = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Describes the data contained by the enumeration.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPARAMETER_TYPE']/*"/>	
    /// <msdn-id>bb205380</msdn-id>	
    /// <unmanaged>D3DXPARAMETER_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXPARAMETER_TYPE</unmanaged-short>	
    public enum ParameterType : int {	
        
        /// <summary>	
        /// <dd> <p>Parameter is a void reference.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_VOID']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_VOID</unmanaged>	
        /// <unmanaged-short>D3DXPT_VOID</unmanaged-short>	
        Void = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a Boolean. Any non-zero value passed into <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetBool"/></strong>, <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetBoolArray"/></strong>, <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetValue"/></strong>, <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetVector"/></strong>, or <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetVectorArray"/></strong> will be mapped to 1 (TRUE) before being written into the constant table; otherwise, the value will be set to 0 in the constant table.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_BOOL']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_BOOL</unmanaged>	
        /// <unmanaged-short>D3DXPT_BOOL</unmanaged-short>	
        Bool = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Parameter is an integer. Any floating-point values passed into <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetValue"/></strong>, <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetVector"/></strong>, or <strong><see cref="SharpDX.Direct3D9.ConstantTable.SetVectorArray"/></strong> will be rounded off (to zero decimal places) before being written into the constant table.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_INT']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_INT</unmanaged>	
        /// <unmanaged-short>D3DXPT_INT</unmanaged-short>	
        Int = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a floating-point number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_FLOAT']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_FLOAT</unmanaged>	
        /// <unmanaged-short>D3DXPT_FLOAT</unmanaged-short>	
        Float = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_STRING']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_STRING</unmanaged>	
        /// <unmanaged-short>D3DXPT_STRING</unmanaged-short>	
        String = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_TEXTURE']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DXPT_TEXTURE</unmanaged-short>	
        Texture = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 1D texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_TEXTURE1D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_TEXTURE1D</unmanaged>	
        /// <unmanaged-short>D3DXPT_TEXTURE1D</unmanaged-short>	
        Texture1D = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 2D texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_TEXTURE2D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_TEXTURE2D</unmanaged>	
        /// <unmanaged-short>D3DXPT_TEXTURE2D</unmanaged-short>	
        Texture2D = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 3D texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_TEXTURE3D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_TEXTURE3D</unmanaged>	
        /// <unmanaged-short>D3DXPT_TEXTURE3D</unmanaged-short>	
        Texture3D = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a cube texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_TEXTURECUBE']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_TEXTURECUBE</unmanaged>	
        /// <unmanaged-short>D3DXPT_TEXTURECUBE</unmanaged-short>	
        TextureCube = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a sampler.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_SAMPLER']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_SAMPLER</unmanaged>	
        /// <unmanaged-short>D3DXPT_SAMPLER</unmanaged-short>	
        Sampler = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 1D sampler.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_SAMPLER1D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_SAMPLER1D</unmanaged>	
        /// <unmanaged-short>D3DXPT_SAMPLER1D</unmanaged-short>	
        Sampler1D = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 2D sampler.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_SAMPLER2D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_SAMPLER2D</unmanaged>	
        /// <unmanaged-short>D3DXPT_SAMPLER2D</unmanaged-short>	
        Sampler2D = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a 3D sampler.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_SAMPLER3D']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_SAMPLER3D</unmanaged>	
        /// <unmanaged-short>D3DXPT_SAMPLER3D</unmanaged-short>	
        Sampler3D = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a cube sampler.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_SAMPLERCUBE']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_SAMPLERCUBE</unmanaged>	
        /// <unmanaged-short>D3DXPT_SAMPLERCUBE</unmanaged-short>	
        SamplerCube = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a pixel shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_PIXELSHADER']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_PIXELSHADER</unmanaged>	
        /// <unmanaged-short>D3DXPT_PIXELSHADER</unmanaged-short>	
        PixelShader = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_VERTEXSHADER']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_VERTEXSHADER</unmanaged>	
        /// <unmanaged-short>D3DXPT_VERTEXSHADER</unmanaged-short>	
        VertexShader = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a pixel shader fragment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_PIXELFRAGMENT']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_PIXELFRAGMENT</unmanaged>	
        /// <unmanaged-short>D3DXPT_PIXELFRAGMENT</unmanaged-short>	
        PixelFragment = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>Parameter is a vertex shader fragment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_VERTEXFRAGMENT']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_VERTEXFRAGMENT</unmanaged>	
        /// <unmanaged-short>D3DXPT_VERTEXFRAGMENT</unmanaged-short>	
        VertexFragment = unchecked((int)18),			
        
        /// <summary>	
        /// <dd> <p>Parameter is not supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPT_UNSUPPORTED']/*"/>	
        /// <msdn-id>bb205380</msdn-id>	
        /// <unmanaged>D3DXPT_UNSUPPORTED</unmanaged>	
        /// <unmanaged-short>D3DXPT_UNSUPPORTED</unmanaged-short>	
        Unsupported = unchecked((int)19),			
    }
    
    /// <summary>	
    /// <p>Defines whether the current tessellation mode is discrete or continuous.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Note that continuous tessellation produces a completely different tessellation pattern from the discrete one for the same tessellation values (this is more apparent in wireframe mode). Thus, 4.0 continuous is not the same as 4 discrete.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPATCHEDGESTYLE']/*"/>	
    /// <msdn-id>bb172575</msdn-id>	
    /// <unmanaged>D3DPATCHEDGESTYLE</unmanaged>	
    /// <unmanaged-short>D3DPATCHEDGESTYLE</unmanaged-short>	
    public enum PatchEdgeStyle : int {	
        
        /// <summary>	
        /// <dd> <p>Discrete edge style. In discrete mode, you can specify float tessellation but it will be truncated to integers. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPATCHEDGE_DISCRETE']/*"/>	
        /// <msdn-id>bb172575</msdn-id>	
        /// <unmanaged>D3DPATCHEDGE_DISCRETE</unmanaged>	
        /// <unmanaged-short>D3DPATCHEDGE_DISCRETE</unmanaged-short>	
        Discrete = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Continuous edge style. In continuous mode, tessellation is specified as float values that can be smoothly varied to reduce "popping" artifacts. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPATCHEDGE_CONTINUOUS']/*"/>	
        /// <msdn-id>bb172575</msdn-id>	
        /// <unmanaged>D3DPATCHEDGE_CONTINUOUS</unmanaged>	
        /// <unmanaged-short>D3DPATCHEDGE_CONTINUOUS</unmanaged-short>	
        Continuous = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Mesh patch types.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Triangle patches have three sides and are described in <strong><see cref="SharpDX.Direct3D9.TrianglePatchInfo"/></strong>. Rectangle patches are four-sided and are described in <strong><see cref="SharpDX.Direct3D9.RectanglePatchInfo"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPATCHMESHTYPE']/*"/>	
    /// <msdn-id>bb205384</msdn-id>	
    /// <unmanaged>D3DXPATCHMESHTYPE</unmanaged>	
    /// <unmanaged-short>D3DXPATCHMESHTYPE</unmanaged-short>	
    public enum PatchMeshType : int {	
        
        /// <summary>	
        /// <dd> <p>Rectangle patch mesh type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPATCHMESH_RECT']/*"/>	
        /// <msdn-id>bb205384</msdn-id>	
        /// <unmanaged>D3DXPATCHMESH_RECT</unmanaged>	
        /// <unmanaged-short>D3DXPATCHMESH_RECT</unmanaged-short>	
        Rectangle = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Triangle patch mesh type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPATCHMESH_TRI']/*"/>	
        /// <msdn-id>bb205384</msdn-id>	
        /// <unmanaged>D3DXPATCHMESH_TRI</unmanaged>	
        /// <unmanaged-short>D3DXPATCHMESH_TRI</unmanaged-short>	
        Triangle = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>N-patch mesh type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPATCHMESH_NPATCH']/*"/>	
        /// <msdn-id>bb205384</msdn-id>	
        /// <unmanaged>D3DXPATCHMESH_NPATCH</unmanaged>	
        /// <unmanaged-short>D3DXPATCHMESH_NPATCH</unmanaged-short>	
        NPatch = unchecked((int)3),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS']/*"/>	
    /// <unmanaged>D3DPS20CAPS</unmanaged>	
    /// <unmanaged-short>D3DPS20CAPS</unmanaged-short>	
    [Flags]
    public enum PixelShaderCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS_ARBITRARYSWIZZLE']/*"/>	
        /// <unmanaged>D3DPS20CAPS_ARBITRARYSWIZZLE</unmanaged>	
        /// <unmanaged-short>D3DPS20CAPS_ARBITRARYSWIZZLE</unmanaged-short>	
        ArbitrarySwizzle = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS_GRADIENTINSTRUCTIONS']/*"/>	
        /// <unmanaged>D3DPS20CAPS_GRADIENTINSTRUCTIONS</unmanaged>	
        /// <unmanaged-short>D3DPS20CAPS_GRADIENTINSTRUCTIONS</unmanaged-short>	
        GradientInstructions = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS_PREDICATION']/*"/>	
        /// <unmanaged>D3DPS20CAPS_PREDICATION</unmanaged>	
        /// <unmanaged-short>D3DPS20CAPS_PREDICATION</unmanaged-short>	
        Predication = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS_NODEPENDENTREADLIMIT']/*"/>	
        /// <unmanaged>D3DPS20CAPS_NODEPENDENTREADLIMIT</unmanaged>	
        /// <unmanaged-short>D3DPS20CAPS_NODEPENDENTREADLIMIT</unmanaged-short>	
        NoDependentReadLimit = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT']/*"/>	
        /// <unmanaged>D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT</unmanaged>	
        /// <unmanaged-short>D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT</unmanaged-short>	
        NoTextureInstructionLimit = unchecked((int)16),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines the type of animation set looping modes used for playback.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPLAYBACK_TYPE']/*"/>	
    /// <msdn-id>bb205397</msdn-id>	
    /// <unmanaged>D3DXPLAYBACK_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXPLAYBACK_TYPE</unmanaged-short>	
    public enum PlaybackType : int {	
        
        /// <summary>	
        /// <dd> <p>The animation repeats endlessly.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPLAY_LOOP']/*"/>	
        /// <msdn-id>bb205397</msdn-id>	
        /// <unmanaged>D3DXPLAY_LOOP</unmanaged>	
        /// <unmanaged-short>D3DXPLAY_LOOP</unmanaged-short>	
        Loop = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The animation plays once, and then it stops on the last frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPLAY_ONCE']/*"/>	
        /// <msdn-id>bb205397</msdn-id>	
        /// <unmanaged>D3DXPLAY_ONCE</unmanaged>	
        /// <unmanaged-short>D3DXPLAY_ONCE</unmanaged-short>	
        Once = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The animation alternates endlessly between playing forward and playing backward.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPLAY_PINGPONG']/*"/>	
        /// <msdn-id>bb205397</msdn-id>	
        /// <unmanaged>D3DXPLAY_PINGPONG</unmanaged>	
        /// <unmanaged-short>D3DXPLAY_PINGPONG</unmanaged-short>	
        PingPong = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines the memory class that holds the buffers for a resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>All pool types are valid with all resources including: vertex buffers, index buffers, textures, and surfaces.</p><p>The following tables indicate restrictions on pool types for render targets, depth stencils, and dynamic and mipmap usages. An x indicates a compatible combination; lack of an x indicates incompatibility.</p><table> <tr><th>Pool</th><th><see cref="SharpDX.Direct3D9.Usage.RenderTarget"/></th><th><see cref="SharpDX.Direct3D9.Usage.DepthStencil"/></th></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Default"/></th><td>x</td><td>x</td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Managed"/></th><td></td><td></td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Scratch"/></th><td></td><td></td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.SystemMemory"/></th><td></td><td></td></tr> </table><p>?</p><table> <tr><th>Pool</th><th><see cref="SharpDX.Direct3D9.Usage.Dynamic"/></th><th><see cref="SharpDX.Direct3D9.Usage.AutoGenerateMipMap"/></th></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Default"/></th><td>x</td><td>x</td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Managed"/></th><td></td><td>x</td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.Scratch"/></th><td></td><td></td></tr> <tr><th><see cref="SharpDX.Direct3D9.Pool.SystemMemory"/></th><td>x</td><td></td></tr> </table><p>?</p><p>For more information about usage types, see <strong><see cref="SharpDX.Direct3D9.Usage"/></strong>.</p><p>Pools cannot be mixed for different objects contained within one resource (mip levels in a mipmap) and, when a pool is chosen, it cannot be changed.</p><p>Applications should use <see cref="SharpDX.Direct3D9.Pool.Managed"/> for most static resources because this saves the application from having to deal with lost devices. (Managed resources are restored by the runtime.) This is especially beneficial for unified memory architecture (UMA) systems. Other dynamic resources are not a good match for <see cref="SharpDX.Direct3D9.Pool.Managed"/>. In fact, index buffers and vertex buffers cannot be created using <see cref="SharpDX.Direct3D9.Pool.Managed"/> together with <see cref="SharpDX.Direct3D9.Usage.Dynamic"/>.</p><p>For dynamic textures, it is sometimes desirable to use a pair of video memory and system memory textures, allocating the video memory using <see cref="SharpDX.Direct3D9.Pool.Default"/> and the system memory using <see cref="SharpDX.Direct3D9.Pool.SystemMemory"/>. You can lock and modify the bits of the system memory texture using a locking method. Then you can update the video memory texture using <strong><see cref="SharpDX.Direct3D9.Device.UpdateTexture"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPOOL']/*"/>	
    /// <msdn-id>bb172584</msdn-id>	
    /// <unmanaged>D3DPOOL</unmanaged>	
    /// <unmanaged-short>D3DPOOL</unmanaged-short>	
    public enum Pool : int {	
        
        /// <summary>	
        /// <dd> <p>Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and AGP memory. The <see cref="SharpDX.Direct3D9.Pool.Default"/> pool is separate from <see cref="SharpDX.Direct3D9.Pool.Managed"/> and <see cref="SharpDX.Direct3D9.Pool.SystemMemory"/>, and it specifies that the resource is placed in the preferred memory for device access. Note that <see cref="SharpDX.Direct3D9.Pool.Default"/> never indicates that either <see cref="SharpDX.Direct3D9.Pool.Managed"/> or <see cref="SharpDX.Direct3D9.Pool.SystemMemory"/> should be chosen as the memory pool type for this resource. Textures placed in the <see cref="SharpDX.Direct3D9.Pool.Default"/> pool cannot be locked unless they are dynamic textures or they are private, FOURCC, driver formats. To access unlockable textures, you must use functions such as <strong><see cref="SharpDX.Direct3D9.Device.UpdateSurface"/></strong>, <strong><see cref="SharpDX.Direct3D9.Device.UpdateTexture"/></strong>, <strong><see cref="SharpDX.Direct3D9.Device.GetFrontBufferData"/></strong>, and <strong><see cref="SharpDX.Direct3D9.Device.GetRenderTargetData"/></strong>. <see cref="SharpDX.Direct3D9.Pool.Managed"/> is probably a better choice than <see cref="SharpDX.Direct3D9.Pool.Default"/> for most applications. Note that some textures created in driver-proprietary pixel formats, unknown to the Direct3D runtime, can be locked. Also note that - unlike textures - swap chain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using <see cref="SharpDX.Direct3D9.Pool.Default"/> must be released before calling <strong><see cref="SharpDX.Direct3D9.Device.Reset"/></strong>. For more information, see Lost Devices (Direct3D 9). </p> <p>When creating resources with <see cref="SharpDX.Direct3D9.Pool.Default"/>, if video card memory is already committed, managed resources will be evicted to free enough memory to satisfy the request.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPOOL_DEFAULT']/*"/>	
        /// <msdn-id>bb172584</msdn-id>	
        /// <unmanaged>D3DPOOL_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DPOOL_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be recreated when a device is lost. See Managing Resources (Direct3D 9) for more information. Managed resources can be locked. Only the system-memory copy is directly modified. Direct3D copies your changes to driver-accessible memory as needed. </p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p><see cref="SharpDX.Direct3D9.Pool.Managed"/> is valid with <strong><see cref="SharpDX.Direct3D9.Device"/></strong>; however, it is not valid with <strong><see cref="SharpDX.Direct3D9.DeviceEx"/></strong>.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPOOL_MANAGED']/*"/>	
        /// <msdn-id>bb172584</msdn-id>	
        /// <unmanaged>D3DPOOL_MANAGED</unmanaged>	
        /// <unmanaged-short>D3DPOOL_MANAGED</unmanaged-short>	
        Managed = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Resources are placed in memory that is not typically accessible by the Direct3D device. This memory allocation consumes system RAM but does not reduce pageable RAM. These resources do not need to be recreated when a device is lost. Resources in this pool can be locked and can be used as the source for a <strong><see cref="SharpDX.Direct3D9.Device.UpdateSurface"/></strong> or <strong><see cref="SharpDX.Direct3D9.Device.UpdateTexture"/></strong> operation to a memory resource created with <see cref="SharpDX.Direct3D9.Pool.Default"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPOOL_SYSTEMMEM']/*"/>	
        /// <msdn-id>bb172584</msdn-id>	
        /// <unmanaged>D3DPOOL_SYSTEMMEM</unmanaged>	
        /// <unmanaged-short>D3DPOOL_SYSTEMMEM</unmanaged-short>	
        SystemMemory = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Resources are placed in system RAM and do not need to be recreated when a device is lost.  These resources are not bound by device size or format restrictions.  Because of this, these resources cannot be accessed by the Direct3D device nor set as textures or render targets. However, these resources can always be created, locked, and copied.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPOOL_SCRATCH']/*"/>	
        /// <msdn-id>bb172584</msdn-id>	
        /// <unmanaged>D3DPOOL_SCRATCH</unmanaged>	
        /// <unmanaged-short>D3DPOOL_SCRATCH</unmanaged-short>	
        Scratch = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Describes the relationship between the adapter refresh rate and the rate at which <strong>Present</strong> or <strong>Present</strong> operations are completed.  These values also serve as flag values for the PresentationIntervals field of <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong>.</p><p></p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Windowed mode supports <see cref="SharpDX.Direct3D9.PresentInterval.Default"/>, <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/>, and <see cref="SharpDX.Direct3D9.PresentInterval.One"/>. <see cref="SharpDX.Direct3D9.PresentInterval.Default"/> and the <see cref="SharpDX.Direct3D9.PresentInterval.One"/> are nearly equivalent (see  the information regarding timer resolution below). They perform similarly to COPY_VSYNC in that there is only one present per frame, and they prevent tearing with beam-following. In contrast, <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/> will attempt to provide an unlimited presentation rate.</p><p>Full-screen mode supports similar usage as windowed mode by supporting <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/> regardless of the refresh rate or swap effect. <see cref="SharpDX.Direct3D9.PresentInterval.Default"/> uses the default system timer resolution whereas the <see cref="SharpDX.Direct3D9.PresentInterval.One"/> calls <strong>timeBeginPeriod</strong> to enhance system timer resolution. This improves the quality of vertical sync, but consumes slightly more processing time. Both parameters attempt to synchronize vertically.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT']/*"/>	
    /// <msdn-id>bb172585</msdn-id>	
    /// <unmanaged>D3DPRESENT</unmanaged>	
    /// <unmanaged-short>D3DPRESENT</unmanaged-short>	
    [Flags]
    public enum Present : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_BACK_BUFFERS_MAX']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_BACK_BUFFERS_MAX</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_BACK_BUFFERS_MAX</unmanaged-short>	
        BackBuffersMaximum = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_BACK_BUFFERS_MAX_EX']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_BACK_BUFFERS_MAX_EX</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_BACK_BUFFERS_MAX_EX</unmanaged-short>	
        BackBuffersMaximumEx = unchecked((int)30),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_DONOTWAIT']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_DONOTWAIT</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_DONOTWAIT</unmanaged-short>	
        DoNotWait = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_LINEAR_CONTENT']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_LINEAR_CONTENT</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_LINEAR_CONTENT</unmanaged-short>	
        LinearContent = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_DONOTFLIP']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_DONOTFLIP</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_DONOTFLIP</unmanaged-short>	
        DoNotFlip = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_FLIPRESTART']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_FLIPRESTART</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_FLIPRESTART</unmanaged-short>	
        FlipRestart = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR</unmanaged-short>	
        VideoRestrictToMonitor = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_UPDATEOVERLAYONLY']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_UPDATEOVERLAYONLY</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_UPDATEOVERLAYONLY</unmanaged-short>	
        UpdateOverlayOnly = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_HIDEOVERLAY']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_HIDEOVERLAY</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_HIDEOVERLAY</unmanaged-short>	
        HideOverlay = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_UPDATECOLORKEY']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_UPDATECOLORKEY</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_UPDATECOLORKEY</unmanaged-short>	
        UpdateColorKey = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_FORCEIMMEDIATE']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_FORCEIMMEDIATE</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_FORCEIMMEDIATE</unmanaged-short>	
        ForceImmediate = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_RATE_DEFAULT']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_RATE_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_RATE_DEFAULT</unmanaged-short>	
        RateDefault = unchecked((int)0),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Constants used by <strong><see cref="SharpDX.Direct3D9.PresentParameters"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG']/*"/>	
    /// <msdn-id>bb172586</msdn-id>	
    /// <unmanaged>D3DPRESENTFLAG</unmanaged>	
    /// <unmanaged-short>D3DPRESENTFLAG</unmanaged-short>	
    [Flags]
    public enum PresentFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_LOCKABLE_BACKBUFFER']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</unmanaged-short>	
        LockableBackBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL</unmanaged-short>	
        DiscardDepthStencil = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_DEVICECLIP']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_DEVICECLIP</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_DEVICECLIP</unmanaged-short>	
        DeviceClip = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_VIDEO']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_VIDEO</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_VIDEO</unmanaged-short>	
        Video = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_NOAUTOROTATE']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_NOAUTOROTATE</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_NOAUTOROTATE</unmanaged-short>	
        NoAutoRotate = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_UNPRUNEDMODE']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_UNPRUNEDMODE</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_UNPRUNEDMODE</unmanaged-short>	
        UnprunedMode = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_LIMITEDRGB']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_OVERLAY_LIMITEDRGB</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_OVERLAY_LIMITEDRGB</unmanaged-short>	
        OverlayLimitedRgb = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_YCbCr_BT709']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_OVERLAY_YCbCr_BT709</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_OVERLAY_YCbCr_BT709</unmanaged-short>	
        OverlayYCbCrBt709 = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC</unmanaged-short>	
        OverlayYCbCrXvYCC = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_RESTRICTED_CONTENT']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_RESTRICTED_CONTENT</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_RESTRICTED_CONTENT</unmanaged-short>	
        RestrictedContent = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
        /// <msdn-id>bb172586</msdn-id>	
        /// <unmanaged>D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        /// <unmanaged-short>D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged-short>	
        RestrictSharedResourceDriver = unchecked((int)2048),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Describes the relationship between the adapter refresh rate and the rate at which <strong>Present</strong> or <strong>Present</strong> operations are completed.  These values also serve as flag values for the PresentationIntervals field of <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong>.</p><p></p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Windowed mode supports <see cref="SharpDX.Direct3D9.PresentInterval.Default"/>, <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/>, and <see cref="SharpDX.Direct3D9.PresentInterval.One"/>. <see cref="SharpDX.Direct3D9.PresentInterval.Default"/> and the <see cref="SharpDX.Direct3D9.PresentInterval.One"/> are nearly equivalent (see  the information regarding timer resolution below). They perform similarly to COPY_VSYNC in that there is only one present per frame, and they prevent tearing with beam-following. In contrast, <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/> will attempt to provide an unlimited presentation rate.</p><p>Full-screen mode supports similar usage as windowed mode by supporting <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/> regardless of the refresh rate or swap effect. <see cref="SharpDX.Direct3D9.PresentInterval.Default"/> uses the default system timer resolution whereas the <see cref="SharpDX.Direct3D9.PresentInterval.One"/> calls <strong>timeBeginPeriod</strong> to enhance system timer resolution. This improves the quality of vertical sync, but consumes slightly more processing time. Both parameters attempt to synchronize vertically.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL']/*"/>	
    /// <msdn-id>bb172585</msdn-id>	
    /// <unmanaged>D3DPRESENT_INTERVAL</unmanaged>	
    /// <unmanaged-short>D3DPRESENT_INTERVAL</unmanaged-short>	
    [Flags]
    public enum PresentInterval : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_DEFAULT']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_DEFAULT</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_ONE']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_ONE</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_ONE</unmanaged-short>	
        One = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_TWO']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_TWO</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_TWO</unmanaged-short>	
        Two = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_THREE']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_THREE</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_THREE</unmanaged-short>	
        Three = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_FOUR']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_FOUR</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_FOUR</unmanaged-short>	
        Four = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRESENT_INTERVAL_IMMEDIATE']/*"/>	
        /// <msdn-id>bb172585</msdn-id>	
        /// <unmanaged>D3DPRESENT_INTERVAL_IMMEDIATE</unmanaged>	
        /// <unmanaged-short>D3DPRESENT_INTERVAL_IMMEDIATE</unmanaged-short>	
        Immediate = unchecked((int)-2147483648),			
    }
    
    /// <summary>	
    /// <p>Miscellaneous driver primitive capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS']/*"/>	
    /// <msdn-id>bb172583</msdn-id>	
    /// <unmanaged>D3DPMISCCAPS</unmanaged>	
    /// <unmanaged-short>D3DPMISCCAPS</unmanaged-short>	
    [Flags]
    public enum PrimitiveMiscCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_MASKZ']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_MASKZ</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_MASKZ</unmanaged-short>	
        MaskZ = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_CULLNONE']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_CULLNONE</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_CULLNONE</unmanaged-short>	
        CullNone = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_CULLCW']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_CULLCW</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_CULLCW</unmanaged-short>	
        CullCW = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_CULLCCW']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_CULLCCW</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_CULLCCW</unmanaged-short>	
        CullCCW = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_COLORWRITEENABLE']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_COLORWRITEENABLE</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_COLORWRITEENABLE</unmanaged-short>	
        ColorWriteEnable = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_CLIPPLANESCALEDPOINTS']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_CLIPPLANESCALEDPOINTS</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_CLIPPLANESCALEDPOINTS</unmanaged-short>	
        ClipPlanesScaledPoints = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_CLIPTLVERTS']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_CLIPTLVERTS</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_CLIPTLVERTS</unmanaged-short>	
        ClipTLVertices = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_TSSARGTEMP']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_TSSARGTEMP</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_TSSARGTEMP</unmanaged-short>	
        TssArgTemp = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_BLENDOP']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_BLENDOP</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_BLENDOP</unmanaged-short>	
        BlendOperation = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_NULLREFERENCE']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_NULLREFERENCE</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_NULLREFERENCE</unmanaged-short>	
        NullReference = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_INDEPENDENTWRITEMASKS']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_INDEPENDENTWRITEMASKS</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_INDEPENDENTWRITEMASKS</unmanaged-short>	
        IndependentWriteMasks = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_PERSTAGECONSTANT']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_PERSTAGECONSTANT</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_PERSTAGECONSTANT</unmanaged-short>	
        PerStageConstant = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_FOGANDSPECULARALPHA']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_FOGANDSPECULARALPHA</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_FOGANDSPECULARALPHA</unmanaged-short>	
        FogAndSpecularAlpha = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_SEPARATEALPHABLEND']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_SEPARATEALPHABLEND</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_SEPARATEALPHABLEND</unmanaged-short>	
        SeparateAlphaBlend = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS</unmanaged-short>	
        MrtIndependentBitDepths = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING</unmanaged-short>	
        MrtPostPixelShaderBlending = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_FOGVERTEXCLAMPED']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_FOGVERTEXCLAMPED</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_FOGVERTEXCLAMPED</unmanaged-short>	
        FogVertexClamped = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPMISCCAPS_POSTBLENDSRGBCONVERT']/*"/>	
        /// <msdn-id>bb172583</msdn-id>	
        /// <unmanaged>D3DPMISCCAPS_POSTBLENDSRGBCONVERT</unmanaged>	
        /// <unmanaged-short>D3DPMISCCAPS_POSTBLENDSRGBCONVERT</unmanaged-short>	
        PostBlendSrgbConvert = unchecked((int)2097152),			
    }
    
    /// <summary>	
    /// <p>Defines the primitives supported by Direct3D.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Using Triangle Strips or Triangle Fans (Direct3D 9) is often more efficient than using triangle lists because fewer vertices are duplicated.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRIMITIVETYPE']/*"/>	
    /// <msdn-id>bb172589</msdn-id>	
    /// <unmanaged>D3DPRIMITIVETYPE</unmanaged>	
    /// <unmanaged-short>D3DPRIMITIVETYPE</unmanaged-short>	
    public enum PrimitiveType : int {	
        
        /// <summary>	
        /// <dd> <p>Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_POINTLIST']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_POINTLIST</unmanaged>	
        /// <unmanaged-short>D3DPT_POINTLIST</unmanaged-short>	
        PointList = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Renders the vertices as a list of isolated straight line segments.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_LINELIST']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_LINELIST</unmanaged>	
        /// <unmanaged-short>D3DPT_LINELIST</unmanaged-short>	
        LineList = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Renders the vertices as a single polyline.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_LINESTRIP']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_LINESTRIP</unmanaged>	
        /// <unmanaged-short>D3DPT_LINESTRIP</unmanaged-short>	
        LineStrip = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. </p> <p>Back-face culling is affected by the current winding-order render state.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_TRIANGLELIST']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_TRIANGLELIST</unmanaged>	
        /// <unmanaged-short>D3DPT_TRIANGLELIST</unmanaged-short>	
        TriangleList = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Renders the vertices as a triangle strip. The backface-culling flag is automatically flipped on even-numbered triangles. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_TRIANGLESTRIP']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_TRIANGLESTRIP</unmanaged>	
        /// <unmanaged-short>D3DPT_TRIANGLESTRIP</unmanaged-short>	
        TriangleStrip = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Renders the vertices as a triangle fan. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPT_TRIANGLEFAN']/*"/>	
        /// <msdn-id>bb172589</msdn-id>	
        /// <unmanaged>D3DPT_TRIANGLEFAN</unmanaged>	
        /// <unmanaged-short>D3DPT_TRIANGLEFAN</unmanaged-short>	
        TriangleFan = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Identifies the query type. For information about queries, see Queries (Direct3D 9) </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE']/*"/>	
    /// <msdn-id>bb172594</msdn-id>	
    /// <unmanaged>D3DQUERYTYPE</unmanaged>	
    /// <unmanaged-short>D3DQUERYTYPE</unmanaged-short>	
    public enum QueryType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_VCACHE']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_VCACHE</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_VCACHE</unmanaged-short>	
        VCache = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_RESOURCEMANAGER']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_RESOURCEMANAGER</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_RESOURCEMANAGER</unmanaged-short>	
        ResourceManager = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_VERTEXSTATS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_VERTEXSTATS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_VERTEXSTATS</unmanaged-short>	
        VertexStats = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_EVENT']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_EVENT</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_EVENT</unmanaged-short>	
        Event = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_OCCLUSION']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_OCCLUSION</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_OCCLUSION</unmanaged-short>	
        Occlusion = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMP']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_TIMESTAMP</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_TIMESTAMP</unmanaged-short>	
        Timestamp = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMPDISJOINT']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_TIMESTAMPDISJOINT</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_TIMESTAMPDISJOINT</unmanaged-short>	
        TimestampDisjoint = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_TIMESTAMPFREQ']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_TIMESTAMPFREQ</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_TIMESTAMPFREQ</unmanaged-short>	
        TimestampFreq = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_PIPELINETIMINGS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_PIPELINETIMINGS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_PIPELINETIMINGS</unmanaged-short>	
        PipelineTimings = unchecked((int)13),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_INTERFACETIMINGS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_INTERFACETIMINGS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_INTERFACETIMINGS</unmanaged-short>	
        InterfaceTimings = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_VERTEXTIMINGS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_VERTEXTIMINGS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_VERTEXTIMINGS</unmanaged-short>	
        VertexTimings = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_PIXELTIMINGS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_PIXELTIMINGS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_PIXELTIMINGS</unmanaged-short>	
        PixelTimings = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_BANDWIDTHTIMINGS']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_BANDWIDTHTIMINGS</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_BANDWIDTHTIMINGS</unmanaged-short>	
        BandwidthTimings = unchecked((int)17),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_CACHEUTILIZATION']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_CACHEUTILIZATION</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_CACHEUTILIZATION</unmanaged-short>	
        CacheUtilization = unchecked((int)18),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DQUERYTYPE_MEMORYPRESSURE']/*"/>	
        /// <msdn-id>bb172594</msdn-id>	
        /// <unmanaged>D3DQUERYTYPE_MEMORYPRESSURE</unmanaged>	
        /// <unmanaged-short>D3DQUERYTYPE_MEMORYPRESSURE</unmanaged-short>	
        MemoryPressure = unchecked((int)19),			
    }
    
    /// <summary>	
    /// <p>A programmable pixel shader is made up of a set of instructions that operate on pixel data. Registers transfer data in and out of the ALU. Additional control can be applied to modify the instruction, the results, or what data gets written out.</p><ul> <li> ps_3_0 Instructions contains a list of the available instructions.</li> <li> ps_3_0 Registers lists the different types of registers used by the pixel shader ALU.</li> <li> Modifiers Are used to modify the way an instruction works.</li> <li> Destination Register Write Mask determines what components of the destination register get written.</li> <li> Pixel Shader Source Register Modifiers alter the source register data before the instruction runs.</li> <li> Source Register Swizzling gives additional control over which register components are read, copied, or written.</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS']/*"/>	
    /// <msdn-id>bb219845</msdn-id>	
    /// <unmanaged>D3DPRASTERCAPS</unmanaged>	
    /// <unmanaged-short>D3DPRASTERCAPS</unmanaged-short>	
    [Flags]
    public enum RasterCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_DITHER']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_DITHER</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_DITHER</unmanaged-short>	
        Dither = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_ZTEST']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_ZTEST</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_ZTEST</unmanaged-short>	
        DepthTest = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_FOGVERTEX']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_FOGVERTEX</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_FOGVERTEX</unmanaged-short>	
        FogVertex = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_FOGTABLE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_FOGTABLE</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_FOGTABLE</unmanaged-short>	
        FogTable = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_MIPMAPLODBIAS']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_MIPMAPLODBIAS</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_MIPMAPLODBIAS</unmanaged-short>	
        MipMapLodBias = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_ZBUFFERLESSHSR']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_ZBUFFERLESSHSR</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_ZBUFFERLESSHSR</unmanaged-short>	
        ZBufferLessHsr = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_FOGRANGE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_FOGRANGE</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_FOGRANGE</unmanaged-short>	
        FogRange = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_ANISOTROPY']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_ANISOTROPY</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_ANISOTROPY</unmanaged-short>	
        Anisotropy = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_WBUFFER']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_WBUFFER</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_WBUFFER</unmanaged-short>	
        WBuffer = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_WFOG']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_WFOG</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_WFOG</unmanaged-short>	
        WFog = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_ZFOG']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_ZFOG</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_ZFOG</unmanaged-short>	
        ZFog = unchecked((int)2097152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_COLORPERSPECTIVE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_COLORPERSPECTIVE</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_COLORPERSPECTIVE</unmanaged-short>	
        ColorPerspective = unchecked((int)4194304),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_SCISSORTEST']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_SCISSORTEST</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_SCISSORTEST</unmanaged-short>	
        ScissorTest = unchecked((int)16777216),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS</unmanaged-short>	
        SlopeScaleDepthBias = unchecked((int)33554432),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_DEPTHBIAS']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_DEPTHBIAS</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_DEPTHBIAS</unmanaged-short>	
        DepthBias = unchecked((int)67108864),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPRASTERCAPS_MULTISAMPLE_TOGGLE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPRASTERCAPS_MULTISAMPLE_TOGGLE</unmanaged>	
        /// <unmanaged-short>D3DPRASTERCAPS_MULTISAMPLE_TOGGLE</unmanaged-short>	
        MultisampleToggle = unchecked((int)134217728),			
    }
    
    /// <summary>	
    /// <p>Data type of the register.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXREGISTER_SET']/*"/>	
    /// <msdn-id>bb205424</msdn-id>	
    /// <unmanaged>D3DXREGISTER_SET</unmanaged>	
    /// <unmanaged-short>D3DXREGISTER_SET</unmanaged-short>	
    public enum RegisterSet : int {	
        
        /// <summary>	
        /// <dd> <p>Boolean value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXRS_BOOL']/*"/>	
        /// <msdn-id>bb205424</msdn-id>	
        /// <unmanaged>D3DXRS_BOOL</unmanaged>	
        /// <unmanaged-short>D3DXRS_BOOL</unmanaged-short>	
        Bool = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>4D integer number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXRS_INT4']/*"/>	
        /// <msdn-id>bb205424</msdn-id>	
        /// <unmanaged>D3DXRS_INT4</unmanaged>	
        /// <unmanaged-short>D3DXRS_INT4</unmanaged-short>	
        Int4 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>4D floating-point number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXRS_FLOAT4']/*"/>	
        /// <msdn-id>bb205424</msdn-id>	
        /// <unmanaged>D3DXRS_FLOAT4</unmanaged>	
        /// <unmanaged-short>D3DXRS_FLOAT4</unmanaged-short>	
        Float4 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The register contains 4D sampler data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXRS_SAMPLER']/*"/>	
        /// <msdn-id>bb205424</msdn-id>	
        /// <unmanaged>D3DXRS_SAMPLER</unmanaged>	
        /// <unmanaged-short>D3DXRS_SAMPLER</unmanaged-short>	
        Sampler = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>The <see cref="SharpDX.Direct3D9.RenderState"/> enumerated type lists a variety of attributes, or render states. The enumerators of <see cref="SharpDX.Direct3D9.RenderState"/> that are used exclusively by drivers can specify either rendering information or a texture attribute. The following render states are used by display drivers:</p><pre>#define D3DRENDERSTATE_EVICTMANAGEDTEXTURES  61	
    /// #define D3DRENDERSTATE_SCENECAPTURE          62	
    /// #define D3DRS_DELETERTPATCH                  169	
    /// #define D3DRS_MAXVERTEXSHADERINST            196	
    /// #define D3DRS_MAXPIXELSHADERINST             197</pre><p> </p><p><strong>Enumerators</strong></p><dl> <dt><strong>D3DRENDERSTATE_EVICTMANAGEDTEXTURES</strong></dt> <dd> <dl> <dt></dt> <dt> <p> Determines whether textures are evicted from memory.	
    /// The driver uses a <see cref="SharpDX.Mathematics.Interop.RawBool"/> data type without a default value to detect whether to evict.</p> <p>This render state determines whether the driver evicts textures that it manages (as opposed to textures managed by the Direct3D runtime) from video memory. If the render state value is <strong>TRUE</strong>, the driver evicts the textures. Otherwise, the driver does not evict those textures.</p> </dt> </dl> </dd> <dt><strong>D3DRENDERSTATE_SCENECAPTURE</strong></dt> <dd> <dl> <dt></dt> <dt> <p>Specifies either begin scene information or end scene information for geometric data captured within a frame.	
    /// The driver uses a <see cref="SharpDX.Mathematics.Interop.RawBool"/> data type with a default value of <strong>TRUE</strong> to detect scene-capture information.</p> <p>The driver responds to D3DRENDERSTATE_SCENECAPTURE first with <strong>TRUE</strong> for begin scene information and next with <strong><see cref="SharpDX.Result.False"/></strong> for end scene information to capture geometric data within a frame.	
    /// See the <em>permedia2</em> sample driver that ships with the Windows Driver Development Kit (DDK) for an example implementation.	
    /// Using the D3DRENDERSTATE_SCENECAPTURE render state in a <em>D3dDrawPrimitives2</em> call replaces the legacy <strong>D3DHALCallbacks</strong>-&gt;<em>D3dSceneCapture</em> callback routine.</p> <p>Care must be taken in updating a driver that implements the legacy <strong>D3DHALCallbacks</strong>-&gt;<em>D3dSceneCapture</em> callback routine to one using the D3DRENDERSTATE_SCENECAPTURE render state. The <em>D3dSceneCapture</em> callback routine uses the constants D3DHAL_SCENE_CAPTURE_START and D3DHAL_SCENE_CAPTURE_END to indicate, respectively, the beginning and end of a scene. The values of these constants are, respectively, 0 and 1. If you use these constants in place of <strong>TRUE</strong> and <strong><see cref="SharpDX.Result.False"/></strong> in this render state, the meaning will be the exact opposite of what you intend.</p> </dt> </dl> </dd> <dt><strong>D3DRS_DELETERTPATCH</strong></dt> <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 8.0 and later versions only.</strong></p> <p>Deletes either a rectangular or triangular patch from memory. 	
    /// The driver uses a DWORD data type without a default value to detect the patch to delete.</p> <p>This render state notifies the driver that a patch is to be deleted. The value of this render state is the handle to the patch affected. All cached information should be freed and the handle should be removed from the driver's patch handle table. This render state is not visible to applications but is generated internally when an application calls the <strong>DeletePatch</strong> function. This render state is sent to the driver only when patches are deleted by <strong>DeletePatch</strong> explicitly. All other patches should be cleaned up when the device is destroyed.</p> </dt> </dl> </dd> <dt><strong>D3DRS_MAXVERTEXSHADERINST</strong></dt> <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 9.0 and later versions only.</strong></p> <p>Determines the maximum number of instructions that the vertex shader assembler can execute.</p> <p>The driver uses a DWORD data type with a default value of D3DINFINITEINSTRUCTIONS (0xffffffff) to report the maximum number of vertex-shader instructions.	
    /// This maximum number depends on the version of the vertex shader that the display device supports as shown in the following table.</p> <table> <tr><th>Version</th><th>Maximum number</th></tr> <tr><td>earlier than 2_0</td><td>0</td></tr> <tr><td>2_0 and later</td><td>From 216 (0x0000ffff) to D3DINFINITEINSTRUCTIONS</td></tr> </table> <p>?</p> <p>D3DINFINITEINSTRUCTIONS represents a virtually unlimited amount.</p> <p>Valid values for this render state are numbers that are powers of 2; if the driver sets any other integer, the runtime uses the next nearest power of 2 number.</p> <p>The runtime sets the <strong>MaxVShaderInstructionsExecuted</strong> member of the <see cref="SharpDX.Direct3D9.Capabilities"/> structure to this maximum number.</p> </dt> </dl> </dd> <dt><strong>D3DRS_MAXPIXELSHADERINST</strong></dt> <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 9.0 and later versions only.</strong></p> <p>Determines the maximum number of instructions that the pixel shader assembler can execute.</p> <p>The driver uses a DWORD data type with a default value of D3DINFINITEINSTRUCTIONS (0xffffffff) to report the maximum number of pixel-shader instructions.	
    /// This maximum number depends on the version of the pixel shader that the display device supports as shown in the following table.</p> <table> <tr><th>Version</th><th>Maximum number</th></tr> <tr><td>earlier than 2_0</td><td>0</td></tr> <tr><td>2_0</td><td>From 96 to D3DINFINITEINSTRUCTIONS</td></tr> <tr><td>3_0 and later</td><td>From 216 (0x0000ffff) to D3DINFINITEINSTRUCTIONS</td></tr> </table> <p>?</p> <p>D3DINFINITEINSTRUCTIONS represents a virtually unlimited amount.</p> <p>Valid values for this render state are numbers that are powers of 2; if the driver sets any other integer, the runtime uses the next nearest power of 2 number.</p> <p>The runtime sets the <strong>MaxVShaderInstructionsExecuted</strong> member of the <see cref="SharpDX.Direct3D9.Capabilities"/> structure to this maximum number.</p> </dt> </dl> </dd> </dl>	
    /// </summary>	
    /// <remarks>	
    /// <p>The driver uses these render states when it performs graphics rendering. Only render states that are specific to drivers are included in the Windows Driver Kit (WDK) documentation. The render states accessible to DirectX applications are included in the DirectX SDK documentation. These application-level render states include such characteristics as whether alpha blending is enabled, whether dithering is enabled, whether Direct3D lighting is used, and the type of shading to be used. </p><p>To update a particular render state, Direct3D stores information about the render state, and then calls the driver's <em>D3dDrawPrimitives2</em> callback routine. The information provided to the driver enables it to:</p><ul> <li> <p>Determine that it should update one or more render states.</p> </li> <li> <p>Identify which render states to update, and what the new render state values should be.</p> </li> </ul><p>Note that for certain render states to be honored, the driver must have previously set capability flags in the relevant member of the D3DPRIMCAPS structure.</p><p>In order to indicate a specific render state update, Direct3D inserts a <strong>D3DHAL_DP2COMMAND</strong> structure into the command buffer, setting the <strong>bCommand</strong> member of this structure to D3DDP2OP_RENDERSTATE (see the description for D3DDP2OP_RENDERSTATE in <strong>D3DHAL_DP2OPERATION</strong>), and setting the <strong>wStateCount</strong> member of the same structure to the number of render states to be updated.</p><p>Immediately following the <strong>D3DHAL_DP2COMMAND</strong> structure, Direct3D inserts one <strong>D3DHAL_DP2RENDERSTATE</strong> structure into the command buffer for each render state to be updated. The <strong>RenderState</strong> member of this structure identifies the render state to be changed; the new value of this render state is specified in either the <strong>dwState</strong> member (for DWORD values) or the <strong>fState</strong> member (for D3DVALUE values).</p><p>The following figure shows a portion of the command buffer containing a D3DDP2OP_RENDERSTATE command and two D3DHAL_DP2RENDERSTATE structures. The first of the three structures indicates that two render states are to be updated. The second structure indicates that the D3DRENDERSTATE_FILLMODE render state is to be changed to <see cref="SharpDX.Direct3D9.FillMode.Solid"/>. The third structure indicates that the D3DRENDERSTATE_SHADEMODE render state should be updated to <see cref="SharpDX.Direct3D9.ShadeMode.Gouraud"/>.</p><p><strong> Additional Notes</strong></p><p>See the <see cref="SharpDX.Direct3D9.TextureStage"/>, <see cref="SharpDX.Direct3D9.TextureOperation"/>, and D3DTEXTUREFILTER enumerated types in the DirectX SDK documentation for complete listings of all of the enabled render state types.</p><p>Some changes have been made to the <see cref="SharpDX.Direct3D9.RenderState"/> enumerated type for DirectX 5.0 and beyond. D3DRENDERSTATE_BLENDENABLE has been removed completely although it is defined as D3DRENDERSTATE_ALPHABLENDENABLE in the <em>d3dtypes.h</em> header file. See D3DRENDERSTATE_COLORKEYENABLE for an explanation. The 128 integer values in the interval [128, 255] are reserved for texture coordinate wrap flags. These are constructed with the D3DWRAP_U and D3DWRAP_V macros. Using a flags word preserves forward compatibility with texture coordinates of higher dimension than 2D.</p><p>Multitexture macro ops and D3DRENDERSTATE_TEXTUREFACTOR override all of the per-texture stage blending controls (COLOR{OP,ARG1,ARG2} &amp; ALPHA{OP,ARG1,ARG2}).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRENDERSTATETYPE']/*"/>	
    /// <msdn-id>ff549036</msdn-id>	
    /// <unmanaged>D3DRENDERSTATETYPE</unmanaged>	
    /// <unmanaged-short>D3DRENDERSTATETYPE</unmanaged-short>	
    public enum RenderState : int {	
        
        /// <summary>	
        /// <dd> <dl> <dt></dt> <dt> <p> Determines whether textures are evicted from memory.	
        /// The driver uses a <see cref="SharpDX.Mathematics.Interop.RawBool"/> data type without a default value to detect whether to evict.</p> <p>This render state determines whether the driver evicts textures that it manages (as opposed to textures managed by the Direct3D runtime) from video memory. If the render state value is <strong>TRUE</strong>, the driver evicts the textures. Otherwise, the driver does not evict those textures.</p> </dt> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ZENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ZENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_ZENABLE</unmanaged-short>	
        ZEnable = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <dl> <dt></dt> <dt> <p>Specifies either begin scene information or end scene information for geometric data captured within a frame.	
        /// The driver uses a <see cref="SharpDX.Mathematics.Interop.RawBool"/> data type with a default value of <strong>TRUE</strong> to detect scene-capture information.</p> <p>The driver responds to D3DRENDERSTATE_SCENECAPTURE first with <strong>TRUE</strong> for begin scene information and next with <strong><see cref="SharpDX.Result.False"/></strong> for end scene information to capture geometric data within a frame.	
        /// See the <em>permedia2</em> sample driver that ships with the Windows Driver Development Kit (DDK) for an example implementation.	
        /// Using the D3DRENDERSTATE_SCENECAPTURE render state in a <em>D3dDrawPrimitives2</em> call replaces the legacy <strong>D3DHALCallbacks</strong>-&gt;<em>D3dSceneCapture</em> callback routine.</p> <p>Care must be taken in updating a driver that implements the legacy <strong>D3DHALCallbacks</strong>-&gt;<em>D3dSceneCapture</em> callback routine to one using the D3DRENDERSTATE_SCENECAPTURE render state. The <em>D3dSceneCapture</em> callback routine uses the constants D3DHAL_SCENE_CAPTURE_START and D3DHAL_SCENE_CAPTURE_END to indicate, respectively, the beginning and end of a scene. The values of these constants are, respectively, 0 and 1. If you use these constants in place of <strong>TRUE</strong> and <strong><see cref="SharpDX.Result.False"/></strong> in this render state, the meaning will be the exact opposite of what you intend.</p> </dt> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FILLMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FILLMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_FILLMODE</unmanaged-short>	
        FillMode = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 8.0 and later versions only.</strong></p> <p>Deletes either a rectangular or triangular patch from memory. 	
        /// The driver uses a DWORD data type without a default value to detect the patch to delete.</p> <p>This render state notifies the driver that a patch is to be deleted. The value of this render state is the handle to the patch affected. All cached information should be freed and the handle should be removed from the driver's patch handle table. This render state is not visible to applications but is generated internally when an application calls the <strong>DeletePatch</strong> function. This render state is sent to the driver only when patches are deleted by <strong>DeletePatch</strong> explicitly. All other patches should be cleaned up when the device is destroyed.</p> </dt> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SHADEMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SHADEMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_SHADEMODE</unmanaged-short>	
        ShadeMode = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 9.0 and later versions only.</strong></p> <p>Determines the maximum number of instructions that the vertex shader assembler can execute.</p> <p>The driver uses a DWORD data type with a default value of D3DINFINITEINSTRUCTIONS (0xffffffff) to report the maximum number of vertex-shader instructions.	
        /// This maximum number depends on the version of the vertex shader that the display device supports as shown in the following table.</p> <table> <tr><th>Version</th><th>Maximum number</th></tr> <tr><td>earlier than 2_0</td><td>0</td></tr> <tr><td>2_0 and later</td><td>From 216 (0x0000ffff) to D3DINFINITEINSTRUCTIONS</td></tr> </table> <p>?</p> <p>D3DINFINITEINSTRUCTIONS represents a virtually unlimited amount.</p> <p>Valid values for this render state are numbers that are powers of 2; if the driver sets any other integer, the runtime uses the next nearest power of 2 number.</p> <p>The runtime sets the <strong>MaxVShaderInstructionsExecuted</strong> member of the <see cref="SharpDX.Direct3D9.Capabilities"/> structure to this maximum number.</p> </dt> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ZWRITEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ZWRITEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_ZWRITEENABLE</unmanaged-short>	
        ZWriteEnable = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <dl> <dt></dt> <dt> <p><strong>DirectX 9.0 and later versions only.</strong></p> <p>Determines the maximum number of instructions that the pixel shader assembler can execute.</p> <p>The driver uses a DWORD data type with a default value of D3DINFINITEINSTRUCTIONS (0xffffffff) to report the maximum number of pixel-shader instructions.	
        /// This maximum number depends on the version of the pixel shader that the display device supports as shown in the following table.</p> <table> <tr><th>Version</th><th>Maximum number</th></tr> <tr><td>earlier than 2_0</td><td>0</td></tr> <tr><td>2_0</td><td>From 96 to D3DINFINITEINSTRUCTIONS</td></tr> <tr><td>3_0 and later</td><td>From 216 (0x0000ffff) to D3DINFINITEINSTRUCTIONS</td></tr> </table> <p>?</p> <p>D3DINFINITEINSTRUCTIONS represents a virtually unlimited amount.</p> <p>Valid values for this render state are numbers that are powers of 2; if the driver sets any other integer, the runtime uses the next nearest power of 2 number.</p> <p>The runtime sets the <strong>MaxVShaderInstructionsExecuted</strong> member of the <see cref="SharpDX.Direct3D9.Capabilities"/> structure to this maximum number.</p> </dt> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ALPHATESTENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ALPHATESTENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_ALPHATESTENABLE</unmanaged-short>	
        AlphaTestEnable = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_LASTPIXEL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_LASTPIXEL</unmanaged>	
        /// <unmanaged-short>D3DRS_LASTPIXEL</unmanaged-short>	
        LastPixel = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SRCBLEND']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SRCBLEND</unmanaged>	
        /// <unmanaged-short>D3DRS_SRCBLEND</unmanaged-short>	
        SourceBlend = unchecked((int)19),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DESTBLEND']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DESTBLEND</unmanaged>	
        /// <unmanaged-short>D3DRS_DESTBLEND</unmanaged-short>	
        DestinationBlend = unchecked((int)20),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CULLMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CULLMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_CULLMODE</unmanaged-short>	
        CullMode = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ZFUNC']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ZFUNC</unmanaged>	
        /// <unmanaged-short>D3DRS_ZFUNC</unmanaged-short>	
        ZFunc = unchecked((int)23),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ALPHAREF']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ALPHAREF</unmanaged>	
        /// <unmanaged-short>D3DRS_ALPHAREF</unmanaged-short>	
        AlphaRef = unchecked((int)24),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ALPHAFUNC']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ALPHAFUNC</unmanaged>	
        /// <unmanaged-short>D3DRS_ALPHAFUNC</unmanaged-short>	
        AlphaFunc = unchecked((int)25),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DITHERENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DITHERENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_DITHERENABLE</unmanaged-short>	
        DitherEnable = unchecked((int)26),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ALPHABLENDENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ALPHABLENDENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_ALPHABLENDENABLE</unmanaged-short>	
        AlphaBlendEnable = unchecked((int)27),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGENABLE</unmanaged-short>	
        FogEnable = unchecked((int)28),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SPECULARENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SPECULARENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_SPECULARENABLE</unmanaged-short>	
        SpecularEnable = unchecked((int)29),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGCOLOR']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGCOLOR</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGCOLOR</unmanaged-short>	
        FogColor = unchecked((int)34),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGTABLEMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGTABLEMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGTABLEMODE</unmanaged-short>	
        FogTableMode = unchecked((int)35),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGSTART']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGSTART</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGSTART</unmanaged-short>	
        FogStart = unchecked((int)36),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGEND']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGEND</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGEND</unmanaged-short>	
        FogEnd = unchecked((int)37),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGDENSITY']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGDENSITY</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGDENSITY</unmanaged-short>	
        FogDensity = unchecked((int)38),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_RANGEFOGENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_RANGEFOGENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_RANGEFOGENABLE</unmanaged-short>	
        RangeFogEnable = unchecked((int)48),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILENABLE</unmanaged-short>	
        StencilEnable = unchecked((int)52),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILFAIL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILFAIL</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILFAIL</unmanaged-short>	
        StencilFail = unchecked((int)53),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILZFAIL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILZFAIL</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILZFAIL</unmanaged-short>	
        StencilZFail = unchecked((int)54),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILPASS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILPASS</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILPASS</unmanaged-short>	
        StencilPass = unchecked((int)55),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILFUNC']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILFUNC</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILFUNC</unmanaged-short>	
        StencilFunc = unchecked((int)56),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILREF']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILREF</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILREF</unmanaged-short>	
        StencilRef = unchecked((int)57),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILMASK']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILMASK</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILMASK</unmanaged-short>	
        StencilMask = unchecked((int)58),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_STENCILWRITEMASK']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_STENCILWRITEMASK</unmanaged>	
        /// <unmanaged-short>D3DRS_STENCILWRITEMASK</unmanaged-short>	
        StencilWriteMask = unchecked((int)59),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_TEXTUREFACTOR']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_TEXTUREFACTOR</unmanaged>	
        /// <unmanaged-short>D3DRS_TEXTUREFACTOR</unmanaged-short>	
        TextureFactor = unchecked((int)60),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP0']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP0</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP0</unmanaged-short>	
        Wrap0 = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP1']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP1</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP1</unmanaged-short>	
        Wrap1 = unchecked((int)129),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP2']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP2</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP2</unmanaged-short>	
        Wrap2 = unchecked((int)130),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP3']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP3</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP3</unmanaged-short>	
        Wrap3 = unchecked((int)131),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP4']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP4</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP4</unmanaged-short>	
        Wrap4 = unchecked((int)132),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP5']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP5</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP5</unmanaged-short>	
        Wrap5 = unchecked((int)133),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP6']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP6</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP6</unmanaged-short>	
        Wrap6 = unchecked((int)134),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP7']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP7</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP7</unmanaged-short>	
        Wrap7 = unchecked((int)135),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CLIPPING']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CLIPPING</unmanaged>	
        /// <unmanaged-short>D3DRS_CLIPPING</unmanaged-short>	
        Clipping = unchecked((int)136),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_LIGHTING']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_LIGHTING</unmanaged>	
        /// <unmanaged-short>D3DRS_LIGHTING</unmanaged-short>	
        Lighting = unchecked((int)137),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_AMBIENT']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_AMBIENT</unmanaged>	
        /// <unmanaged-short>D3DRS_AMBIENT</unmanaged-short>	
        Ambient = unchecked((int)139),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_FOGVERTEXMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_FOGVERTEXMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_FOGVERTEXMODE</unmanaged-short>	
        FogVertexMode = unchecked((int)140),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_COLORVERTEX']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_COLORVERTEX</unmanaged>	
        /// <unmanaged-short>D3DRS_COLORVERTEX</unmanaged-short>	
        ColorVertex = unchecked((int)141),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_LOCALVIEWER']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_LOCALVIEWER</unmanaged>	
        /// <unmanaged-short>D3DRS_LOCALVIEWER</unmanaged-short>	
        LocalViewer = unchecked((int)142),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_NORMALIZENORMALS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_NORMALIZENORMALS</unmanaged>	
        /// <unmanaged-short>D3DRS_NORMALIZENORMALS</unmanaged-short>	
        NormalizeNormals = unchecked((int)143),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DIFFUSEMATERIALSOURCE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DIFFUSEMATERIALSOURCE</unmanaged>	
        /// <unmanaged-short>D3DRS_DIFFUSEMATERIALSOURCE</unmanaged-short>	
        DiffuseMaterialSource = unchecked((int)145),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SPECULARMATERIALSOURCE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SPECULARMATERIALSOURCE</unmanaged>	
        /// <unmanaged-short>D3DRS_SPECULARMATERIALSOURCE</unmanaged-short>	
        SpecularMaterialSource = unchecked((int)146),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_AMBIENTMATERIALSOURCE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_AMBIENTMATERIALSOURCE</unmanaged>	
        /// <unmanaged-short>D3DRS_AMBIENTMATERIALSOURCE</unmanaged-short>	
        AmbientMaterialSource = unchecked((int)147),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_EMISSIVEMATERIALSOURCE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_EMISSIVEMATERIALSOURCE</unmanaged>	
        /// <unmanaged-short>D3DRS_EMISSIVEMATERIALSOURCE</unmanaged-short>	
        EmissiveMaterialSource = unchecked((int)148),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_VERTEXBLEND']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_VERTEXBLEND</unmanaged>	
        /// <unmanaged-short>D3DRS_VERTEXBLEND</unmanaged-short>	
        VertexBlend = unchecked((int)151),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CLIPPLANEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CLIPPLANEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_CLIPPLANEENABLE</unmanaged-short>	
        ClipPlaneEnable = unchecked((int)152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSIZE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSIZE</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSIZE</unmanaged-short>	
        PointSize = unchecked((int)154),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSIZE_MIN']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSIZE_MIN</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSIZE_MIN</unmanaged-short>	
        PointSizeMin = unchecked((int)155),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSPRITEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSPRITEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSPRITEENABLE</unmanaged-short>	
        PointSpriteEnable = unchecked((int)156),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSCALEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSCALEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSCALEENABLE</unmanaged-short>	
        PointScaleEnable = unchecked((int)157),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSCALE_A']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSCALE_A</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSCALE_A</unmanaged-short>	
        PointScaleA = unchecked((int)158),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSCALE_B']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSCALE_B</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSCALE_B</unmanaged-short>	
        PointScaleB = unchecked((int)159),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSCALE_C']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSCALE_C</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSCALE_C</unmanaged-short>	
        PointScaleC = unchecked((int)160),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_MULTISAMPLEANTIALIAS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_MULTISAMPLEANTIALIAS</unmanaged>	
        /// <unmanaged-short>D3DRS_MULTISAMPLEANTIALIAS</unmanaged-short>	
        MultisampleAntialias = unchecked((int)161),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_MULTISAMPLEMASK']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_MULTISAMPLEMASK</unmanaged>	
        /// <unmanaged-short>D3DRS_MULTISAMPLEMASK</unmanaged-short>	
        MultisampleMask = unchecked((int)162),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_PATCHEDGESTYLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_PATCHEDGESTYLE</unmanaged>	
        /// <unmanaged-short>D3DRS_PATCHEDGESTYLE</unmanaged-short>	
        PatchEdgeStyle = unchecked((int)163),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DEBUGMONITORTOKEN']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DEBUGMONITORTOKEN</unmanaged>	
        /// <unmanaged-short>D3DRS_DEBUGMONITORTOKEN</unmanaged-short>	
        DebugMonitorToken = unchecked((int)165),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POINTSIZE_MAX']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POINTSIZE_MAX</unmanaged>	
        /// <unmanaged-short>D3DRS_POINTSIZE_MAX</unmanaged-short>	
        PointSizeMax = unchecked((int)166),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_INDEXEDVERTEXBLENDENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_INDEXEDVERTEXBLENDENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_INDEXEDVERTEXBLENDENABLE</unmanaged-short>	
        IndexedVertexBlendEnable = unchecked((int)167),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_COLORWRITEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_COLORWRITEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_COLORWRITEENABLE</unmanaged-short>	
        ColorWriteEnable = unchecked((int)168),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_TWEENFACTOR']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_TWEENFACTOR</unmanaged>	
        /// <unmanaged-short>D3DRS_TWEENFACTOR</unmanaged-short>	
        TweenFactor = unchecked((int)170),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_BLENDOP']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_BLENDOP</unmanaged>	
        /// <unmanaged-short>D3DRS_BLENDOP</unmanaged-short>	
        BlendOperation = unchecked((int)171),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_POSITIONDEGREE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_POSITIONDEGREE</unmanaged>	
        /// <unmanaged-short>D3DRS_POSITIONDEGREE</unmanaged-short>	
        PositionDegree = unchecked((int)172),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_NORMALDEGREE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_NORMALDEGREE</unmanaged>	
        /// <unmanaged-short>D3DRS_NORMALDEGREE</unmanaged-short>	
        NormalDegree = unchecked((int)173),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SCISSORTESTENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SCISSORTESTENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_SCISSORTESTENABLE</unmanaged-short>	
        ScissorTestEnable = unchecked((int)174),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SLOPESCALEDEPTHBIAS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SLOPESCALEDEPTHBIAS</unmanaged>	
        /// <unmanaged-short>D3DRS_SLOPESCALEDEPTHBIAS</unmanaged-short>	
        SlopeScaleDepthBias = unchecked((int)175),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ANTIALIASEDLINEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ANTIALIASEDLINEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_ANTIALIASEDLINEENABLE</unmanaged-short>	
        AntialiasedLineEnable = unchecked((int)176),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_MINTESSELLATIONLEVEL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_MINTESSELLATIONLEVEL</unmanaged>	
        /// <unmanaged-short>D3DRS_MINTESSELLATIONLEVEL</unmanaged-short>	
        MinTessellationLevel = unchecked((int)178),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_MAXTESSELLATIONLEVEL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_MAXTESSELLATIONLEVEL</unmanaged>	
        /// <unmanaged-short>D3DRS_MAXTESSELLATIONLEVEL</unmanaged-short>	
        MaxTessellationLevel = unchecked((int)179),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ADAPTIVETESS_X']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ADAPTIVETESS_X</unmanaged>	
        /// <unmanaged-short>D3DRS_ADAPTIVETESS_X</unmanaged-short>	
        AdaptiveTessX = unchecked((int)180),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ADAPTIVETESS_Y']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ADAPTIVETESS_Y</unmanaged>	
        /// <unmanaged-short>D3DRS_ADAPTIVETESS_Y</unmanaged-short>	
        AdaptiveTessY = unchecked((int)181),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ADAPTIVETESS_Z']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ADAPTIVETESS_Z</unmanaged>	
        /// <unmanaged-short>D3DRS_ADAPTIVETESS_Z</unmanaged-short>	
        AdaptiveTessZ = unchecked((int)182),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ADAPTIVETESS_W']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ADAPTIVETESS_W</unmanaged>	
        /// <unmanaged-short>D3DRS_ADAPTIVETESS_W</unmanaged-short>	
        AdaptiveTessW = unchecked((int)183),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_ENABLEADAPTIVETESSELLATION']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_ENABLEADAPTIVETESSELLATION</unmanaged>	
        /// <unmanaged-short>D3DRS_ENABLEADAPTIVETESSELLATION</unmanaged-short>	
        EnableAdaptiveTessellation = unchecked((int)184),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_TWOSIDEDSTENCILMODE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_TWOSIDEDSTENCILMODE</unmanaged>	
        /// <unmanaged-short>D3DRS_TWOSIDEDSTENCILMODE</unmanaged-short>	
        TwoSidedStencilMode = unchecked((int)185),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CCW_STENCILFAIL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CCW_STENCILFAIL</unmanaged>	
        /// <unmanaged-short>D3DRS_CCW_STENCILFAIL</unmanaged-short>	
        CcwStencilFail = unchecked((int)186),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CCW_STENCILZFAIL']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CCW_STENCILZFAIL</unmanaged>	
        /// <unmanaged-short>D3DRS_CCW_STENCILZFAIL</unmanaged-short>	
        CcwStencilZFail = unchecked((int)187),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CCW_STENCILPASS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CCW_STENCILPASS</unmanaged>	
        /// <unmanaged-short>D3DRS_CCW_STENCILPASS</unmanaged-short>	
        CcwStencilPass = unchecked((int)188),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_CCW_STENCILFUNC']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_CCW_STENCILFUNC</unmanaged>	
        /// <unmanaged-short>D3DRS_CCW_STENCILFUNC</unmanaged-short>	
        CcwStencilFunc = unchecked((int)189),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_COLORWRITEENABLE1']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_COLORWRITEENABLE1</unmanaged>	
        /// <unmanaged-short>D3DRS_COLORWRITEENABLE1</unmanaged-short>	
        ColorWriteEnable1 = unchecked((int)190),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_COLORWRITEENABLE2']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_COLORWRITEENABLE2</unmanaged>	
        /// <unmanaged-short>D3DRS_COLORWRITEENABLE2</unmanaged-short>	
        ColorWriteEnable2 = unchecked((int)191),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_COLORWRITEENABLE3']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_COLORWRITEENABLE3</unmanaged>	
        /// <unmanaged-short>D3DRS_COLORWRITEENABLE3</unmanaged-short>	
        ColorWriteEnable3 = unchecked((int)192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_BLENDFACTOR']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_BLENDFACTOR</unmanaged>	
        /// <unmanaged-short>D3DRS_BLENDFACTOR</unmanaged-short>	
        BlendFactor = unchecked((int)193),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SRGBWRITEENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SRGBWRITEENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_SRGBWRITEENABLE</unmanaged-short>	
        SrgbWriteEnable = unchecked((int)194),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DEPTHBIAS']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DEPTHBIAS</unmanaged>	
        /// <unmanaged-short>D3DRS_DEPTHBIAS</unmanaged-short>	
        DepthBias = unchecked((int)195),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP8']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP8</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP8</unmanaged-short>	
        Wrap8 = unchecked((int)198),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP9']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP9</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP9</unmanaged-short>	
        Wrap9 = unchecked((int)199),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP10']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP10</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP10</unmanaged-short>	
        Wrap10 = unchecked((int)200),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP11']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP11</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP11</unmanaged-short>	
        Wrap11 = unchecked((int)201),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP12']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP12</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP12</unmanaged-short>	
        Wrap12 = unchecked((int)202),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP13']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP13</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP13</unmanaged-short>	
        Wrap13 = unchecked((int)203),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP14']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP14</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP14</unmanaged-short>	
        Wrap14 = unchecked((int)204),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_WRAP15']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_WRAP15</unmanaged>	
        /// <unmanaged-short>D3DRS_WRAP15</unmanaged-short>	
        Wrap15 = unchecked((int)205),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SEPARATEALPHABLENDENABLE']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SEPARATEALPHABLENDENABLE</unmanaged>	
        /// <unmanaged-short>D3DRS_SEPARATEALPHABLENDENABLE</unmanaged-short>	
        SeparateAlphaBlendEnable = unchecked((int)206),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_SRCBLENDALPHA']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_SRCBLENDALPHA</unmanaged>	
        /// <unmanaged-short>D3DRS_SRCBLENDALPHA</unmanaged-short>	
        SourceBlendAlpha = unchecked((int)207),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_DESTBLENDALPHA']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_DESTBLENDALPHA</unmanaged>	
        /// <unmanaged-short>D3DRS_DESTBLENDALPHA</unmanaged-short>	
        DestinationBlendAlpha = unchecked((int)208),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRS_BLENDOPALPHA']/*"/>	
        /// <msdn-id>ff549036</msdn-id>	
        /// <unmanaged>D3DRS_BLENDOPALPHA</unmanaged>	
        /// <unmanaged-short>D3DRS_BLENDOPALPHA</unmanaged-short>	
        BlendOperationAlpha = unchecked((int)209),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY']/*"/>	
    /// <unmanaged>D3DX_RESOURCE_RESIDENCY</unmanaged>	
    /// <unmanaged-short>D3DX_RESOURCE_RESIDENCY</unmanaged-short>	
    public enum ResourceResidency : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_RESIDENT']/*"/>	
        /// <unmanaged>D3DX_RESOURCE_RESIDENCY_RESIDENT</unmanaged>	
        /// <unmanaged-short>D3DX_RESOURCE_RESIDENCY_RESIDENT</unmanaged-short>	
        Resident = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
        /// <unmanaged>D3DX_RESOURCE_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
        /// <unmanaged-short>D3DX_RESOURCE_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged-short>	
        ResidentInSharedMemory = unchecked((int)141953142),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DX_RESOURCE_RESIDENCY_NOT_RESIDENT']/*"/>	
        /// <unmanaged>D3DX_RESOURCE_RESIDENCY_NOT_RESIDENT</unmanaged>	
        /// <unmanaged-short>D3DX_RESOURCE_RESIDENCY_NOT_RESIDENT</unmanaged-short>	
        NotResident = unchecked((int)141953141),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRESOURCETYPE']/*"/>	
    /// <unmanaged>D3DRESOURCETYPE</unmanaged>	
    /// <unmanaged-short>D3DRESOURCETYPE</unmanaged-short>	
    public enum ResourceType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_SURFACE']/*"/>	
        /// <unmanaged>D3DRTYPE_SURFACE</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_SURFACE</unmanaged-short>	
        Surface = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_VOLUME']/*"/>	
        /// <unmanaged>D3DRTYPE_VOLUME</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_VOLUME</unmanaged-short>	
        Volume = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_TEXTURE']/*"/>	
        /// <unmanaged>D3DRTYPE_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_TEXTURE</unmanaged-short>	
        Texture = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_VOLUMETEXTURE']/*"/>	
        /// <unmanaged>D3DRTYPE_VOLUMETEXTURE</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_VOLUMETEXTURE</unmanaged-short>	
        VolumeTexture = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_CUBETEXTURE']/*"/>	
        /// <unmanaged>D3DRTYPE_CUBETEXTURE</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_CUBETEXTURE</unmanaged-short>	
        CubeTexture = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_VERTEXBUFFER']/*"/>	
        /// <unmanaged>D3DRTYPE_VERTEXBUFFER</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_VERTEXBUFFER</unmanaged-short>	
        VertexBuffer = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DRTYPE_INDEXBUFFER']/*"/>	
        /// <unmanaged>D3DRTYPE_INDEXBUFFER</unmanaged>	
        /// <unmanaged-short>D3DRTYPE_INDEXBUFFER</unmanaged-short>	
        IndexBuffer = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>Sampler states define texture sampling operations such as texture addressing and texture filtering. Some sampler states set-up vertex processing, and some set-up pixel processing. Sampler states can be saved and restored using stateblocks (see State Blocks Save and Restore State (Direct3D 9)).</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMPLERSTATETYPE']/*"/>	
    /// <msdn-id>bb172602</msdn-id>	
    /// <unmanaged>D3DSAMPLERSTATETYPE</unmanaged>	
    /// <unmanaged-short>D3DSAMPLERSTATETYPE</unmanaged-short>	
    public enum SamplerState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_ADDRESSU']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_ADDRESSU</unmanaged>	
        /// <unmanaged-short>D3DSAMP_ADDRESSU</unmanaged-short>	
        AddressU = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_ADDRESSV']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_ADDRESSV</unmanaged>	
        /// <unmanaged-short>D3DSAMP_ADDRESSV</unmanaged-short>	
        AddressV = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_ADDRESSW']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_ADDRESSW</unmanaged>	
        /// <unmanaged-short>D3DSAMP_ADDRESSW</unmanaged-short>	
        AddressW = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_BORDERCOLOR']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_BORDERCOLOR</unmanaged>	
        /// <unmanaged-short>D3DSAMP_BORDERCOLOR</unmanaged-short>	
        BorderColor = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MAGFILTER']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MAGFILTER</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MAGFILTER</unmanaged-short>	
        MagFilter = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MINFILTER']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MINFILTER</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MINFILTER</unmanaged-short>	
        MinFilter = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MIPFILTER']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MIPFILTER</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MIPFILTER</unmanaged-short>	
        MipFilter = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MIPMAPLODBIAS']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MIPMAPLODBIAS</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MIPMAPLODBIAS</unmanaged-short>	
        MipMapLodBias = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MAXMIPLEVEL']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MAXMIPLEVEL</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MAXMIPLEVEL</unmanaged-short>	
        MaxMipLevel = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_MAXANISOTROPY']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_MAXANISOTROPY</unmanaged>	
        /// <unmanaged-short>D3DSAMP_MAXANISOTROPY</unmanaged-short>	
        MaxAnisotropy = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_SRGBTEXTURE']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_SRGBTEXTURE</unmanaged>	
        /// <unmanaged-short>D3DSAMP_SRGBTEXTURE</unmanaged-short>	
        SrgbTexture = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_ELEMENTINDEX']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_ELEMENTINDEX</unmanaged>	
        /// <unmanaged-short>D3DSAMP_ELEMENTINDEX</unmanaged-short>	
        ElementIndex = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMP_DMAPOFFSET']/*"/>	
        /// <msdn-id>bb172602</msdn-id>	
        /// <unmanaged>D3DSAMP_DMAPOFFSET</unmanaged>	
        /// <unmanaged-short>D3DSAMP_DMAPOFFSET</unmanaged-short>	
        DisplacementMapOffset = unchecked((int)13),			
    }
    
    /// <summary>	
    /// <p>Defines the sampler texture types for vertex shaders.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSAMPLER_TEXTURE_TYPE']/*"/>	
    /// <msdn-id>bb172603</msdn-id>	
    /// <unmanaged>D3DSAMPLER_TEXTURE_TYPE</unmanaged>	
    /// <unmanaged-short>D3DSAMPLER_TEXTURE_TYPE</unmanaged-short>	
    public enum SamplerTextureType : int {	
        
        /// <summary>	
        /// <dd> <p>Uninitialized value. The value of this element is D3DSP_TEXTURETYPE_SHIFT.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTT_UNKNOWN']/*"/>	
        /// <msdn-id>bb172603</msdn-id>	
        /// <unmanaged>D3DSTT_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D3DSTT_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Declaring a 2D texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 4.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTT_2D']/*"/>	
        /// <msdn-id>bb172603</msdn-id>	
        /// <unmanaged>D3DSTT_2D</unmanaged>	
        /// <unmanaged-short>D3DSTT_2D</unmanaged-short>	
        Texture2D = unchecked((int)268435456),			
        
        /// <summary>	
        /// <dd> <p>Declaring a cube texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 8.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTT_CUBE']/*"/>	
        /// <msdn-id>bb172603</msdn-id>	
        /// <unmanaged>D3DSTT_CUBE</unmanaged>	
        /// <unmanaged-short>D3DSTT_CUBE</unmanaged-short>	
        Cube = unchecked((int)402653184),			
        
        /// <summary>	
        /// <dd> <p>Declaring a volume texture. The value of this element is D3DSP_TEXTURETYPE_SHIFT * 16.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTT_VOLUME']/*"/>	
        /// <msdn-id>bb172603</msdn-id>	
        /// <unmanaged>D3DSTT_VOLUME</unmanaged>	
        /// <unmanaged-short>D3DSTT_VOLUME</unmanaged-short>	
        Volume = unchecked((int)536870912),			
    }
    
    /// <summary>	
    /// <p>Flags indicating the method the rasterizer uses to create an image on a surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used as a member in <strong><see cref="SharpDX.Direct3D9.DisplayModeFilter"/></strong> and <strong><see cref="SharpDX.Direct3D9.DisplayModeEx"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSCANLINEORDERING']/*"/>	
    /// <msdn-id>bb172604</msdn-id>	
    /// <unmanaged>D3DSCANLINEORDERING</unmanaged>	
    /// <unmanaged-short>D3DSCANLINEORDERING</unmanaged-short>	
    public enum ScanlineOrdering : int {	
        
        /// <summary>	
        /// <dd> <p>The image is created from the first scanline to the last without skipping any.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSCANLINEORDERING_UNKNOWN']/*"/>	
        /// <msdn-id>bb172604</msdn-id>	
        /// <unmanaged>D3DSCANLINEORDERING_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D3DSCANLINEORDERING_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The image is created using the interlaced method in which odd-numbered lines are drawn on odd-numbered passes and even lines are drawn on even-numbered passes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSCANLINEORDERING_PROGRESSIVE']/*"/>	
        /// <msdn-id>bb172604</msdn-id>	
        /// <unmanaged>D3DSCANLINEORDERING_PROGRESSIVE</unmanaged>	
        /// <unmanaged-short>D3DSCANLINEORDERING_PROGRESSIVE</unmanaged-short>	
        Progressive = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The image is created using the interlaced method in which odd-numbered lines are drawn on odd-numbered passes and even lines are drawn on even-numbered passes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSCANLINEORDERING_INTERLACED']/*"/>	
        /// <msdn-id>bb172604</msdn-id>	
        /// <unmanaged>D3DSCANLINEORDERING_INTERLACED</unmanaged>	
        /// <unmanaged-short>D3DSCANLINEORDERING_INTERLACED</unmanaged-short>	
        Interlaced = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>The following page provides a basic outline of key differences between Direct3D 9 and Direct3D 10. The outline below provides some insight to assist developers with Direct3D 9 experience to explore and relate to Direct3D 10.</p><p>Although the info in this topic compares Direct3D 9 with Direct3D 10, because Direct3D 11 builds on the improvements made in Direct3D 10 and 10.1, you also need this info to migrate from Direct3D 9 to Direct3D 11. For info about moving beyond Direct3D 10 to Direct3D 11, see Migrating to Direct3D 11.</p><p> </p><ul> <li>Overview<ul> <li>Removal</li> <li>Device</li> </ul> </li> <li>Engine<ul> <li>Direct</li> </ul> </li> <li>Tricks<ul> <li>Overriding</li> <li>Resolving</li> <li>Simulating</li> </ul> </li> <li>Driving<ul> <li>Resource</li> <li>Views</li> <li>Static</li> <li>Direct3D</li> <li>HLSL</li> <li>Shader</li> <li>Creation</li> <li>Shader</li> <li>Input</li> <li>Impact</li> <li>Vertex</li> <li>State</li> </ul> </li> <li>Porting<ul> <li>File</li> <li>Mapping</li> </ul> </li> <li>Porting<ul> <li>Direct3D</li> <li>Shader</li> <li>HLSL</li> <li>Constant</li> <li>User</li> </ul> </li> <li>Additional<ul> <li>Integers</li> <li>Mouse</li> <li>Mapping</li> <li>Reference</li> <li>Test</li> <li>StretchRect</li> </ul> </li> <li>Additional</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPSHADECAPS']/*"/>	
    /// <msdn-id>bb205073</msdn-id>	
    /// <unmanaged>D3DPSHADECAPS</unmanaged>	
    /// <unmanaged-short>D3DPSHADECAPS</unmanaged-short>	
    [Flags]
    public enum ShadeCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPSHADECAPS_COLORGOURAUDRGB']/*"/>	
        /// <msdn-id>bb205073</msdn-id>	
        /// <unmanaged>D3DPSHADECAPS_COLORGOURAUDRGB</unmanaged>	
        /// <unmanaged-short>D3DPSHADECAPS_COLORGOURAUDRGB</unmanaged-short>	
        ColorGouraudRgb = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPSHADECAPS_SPECULARGOURAUDRGB']/*"/>	
        /// <msdn-id>bb205073</msdn-id>	
        /// <unmanaged>D3DPSHADECAPS_SPECULARGOURAUDRGB</unmanaged>	
        /// <unmanaged-short>D3DPSHADECAPS_SPECULARGOURAUDRGB</unmanaged-short>	
        SpecularGouraudRgb = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPSHADECAPS_ALPHAGOURAUDBLEND']/*"/>	
        /// <msdn-id>bb205073</msdn-id>	
        /// <unmanaged>D3DPSHADECAPS_ALPHAGOURAUDBLEND</unmanaged>	
        /// <unmanaged-short>D3DPSHADECAPS_ALPHAGOURAUDBLEND</unmanaged-short>	
        AlphaGouraudBlend = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPSHADECAPS_FOGGOURAUD']/*"/>	
        /// <msdn-id>bb205073</msdn-id>	
        /// <unmanaged>D3DPSHADECAPS_FOGGOURAUD</unmanaged>	
        /// <unmanaged-short>D3DPSHADECAPS_FOGGOURAUD</unmanaged-short>	
        FogGouraud = unchecked((int)524288),			
    }
    
    /// <summary>	
    /// <p>Defines constants that describe the supported shading modes.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The first vertex of a triangle for flat shading mode is defined in the following manner. </p><ul> <li>For a triangle list, the first vertex of the triangle  i is  i * 3.</li> <li>For a triangle strip, the first vertex of the triangle    i  is vertex  i.</li> <li>For a triangle fan, the first vertex of the triangle  i is vertex  i + 1.</li> </ul><p>The members of this enumerated type define the vales for the <see cref="SharpDX.Direct3D9.RenderState.ShadeMode"/> render state.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSHADEMODE']/*"/>	
    /// <msdn-id>bb172605</msdn-id>	
    /// <unmanaged>D3DSHADEMODE</unmanaged>	
    /// <unmanaged-short>D3DSHADEMODE</unmanaged-short>	
    public enum ShadeMode : int {	
        
        /// <summary>	
        /// <dd> <p>Flat shading mode. The color and specular component of the first vertex in the triangle are used to determine the color and specular component of the face. These colors remain constant across the triangle; that is, they are not interpolated. The specular alpha is interpolated. See Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSHADE_FLAT']/*"/>	
        /// <msdn-id>bb172605</msdn-id>	
        /// <unmanaged>D3DSHADE_FLAT</unmanaged>	
        /// <unmanaged-short>D3DSHADE_FLAT</unmanaged-short>	
        Flat = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Gouraud shading mode. The color and specular components of the face are determined by a linear interpolation between all three of the triangle's vertices. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSHADE_GOURAUD']/*"/>	
        /// <msdn-id>bb172605</msdn-id>	
        /// <unmanaged>D3DSHADE_GOURAUD</unmanaged>	
        /// <unmanaged-short>D3DSHADE_GOURAUD</unmanaged-short>	
        Gouraud = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Not supported. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSHADE_PHONG']/*"/>	
        /// <msdn-id>bb172605</msdn-id>	
        /// <unmanaged>D3DSHADE_PHONG</unmanaged>	
        /// <unmanaged-short>D3DSHADE_PHONG</unmanaged-short>	
        Phong = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.Direct3D9.ShaderFlags"/></strong> flags are used for parsing, compiling, or assembling shaders.</p><p> </p><p><strong>Parser flags</strong></p><p>Parse time flags are only used by the effect system (before effect compilation) when you create an effect compiler. For example, you could create a compiler object with <strong><see cref="SharpDX.Direct3D9.ShaderFlags.PackMatrixColumnMajor"/></strong>, and then use that compiler object repeatedly with different compiler flags to generate specialized code.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The effect system will use <strong>parser flags</strong> when called by the following functions:</p><ul> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShader"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShaderFromFileW"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShaderFromResourceW"/></strong> </li> <li> <strong>CompileEffect</strong> </li> </ul><p>The effect system will use <strong>compiler flags</strong> when called by the following functions:</p><ul> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShader"/></strong> (or <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShaderFromFileW"/></strong> or <strong><see cref="SharpDX.Direct3D9.D3DX9.CompileShaderFromResourceW"/></strong>)</li> <li> <strong>CompileEffect</strong> (or <strong>CompileShader</strong>)</li> </ul><p>In addition, you can use <strong>compiler flags</strong> when creating an effect by calling <strong><see cref="SharpDX.Direct3D9.D3DX9.CreateEffect"/></strong> (or <strong><see cref="SharpDX.Direct3D9.D3DX9.CreateEffectFromFileW"/></strong> or <strong><see cref="SharpDX.Direct3D9.D3DX9.CreateEffectFromResourceW"/></strong>).</p><ul> <li>If you pass in an uncompiled .fx file, the effect system will use the flag input parameter during compilation.</li> <li>If you pass in a compiled effect, the effect system will ignore the compiler flags since they are not needed to load the effect.</li> </ul><p>The effect system will use <strong>assembler flags</strong> when called by the following functions:</p><ul> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.AssembleShader"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.AssembleShaderFromFileW"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D9.D3DX9.AssembleShaderFromResourceW"/></strong> </li> </ul><p>Applying <strong>compiler flags</strong> or <strong>assembler flags</strong> to the incorrect API will fail shader validation. Check the Direct3D error code return value from the function (with the DirectX Error Lookup Tool) to help track down this error.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER']/*"/>	
    /// <msdn-id>bb205441</msdn-id>	
    /// <unmanaged>D3DXSHADER</unmanaged>	
    /// <unmanaged-short>D3DXSHADER</unmanaged-short>	
    [Flags]
    public enum ShaderFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_DEBUG']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_DEBUG</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_DEBUG</unmanaged-short>	
        Debug = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_SKIPVALIDATION']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_SKIPVALIDATION</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_SKIPVALIDATION</unmanaged-short>	
        SkipValidation = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_SKIPOPTIMIZATION']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_SKIPOPTIMIZATION</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_SKIPOPTIMIZATION</unmanaged-short>	
        SkipOptimization = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_PACKMATRIX_ROWMAJOR']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_PACKMATRIX_ROWMAJOR</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_PACKMATRIX_ROWMAJOR</unmanaged-short>	
        PackMatrixRowMajor = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_PACKMATRIX_COLUMNMAJOR']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_PACKMATRIX_COLUMNMAJOR</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_PACKMATRIX_COLUMNMAJOR</unmanaged-short>	
        PackMatrixColumnMajor = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_PARTIALPRECISION']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_PARTIALPRECISION</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_PARTIALPRECISION</unmanaged-short>	
        PartialPrecision = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_FORCE_VS_SOFTWARE_NOOPT</unmanaged-short>	
        ForceVSSoftwareNoOpt = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_FORCE_PS_SOFTWARE_NOOPT</unmanaged-short>	
        ForcePSSoftwareNoOpt = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_NO_PRESHADER']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_NO_PRESHADER</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_NO_PRESHADER</unmanaged-short>	
        NoPreshader = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_AVOID_FLOW_CONTROL']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_AVOID_FLOW_CONTROL</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_AVOID_FLOW_CONTROL</unmanaged-short>	
        AvoidFlowControl = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_PREFER_FLOW_CONTROL']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_PREFER_FLOW_CONTROL</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_PREFER_FLOW_CONTROL</unmanaged-short>	
        PreferFlowControl = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged-short>	
        EnableBackwardsCompatibility = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_IEEE_STRICTNESS']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_IEEE_STRICTNESS</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_IEEE_STRICTNESS</unmanaged-short>	
        IeeeStrictness = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_USE_LEGACY_D3DX9_31_DLL']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_USE_LEGACY_D3DX9_31_DLL</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_USE_LEGACY_D3DX9_31_DLL</unmanaged-short>	
        UseLegacyD3DX9_31Dll = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL0']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL0</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_OPTIMIZATION_LEVEL0</unmanaged-short>	
        OptimizationLevel0 = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL1']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL1</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_OPTIMIZATION_LEVEL1</unmanaged-short>	
        OptimizationLevel1 = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL2']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL2</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_OPTIMIZATION_LEVEL2</unmanaged-short>	
        OptimizationLevel2 = unchecked((int)49152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSHADER_OPTIMIZATION_LEVEL3']/*"/>	
        /// <msdn-id>bb205441</msdn-id>	
        /// <unmanaged>D3DXSHADER_OPTIMIZATION_LEVEL3</unmanaged>	
        /// <unmanaged-short>D3DXSHADER_OPTIMIZATION_LEVEL3</unmanaged-short>	
        OptimizationLevel3 = unchecked((int)32768),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>The following flags are used to specify sprite rendering options to the flags parameter in the <strong>Begin</strong> method:</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE']/*"/>	
    /// <msdn-id>bb205466</msdn-id>	
    /// <unmanaged>D3DXSPRITE</unmanaged>	
    /// <unmanaged-short>D3DXSPRITE</unmanaged-short>	
    [Flags]
    public enum SpriteFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_DONOTSAVESTATE']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_DONOTSAVESTATE</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_DONOTSAVESTATE</unmanaged-short>	
        DoNotSaveState = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_DONOTMODIFY_RENDERSTATE']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_DONOTMODIFY_RENDERSTATE</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_DONOTMODIFY_RENDERSTATE</unmanaged-short>	
        DoNotModifyRenderState = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_OBJECTSPACE']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_OBJECTSPACE</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_OBJECTSPACE</unmanaged-short>	
        ObjectSpace = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_BILLBOARD']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_BILLBOARD</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_BILLBOARD</unmanaged-short>	
        Billboard = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_ALPHABLEND']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_ALPHABLEND</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_ALPHABLEND</unmanaged-short>	
        AlphaBlend = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_SORT_TEXTURE']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_SORT_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_SORT_TEXTURE</unmanaged-short>	
        SortTexture = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_SORT_DEPTH_FRONTTOBACK']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_SORT_DEPTH_FRONTTOBACK</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_SORT_DEPTH_FRONTTOBACK</unmanaged-short>	
        SortDepthFrontToBack = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_SORT_DEPTH_BACKTOFRONT']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_SORT_DEPTH_BACKTOFRONT</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_SORT_DEPTH_BACKTOFRONT</unmanaged-short>	
        SortDepthBackToFront = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXSPRITE_DO_NOT_ADDREF_TEXTURE']/*"/>	
        /// <msdn-id>bb205466</msdn-id>	
        /// <unmanaged>D3DXSPRITE_DO_NOT_ADDREF_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DXSPRITE_DO_NOT_ADDREF_TEXTURE</unmanaged-short>	
        DoNotAddRefTexture = unchecked((int)256),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Predefined sets of pipeline state used by state blocks (see State Blocks Save and Restore State (Direct3D 9)).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>As the following diagram shows, vertex and pixel state are both subsets of device state.</p><p></p><p>There are only a few states that are considered both vertex and pixel state. These states are:</p><ul> <li>Render state: <see cref="SharpDX.Direct3D9.RenderState.FogDensity"/></li> <li>Render state: <see cref="SharpDX.Direct3D9.RenderState.FogStart"/></li> <li>Render state: <see cref="SharpDX.Direct3D9.RenderState.FogEnd"/></li> <li>Texture state: <see cref="SharpDX.Direct3D9.TextureStage.TexCoordIndex"/></li> <li>Texture state: <see cref="SharpDX.Direct3D9.TextureStage.TextureTransformFlags"/></li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTATEBLOCKTYPE']/*"/>	
    /// <msdn-id>bb172608</msdn-id>	
    /// <unmanaged>D3DSTATEBLOCKTYPE</unmanaged>	
    /// <unmanaged-short>D3DSTATEBLOCKTYPE</unmanaged-short>	
    public enum StateBlockType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSBT_ALL']/*"/>	
        /// <msdn-id>bb172608</msdn-id>	
        /// <unmanaged>D3DSBT_ALL</unmanaged>	
        /// <unmanaged-short>D3DSBT_ALL</unmanaged-short>	
        All = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSBT_PIXELSTATE']/*"/>	
        /// <msdn-id>bb172608</msdn-id>	
        /// <unmanaged>D3DSBT_PIXELSTATE</unmanaged>	
        /// <unmanaged-short>D3DSBT_PIXELSTATE</unmanaged-short>	
        PixelState = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSBT_VERTEXSTATE']/*"/>	
        /// <msdn-id>bb172608</msdn-id>	
        /// <unmanaged>D3DSBT_VERTEXSTATE</unmanaged>	
        /// <unmanaged-short>D3DSBT_VERTEXSTATE</unmanaged-short>	
        VertexState = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Driver stencil capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS']/*"/>	
    /// <msdn-id>bb172609</msdn-id>	
    /// <unmanaged>D3DSTENCILCAPS</unmanaged>	
    /// <unmanaged-short>D3DSTENCILCAPS</unmanaged-short>	
    [Flags]
    public enum StencilCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_KEEP']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_KEEP</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_KEEP</unmanaged-short>	
        Keep = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_ZERO']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_ZERO</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_ZERO</unmanaged-short>	
        Zero = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_REPLACE']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_REPLACE</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_REPLACE</unmanaged-short>	
        Replace = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_INCRSAT']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_INCRSAT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_INCRSAT</unmanaged-short>	
        IncrementClamp = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_DECRSAT']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_DECRSAT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_DECRSAT</unmanaged-short>	
        DecrementClamp = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_INVERT']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_INVERT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_INVERT</unmanaged-short>	
        Invert = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_INCR']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_INCR</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_INCR</unmanaged-short>	
        Increment = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_DECR']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_DECR</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_DECR</unmanaged-short>	
        Decrement = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILCAPS_TWOSIDED']/*"/>	
        /// <msdn-id>bb172609</msdn-id>	
        /// <unmanaged>D3DSTENCILCAPS_TWOSIDED</unmanaged>	
        /// <unmanaged-short>D3DSTENCILCAPS_TWOSIDED</unmanaged-short>	
        TwoSided = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p>Defines stencil-buffer operations.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Stencil-buffer entries are integer values ranging from 0 through 2n - 1, where n is the bit depth of the stencil buffer.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP']/*"/>	
    /// <msdn-id>bb172610</msdn-id>	
    /// <unmanaged>D3DSTENCILOP</unmanaged>	
    /// <unmanaged-short>D3DSTENCILOP</unmanaged-short>	
    public enum StencilOperation : int {	
        
        /// <summary>	
        /// <dd> <p>Do not update the entry in the stencil buffer. This is the default value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_KEEP']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_KEEP</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_KEEP</unmanaged-short>	
        Keep = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Set the stencil-buffer entry to 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_ZERO']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_ZERO</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_ZERO</unmanaged-short>	
        Zero = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Replace the stencil-buffer entry with a reference value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_REPLACE']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_REPLACE</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_REPLACE</unmanaged-short>	
        Replace = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Increment the stencil-buffer entry, clamping to the maximum value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_INCRSAT']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_INCRSAT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_INCRSAT</unmanaged-short>	
        IncrementSaturate = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Decrement the stencil-buffer entry, clamping to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_DECRSAT']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_DECRSAT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_DECRSAT</unmanaged-short>	
        DecrementSaturate = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Invert the bits in the stencil-buffer entry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_INVERT']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_INVERT</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_INVERT</unmanaged-short>	
        Invert = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_INCR']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_INCR</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_INCR</unmanaged-short>	
        Increment = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTENCILOP_DECR']/*"/>	
        /// <msdn-id>bb172610</msdn-id>	
        /// <unmanaged>D3DSTENCILOP_DECR</unmanaged>	
        /// <unmanaged-short>D3DSTENCILOP_DECR</unmanaged-short>	
        Decrement = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Given a scene that contains many objects that use the same geometry, you can draw many instances of that geometry at different orientations, sizes, colors, and so on with dramatically better performance by reducing the amount of data you need to supply to the renderer.</p><p>This can be accomplished through the use of two techniques: the first for drawing indexed geometry and the second for non-indexed geometry. Both techniques use two vertex buffers: one to supply geometry data and one to supply per-object instance data. The instance data can be a wide variety of information such as a transform, color data, or lighting data - basically anything that you can describe in a vertex declaration. Drawing many instances of geometry with these techniques can dramatically reduce the amount of data sent to the renderer.</p><p> </p><ul> <li>Drawing<ul> <li>Indexed</li> </ul> </li> <li>Drawing<ul> <li>Non-Indexed</li> </ul> </li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTREAMSOURCE']/*"/>	
    /// <msdn-id>bb173349</msdn-id>	
    /// <unmanaged>D3DSTREAMSOURCE</unmanaged>	
    /// <unmanaged-short>D3DSTREAMSOURCE</unmanaged-short>	
    public enum StreamSource : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTREAMSOURCE_INDEXEDDATA']/*"/>	
        /// <msdn-id>bb173349</msdn-id>	
        /// <unmanaged>D3DSTREAMSOURCE_INDEXEDDATA</unmanaged>	
        /// <unmanaged-short>D3DSTREAMSOURCE_INDEXEDDATA</unmanaged-short>	
        IndexedData = unchecked((int)1073741824),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSTREAMSOURCE_INSTANCEDATA']/*"/>	
        /// <msdn-id>bb173349</msdn-id>	
        /// <unmanaged>D3DSTREAMSOURCE_INSTANCEDATA</unmanaged>	
        /// <unmanaged-short>D3DSTREAMSOURCE_INSTANCEDATA</unmanaged-short>	
        InstanceData = unchecked((int)-2147483648),			
    }
    
    /// <summary>	
    /// <p>Defines swap effects.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The state of the back buffer after a call to Present is well-defined by each of these swap effects, and whether the Direct3D device was created with a full-screen swap chain or a windowed swap chain has no effect on this state. In particular, the <see cref="SharpDX.Direct3D9.SwapEffect.Flip"/> swap effect operates the same whether windowed or full-screen, and the Direct3D runtime guarantees this by creating extra buffers. As a result, it is recommended that applications use <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> whenever possible to avoid any such penalties. This is because this swap effect will always be the most efficient in terms of memory consumption and performance.</p><p>Applications that use <see cref="SharpDX.Direct3D9.SwapEffect.Flip"/> or <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> should not expect full-screen destination alpha to work. This means that the <see cref="SharpDX.Direct3D9.RenderState.DestinationBlend"/> render state will not work as expected because full-screen swap chains with these swap effects do not have an explicit pixel format from the driver's point of view. The driver infers that they should take on the display format, which does not have an alpha channel. To work around this, take the following steps: </p><ul> <li>Use <see cref="SharpDX.Direct3D9.SwapEffect.Copy"/>.</li> <li>Check the <see cref="SharpDX.Direct3D9.Caps3.AlphaFullScreenFlipOrDiscard"/> flag in the Caps3 member of the <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong> structure. This flag indicates whether the driver can do alpha blending when <see cref="SharpDX.Direct3D9.SwapEffect.Flip"/> or <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> is used.</li> <li>Applications using flip mode swap effect (<see cref="SharpDX.Direct3D9.SwapEffect.FlipEx"/>) should call <strong>PresentEx</strong> after a window resize or region change to ensure that the display content is updated.</li> </ul><p>An invisible window cannot receive user-mode events; furthermore, an invisible-fullscreen window will interfere with the presentation of another applications' windowed-mode window. Therefore, each application needs to ensure that a device window is visible when a swapchain is presented in fullscreen mode.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT']/*"/>	
    /// <msdn-id>bb172612</msdn-id>	
    /// <unmanaged>D3DSWAPEFFECT</unmanaged>	
    /// <unmanaged-short>D3DSWAPEFFECT</unmanaged-short>	
    public enum SwapEffect : int {	
        
        /// <summary>	
        /// <dd> <p>When a swap chain is created with a swap effect of <see cref="SharpDX.Direct3D9.SwapEffect.Flip"/> or  <see cref="SharpDX.Direct3D9.SwapEffect.Copy"/>, the runtime will guarantee that an <strong><see cref="SharpDX.Direct3D9.Device.Present"/></strong> operation will not affect the content of any of the back buffers. Unfortunately, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application may use the <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> swap effect to avoid these overheads and to enable the display driver to select the most efficient presentation technique for the swap chain. This is also the only swap effect that may be used when specifying a value other than <see cref="SharpDX.Direct3D9.MultisampleType.None"/> for the MultiSampleType member of <strong><see cref="SharpDX.Direct3D9.PresentParameters"/></strong>.</p> <p>Like a swap chain that uses <see cref="SharpDX.Direct3D9.SwapEffect.Flip"/>, a swap chain that uses <see cref="SharpDX.Direct3D9.SwapEffect.Discard"/> might include more than one back buffer, any of which may be accessed using <strong><see cref="SharpDX.Direct3D9.Device.GetBackBuffer"/></strong> or <strong><see cref="SharpDX.Direct3D9.SwapChain.GetBackBuffer"/></strong>. The swap chain is best envisaged as a queue in which 0 always indexes the back buffer that will be displayed by the next Present operation and from which buffers are discarded when they have been displayed.</p> <p>An application that uses this swap effect cannot make any assumptions about the contents of a discarded back buffer and should therefore update an entire back buffer before invoking a Present operation that would display it. Although this is not enforced, the debug version of the runtime will overwrite the contents of discarded back buffers with random data to enable developers to verify that their applications are updating the entire back buffer surfaces correctly.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT_DISCARD']/*"/>	
        /// <msdn-id>bb172612</msdn-id>	
        /// <unmanaged>D3DSWAPEFFECT_DISCARD</unmanaged>	
        /// <unmanaged-short>D3DSWAPEFFECT_DISCARD</unmanaged-short>	
        Discard = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The swap chain might include multiple back buffers and is best envisaged as a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When Present is invoked, the queue is "rotated" so that the front buffer becomes back buffer (n - 1), while the back buffer 0 becomes the new front buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT_FLIP']/*"/>	
        /// <msdn-id>bb172612</msdn-id>	
        /// <unmanaged>D3DSWAPEFFECT_FLIP</unmanaged>	
        /// <unmanaged-short>D3DSWAPEFFECT_FLIP</unmanaged-short>	
        Flip = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>This swap effect may be specified only for a swap chain comprising a single back buffer. Whether the swap chain is windowed or full-screen, the runtime will guarantee the semantics implied by a copy-based Present operation, namely that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based Present operation would. </p> <p>For a full-screen swap chain, the runtime uses a combination of flip operations and copy operations, supported if necessary by hidden back buffers, to accomplish the Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the <see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/> flag is the only exception. (Refer to the description of the <strong>PresentationIntervals</strong> member of the <strong><see cref="SharpDX.Direct3D9.PresentParameters"/></strong> structure.) In this case, a Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT_COPY']/*"/>	
        /// <msdn-id>bb172612</msdn-id>	
        /// <unmanaged>D3DSWAPEFFECT_COPY</unmanaged>	
        /// <unmanaged-short>D3DSWAPEFFECT_COPY</unmanaged-short>	
        Copy = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Use a dedicated area of video memory that can be overlayed on the primary surface. No copy is performed when the overlay is displayed.  The overlay operation is performed in hardware, without modifying the data in the primary surface.</p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p><see cref="SharpDX.Direct3D9.SwapEffect.Overlay"/> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT_OVERLAY']/*"/>	
        /// <msdn-id>bb172612</msdn-id>	
        /// <unmanaged>D3DSWAPEFFECT_OVERLAY</unmanaged>	
        /// <unmanaged-short>D3DSWAPEFFECT_OVERLAY</unmanaged-short>	
        Overlay = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Designates when an application is adopting flip mode, during which time an application's frame is passed instead of copied to the Desktop Window Manager(DWM) for composition when the application is presenting in windowed mode. Flip mode allows an application to more efficiently use memory bandwidth as well as enabling an application to take advantage of full-screen-present statistics. Flip mode does not affect full-screen behavior. A sample application that uses <see cref="SharpDX.Direct3D9.Present.ForceImmediate"/> and <see cref="SharpDX.Direct3D9.SwapEffect.FlipEx"/> is the D3D9ExFlipEx sample on the MSDN Code Gallery.</p> <p><strong>Note</strong>??If you create a swap chain with <see cref="SharpDX.Direct3D9.SwapEffect.FlipEx"/>, you can't override the <strong>hDeviceWindow</strong> member of the <strong><see cref="SharpDX.Direct3D9.PresentParameters"/></strong> structure when you present a new frame for display. That is, you must pass <strong><c>null</c></strong> to the <em>hDestWindowOverride</em> parameter of <strong><see cref="SharpDX.Direct3D9.DeviceEx.PresentEx"/></strong> to instruct the runtime to use the <strong>hDeviceWindow</strong> member of <strong><see cref="SharpDX.Direct3D9.PresentParameters"/></strong> for the presentation.</p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p><see cref="SharpDX.Direct3D9.SwapEffect.FlipEx"/> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DSWAPEFFECT_FLIPEX']/*"/>	
        /// <msdn-id>bb172612</msdn-id>	
        /// <unmanaged>D3DSWAPEFFECT_FLIPEX</unmanaged>	
        /// <unmanaged-short>D3DSWAPEFFECT_FLIPEX</unmanaged-short>	
        FlipEx = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Defines settings used for mesh tangent frame computations.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT']/*"/>	
    /// <msdn-id>bb205467</msdn-id>	
    /// <unmanaged>D3DXTANGENT</unmanaged>	
    /// <unmanaged-short>D3DXTANGENT</unmanaged-short>	
    [Flags]
    public enum TangentOptions : int {	
        
        /// <summary>	
        /// <dd> <p>Texture coordinate values in the u direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WRAP_U']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WRAP_U</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WRAP_U</unmanaged-short>	
        WrapU = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Texture coordinate values in the v direction are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WRAP_V']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WRAP_V</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WRAP_V</unmanaged-short>	
        WrapV = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Texture coordinate values in both u and v directions are between 0 and 1. In this case a texture coordinate set will be chosen that minimizes the perimeter of the triangle. See Texture Wrapping (Direct3D 9).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WRAP_UV']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WRAP_UV</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WRAP_UV</unmanaged-short>	
        WrapUV = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Do not normalize partial derivatives with respect to texture coordinates. If not normalized, the scale of the partial derivatives is proportional to the scale of the 3D model divided by the scale of the triangle in (u, v) space. This scale value provides a measure of how much the texture is stretched in a given direction. The resulting vector length is a weighted sum of the lengths of the partial derivatives.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_DONT_NORMALIZE_PARTIALS']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_DONT_NORMALIZE_PARTIALS</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_DONT_NORMALIZE_PARTIALS</unmanaged-short>	
        DontNormalizePartials = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Do not transform texture coordinates to orthogonal Cartesian coordinates. Mutually exclusive with <see cref="SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/> and <see cref="SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_DONT_ORTHOGONALIZE']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_DONT_ORTHOGONALIZE</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_DONT_ORTHOGONALIZE</unmanaged-short>	
        DontOrthogonalize = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Compute the partial derivative with respect to texture coordinate v independently for each vertex, and then compute the partial derivative with respect to u as the cross product of the partial derivative with respect to v and the normal vector. Mutually exclusive with <see cref="SharpDX.Direct3D9.TangentOptions.DontOrthogonalize"/> and <see cref="SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromU"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_ORTHOGONALIZE_FROM_V']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_ORTHOGONALIZE_FROM_V</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_ORTHOGONALIZE_FROM_V</unmanaged-short>	
        OrthogonalizeFromV = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Compute the partial derivative with respect to texture coordinate u independently for each vertex, and then compute the partial derivative with respect to v as  the cross product of the normal vector and the partial derivative with respect to u. Mutually exclusive with <see cref="SharpDX.Direct3D9.TangentOptions.DontOrthogonalize"/> and <see cref="SharpDX.Direct3D9.TangentOptions.OrthogonalizeFromV"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_ORTHOGONALIZE_FROM_U']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_ORTHOGONALIZE_FROM_U</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_ORTHOGONALIZE_FROM_U</unmanaged-short>	
        OrthogonalizeFromU = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p>Weight the direction of the computed per-vertex normal or partial derivative vector according to the areas of triangles attached to that vertex. Mutually exclusive with <see cref="SharpDX.Direct3D9.TangentOptions.WeightEqual"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WEIGHT_BY_AREA']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WEIGHT_BY_AREA</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WEIGHT_BY_AREA</unmanaged-short>	
        WeightByArea = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p>Compute a unit-length normal vector for each triangle of the input mesh. Mutually exclusive with <see cref="SharpDX.Direct3D9.TangentOptions.WeightByArea"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WEIGHT_EQUAL']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WEIGHT_EQUAL</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WEIGHT_EQUAL</unmanaged-short>	
        WeightEqual = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Vertices are ordered in a clockwise direction around each triangle. The computed normal vector direction is therefore inverted 180 degrees from the direction computed using counterclockwise vertex ordering.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_WIND_CW']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_WIND_CW</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_WIND_CW</unmanaged-short>	
        WindCW = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p>Compute the per-vertex normal vector for each triangle of the input mesh, and ignore any normal vectors already in the input mesh.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_CALCULATE_NORMALS']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_CALCULATE_NORMALS</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_CALCULATE_NORMALS</unmanaged-short>	
        CalculateNormals = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p>The results are stored in the original input mesh, and the output mesh is not used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTANGENT_GENERATE_IN_PLACE']/*"/>	
        /// <msdn-id>bb205467</msdn-id>	
        /// <unmanaged>D3DXTANGENT_GENERATE_IN_PLACE</unmanaged>	
        /// <unmanaged-short>D3DXTANGENT_GENERATE_IN_PLACE</unmanaged-short>	
        GenerateInPlace = unchecked((int)1024),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines constants that describe the supported texture-addressing modes.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXTUREADDRESS']/*"/>	
    /// <msdn-id>bb172614</msdn-id>	
    /// <unmanaged>D3DTEXTUREADDRESS</unmanaged>	
    /// <unmanaged-short>D3DTEXTUREADDRESS</unmanaged-short>	
    public enum TextureAddress : int {	
        
        /// <summary>	
        /// <dd> <p>Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTADDRESS_WRAP']/*"/>	
        /// <msdn-id>bb172614</msdn-id>	
        /// <unmanaged>D3DTADDRESS_WRAP</unmanaged>	
        /// <unmanaged-short>D3DTADDRESS_WRAP</unmanaged-short>	
        Wrap = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Similar to <see cref="SharpDX.Direct3D9.TextureAddress.Wrap"/>, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTADDRESS_MIRROR']/*"/>	
        /// <msdn-id>bb172614</msdn-id>	
        /// <unmanaged>D3DTADDRESS_MIRROR</unmanaged>	
        /// <unmanaged-short>D3DTADDRESS_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTADDRESS_CLAMP']/*"/>	
        /// <msdn-id>bb172614</msdn-id>	
        /// <unmanaged>D3DTADDRESS_CLAMP</unmanaged>	
        /// <unmanaged-short>D3DTADDRESS_CLAMP</unmanaged-short>	
        Clamp = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Texture coordinates outside the range [0.0, 1.0] are set to the border color. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTADDRESS_BORDER']/*"/>	
        /// <msdn-id>bb172614</msdn-id>	
        /// <unmanaged>D3DTADDRESS_BORDER</unmanaged>	
        /// <unmanaged-short>D3DTADDRESS_BORDER</unmanaged-short>	
        Border = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Similar to <see cref="SharpDX.Direct3D9.TextureAddress.Mirror"/> and <see cref="SharpDX.Direct3D9.TextureAddress.Clamp"/>. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full <see cref="SharpDX.Direct3D9.TextureAddress.MirrorOnce"/> texture-addressing mode is not necessary, but the data is symmetric around the one axis. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTADDRESS_MIRRORONCE']/*"/>	
        /// <msdn-id>bb172614</msdn-id>	
        /// <unmanaged>D3DTADDRESS_MIRRORONCE</unmanaged>	
        /// <unmanaged-short>D3DTADDRESS_MIRRORONCE</unmanaged-short>	
        MirrorOnce = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>A programmable pixel shader is made up of a set of instructions that operate on pixel data. Registers transfer data in and out of the ALU. Additional control can be applied to modify the instruction, the results, or what data gets written out.</p><ul> <li> ps_3_0 Instructions contains a list of the available instructions.</li> <li> ps_3_0 Registers lists the different types of registers used by the pixel shader ALU.</li> <li> Modifiers Are used to modify the way an instruction works.</li> <li> Destination Register Write Mask determines what components of the destination register get written.</li> <li> Pixel Shader Source Register Modifiers alter the source register data before the instruction runs.</li> <li> Source Register Swizzling gives additional control over which register components are read, copied, or written.</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS']/*"/>	
    /// <msdn-id>bb219845</msdn-id>	
    /// <unmanaged>D3DPTADDRESSCAPS</unmanaged>	
    /// <unmanaged-short>D3DPTADDRESSCAPS</unmanaged-short>	
    [Flags]
    public enum TextureAddressCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_WRAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_WRAP</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_WRAP</unmanaged-short>	
        Wrap = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_MIRROR']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_MIRROR</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_CLAMP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_CLAMP</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_CLAMP</unmanaged-short>	
        Clamp = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_BORDER']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_BORDER</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_BORDER</unmanaged-short>	
        Border = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_INDEPENDENTUV']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_INDEPENDENTUV</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_INDEPENDENTUV</unmanaged-short>	
        IndependentUV = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTADDRESSCAPS_MIRRORONCE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTADDRESSCAPS_MIRRORONCE</unmanaged>	
        /// <unmanaged-short>D3DPTADDRESSCAPS_MIRRORONCE</unmanaged-short>	
        MirrorOnce = unchecked((int)32),			
    }
    
    /// <summary>	
    /// <p>Texture argument constants are used as values for the following members of the <strong><see cref="SharpDX.Direct3D9.TextureStage"/></strong> enumerated type:</p><ul> <li><see cref="SharpDX.Direct3D9.TextureStage.AlphaArg0"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.AlphaArg1"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.AlphaArg2"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.ColorArg0"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.ColorArg1"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.ColorArg2"/></li> <li><see cref="SharpDX.Direct3D9.TextureStage.ResultArg"/></li> </ul><p>Set and retrieve texture arguments by calling the <strong>SetTextureStageState</strong> and <strong>GetTextureStageState</strong> methods.</p><p>Argument flags</p><p>You can combine an argument flag with a modifier, but two argument flags cannot be combined.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA']/*"/>	
    /// <msdn-id>bb172613</msdn-id>	
    /// <unmanaged>D3DTA</unmanaged>	
    /// <unmanaged-short>D3DTA</unmanaged-short>	
    [Flags]
    public enum TextureArgument : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_SELECTMASK']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_SELECTMASK</unmanaged>	
        /// <unmanaged-short>D3DTA_SELECTMASK</unmanaged-short>	
        SelectMask = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_DIFFUSE']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_DIFFUSE</unmanaged>	
        /// <unmanaged-short>D3DTA_DIFFUSE</unmanaged-short>	
        Diffuse = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_CURRENT']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_CURRENT</unmanaged>	
        /// <unmanaged-short>D3DTA_CURRENT</unmanaged-short>	
        Current = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_TEXTURE']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_TEXTURE</unmanaged>	
        /// <unmanaged-short>D3DTA_TEXTURE</unmanaged-short>	
        Texture = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_TFACTOR']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_TFACTOR</unmanaged>	
        /// <unmanaged-short>D3DTA_TFACTOR</unmanaged-short>	
        TFactor = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_SPECULAR']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_SPECULAR</unmanaged>	
        /// <unmanaged-short>D3DTA_SPECULAR</unmanaged-short>	
        Specular = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_TEMP']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_TEMP</unmanaged>	
        /// <unmanaged-short>D3DTA_TEMP</unmanaged-short>	
        Temp = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_CONSTANT']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_CONSTANT</unmanaged>	
        /// <unmanaged-short>D3DTA_CONSTANT</unmanaged-short>	
        Constant = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_COMPLEMENT']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_COMPLEMENT</unmanaged>	
        /// <unmanaged-short>D3DTA_COMPLEMENT</unmanaged-short>	
        Complement = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTA_ALPHAREPLICATE']/*"/>	
        /// <msdn-id>bb172613</msdn-id>	
        /// <unmanaged>D3DTA_ALPHAREPLICATE</unmanaged>	
        /// <unmanaged-short>D3DTA_ALPHAREPLICATE</unmanaged-short>	
        AlphaReplicate = unchecked((int)32),			
    }
    
    /// <summary>	
    /// <p>A programmable pixel shader is made up of a set of instructions that operate on pixel data. Registers transfer data in and out of the ALU. Additional control can be applied to modify the instruction, the results, or what data gets written out.</p><ul> <li> ps_3_0 Instructions contains a list of the available instructions.</li> <li> ps_3_0 Registers lists the different types of registers used by the pixel shader ALU.</li> <li> Modifiers Are used to modify the way an instruction works.</li> <li> Destination Register Write Mask determines what components of the destination register get written.</li> <li> Pixel Shader Source Register Modifiers alter the source register data before the instruction runs.</li> <li> Source Register Swizzling gives additional control over which register components are read, copied, or written.</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS']/*"/>	
    /// <msdn-id>bb219845</msdn-id>	
    /// <unmanaged>D3DPTEXTURECAPS</unmanaged>	
    /// <unmanaged-short>D3DPTEXTURECAPS</unmanaged-short>	
    [Flags]
    public enum TextureCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_PERSPECTIVE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_PERSPECTIVE</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_PERSPECTIVE</unmanaged-short>	
        Perspective = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_POW2']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_POW2</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_POW2</unmanaged-short>	
        Pow2 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_ALPHA']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_ALPHA</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_ALPHA</unmanaged-short>	
        Alpha = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_SQUAREONLY']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_SQUAREONLY</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_SQUAREONLY</unmanaged-short>	
        SquareOnly = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE</unmanaged-short>	
        TextureRepeatNotScaledBySize = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_ALPHAPALETTE']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_ALPHAPALETTE</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_ALPHAPALETTE</unmanaged-short>	
        AlphaPalette = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_NONPOW2CONDITIONAL']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_NONPOW2CONDITIONAL</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_NONPOW2CONDITIONAL</unmanaged-short>	
        NonPow2Conditional = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_PROJECTED']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_PROJECTED</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_PROJECTED</unmanaged-short>	
        Projected = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_CUBEMAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_CUBEMAP</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_CUBEMAP</unmanaged-short>	
        CubeMap = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_VOLUMEMAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_VOLUMEMAP</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_VOLUMEMAP</unmanaged-short>	
        VolumeMap = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_MIPMAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_MIPMAP</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_MIPMAP</unmanaged-short>	
        MipMap = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_MIPVOLUMEMAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_MIPVOLUMEMAP</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_MIPVOLUMEMAP</unmanaged-short>	
        MipVolumeMap = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_MIPCUBEMAP']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_MIPCUBEMAP</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_MIPCUBEMAP</unmanaged-short>	
        MipCubeMap = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_CUBEMAP_POW2']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_CUBEMAP_POW2</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_CUBEMAP_POW2</unmanaged-short>	
        CubeMapPow2 = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_VOLUMEMAP_POW2']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_VOLUMEMAP_POW2</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_VOLUMEMAP_POW2</unmanaged-short>	
        VolumeMapPow2 = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DPTEXTURECAPS_NOPROJECTEDBUMPENV']/*"/>	
        /// <msdn-id>bb219845</msdn-id>	
        /// <unmanaged>D3DPTEXTURECAPS_NOPROJECTEDBUMPENV</unmanaged>	
        /// <unmanaged-short>D3DPTEXTURECAPS_NOPROJECTEDBUMPENV</unmanaged-short>	
        NoProjectedBumpEnvironment = unchecked((int)2097152),			
    }
    
    /// <summary>	
    /// <p>Driver texture coordinate capability flags.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI']/*"/>	
    /// <msdn-id>bb172621</msdn-id>	
    /// <unmanaged>D3DTSS_TCI</unmanaged>	
    /// <unmanaged-short>D3DTSS_TCI</unmanaged-short>	
    [Flags]
    public enum TextureCoordIndex : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI_PASSTHRU']/*"/>	
        /// <msdn-id>bb172621</msdn-id>	
        /// <unmanaged>D3DTSS_TCI_PASSTHRU</unmanaged>	
        /// <unmanaged-short>D3DTSS_TCI_PASSTHRU</unmanaged-short>	
        PassThru = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACENORMAL']/*"/>	
        /// <msdn-id>bb172621</msdn-id>	
        /// <unmanaged>D3DTSS_TCI_CAMERASPACENORMAL</unmanaged>	
        /// <unmanaged-short>D3DTSS_TCI_CAMERASPACENORMAL</unmanaged-short>	
        CameraSpaceNormal = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACEPOSITION']/*"/>	
        /// <msdn-id>bb172621</msdn-id>	
        /// <unmanaged>D3DTSS_TCI_CAMERASPACEPOSITION</unmanaged>	
        /// <unmanaged-short>D3DTSS_TCI_CAMERASPACEPOSITION</unmanaged-short>	
        CameraSpacePosition = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR']/*"/>	
        /// <msdn-id>bb172621</msdn-id>	
        /// <unmanaged>D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR</unmanaged>	
        /// <unmanaged-short>D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR</unmanaged-short>	
        CameraSpaceReflectionVector = unchecked((int)196608),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TCI_SPHEREMAP']/*"/>	
        /// <msdn-id>bb172621</msdn-id>	
        /// <unmanaged>D3DTSS_TCI_SPHEREMAP</unmanaged>	
        /// <unmanaged-short>D3DTSS_TCI_SPHEREMAP</unmanaged-short>	
        SphereMap = unchecked((int)262144),			
    }
    
    /// <summary>	
    /// <p>Defines texture filtering modes for a texture stage.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><see cref="SharpDX.Direct3D9.TextureFilter"/> is used by <strong><see cref="SharpDX.Direct3D9.Device.SetSamplerState"/></strong> along with <strong><see cref="SharpDX.Direct3D9.SamplerState"/></strong> to define texture filtering modes for a texture stage. </p><p>To check if a format supports texture filter types other than <see cref="SharpDX.Direct3D9.TextureFilter.Point"/> (which is always supported), call <strong><see cref="SharpDX.Direct3D9.Direct3D.CheckDeviceFormat_"/></strong> with <see cref="SharpDX.Direct3D9.Usage.QueryFilter"/>.</p><p>Set a texture stage's magnification filter by calling <strong><see cref="SharpDX.Direct3D9.Device.SetSamplerState"/></strong> with the <see cref="SharpDX.Direct3D9.SamplerState.MagFilter"/> value as the second parameter and one member of this enumeration as the third parameter.</p><p>Set a texture stage's minification filter by calling <strong><see cref="SharpDX.Direct3D9.Device.SetSamplerState"/></strong> with the <see cref="SharpDX.Direct3D9.SamplerState.MinFilter"/> value as the second parameter and one member of this enumeration as the third parameter.</p><p>Set the texture filter to use between-mipmap levels by calling <strong><see cref="SharpDX.Direct3D9.Device.SetSamplerState"/></strong> with the <see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/> value as the second parameter and one member of this enumeration as the third parameter.</p><p>Not all valid filtering modes for a device will apply to volume maps. In general, <see cref="SharpDX.Direct3D9.TextureFilter.Point"/> and <see cref="SharpDX.Direct3D9.TextureFilter.Linear"/> magnification filters will be supported for volume maps. If <see cref="SharpDX.Direct3D9.TextureCaps.MipVolumeMap"/> is set, then the <see cref="SharpDX.Direct3D9.TextureFilter.Point"/> mipmap filter and <see cref="SharpDX.Direct3D9.TextureFilter.Point"/> and <see cref="SharpDX.Direct3D9.TextureFilter.Linear"/> minification filters will be supported for volume maps. The device may or may not support the <see cref="SharpDX.Direct3D9.TextureFilter.Linear"/> mipmap filter for volume maps. Devices that support anisotropic filtering for 2D maps do not necessarily support anisotropic filtering for volume maps. However, applications that enable anisotropic filtering will receive the best available filtering (probably linear) if anisotropic filtering is not supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXTUREFILTERTYPE']/*"/>	
    /// <msdn-id>bb172615</msdn-id>	
    /// <unmanaged>D3DTEXTUREFILTERTYPE</unmanaged>	
    /// <unmanaged-short>D3DTEXTUREFILTERTYPE</unmanaged-short>	
    public enum TextureFilter : int {	
        
        /// <summary>	
        /// <dd> <p>When used with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong>, disables mipmapping.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_NONE']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_NONE</unmanaged>	
        /// <unmanaged-short>D3DTEXF_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>When used with <strong>D3DSAMP_ MAGFILTER</strong> or <strong><see cref="SharpDX.Direct3D9.SamplerState.MinFilter"/></strong>,  specifies that point filtering is to be used as the texture magnification or minification filter respectively. When used  with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong>, enables mipmapping and specifies that the rasterizer chooses the color from the  texel of the nearest mip level.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_POINT']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_POINT</unmanaged>	
        /// <unmanaged-short>D3DTEXF_POINT</unmanaged-short>	
        Point = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>When used with <strong>D3DSAMP_ MAGFILTER</strong> or <strong><see cref="SharpDX.Direct3D9.SamplerState.MinFilter"/></strong>,  specifies that linear filtering is to be used as the texture magnification or minification filter respectively. When used  with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong>, enables mipmapping and trilinear filtering; it specifies that the rasterizer  interpolates between the two nearest mip levels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_LINEAR']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_LINEAR</unmanaged>	
        /// <unmanaged-short>D3DTEXF_LINEAR</unmanaged-short>	
        Linear = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>When used with <strong>D3DSAMP_ MAGFILTER</strong> or <strong><see cref="SharpDX.Direct3D9.SamplerState.MinFilter"/></strong>,  specifies that anisotropic texture filtering used as a texture magnification or minification filter respectively.  Compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.  Use with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong> is undefined.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_ANISOTROPIC']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D3DTEXF_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>A 4-sample tent filter used as a texture magnification or minification filter.  Use with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong> is undefined.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_PYRAMIDALQUAD']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_PYRAMIDALQUAD</unmanaged>	
        /// <unmanaged-short>D3DTEXF_PYRAMIDALQUAD</unmanaged-short>	
        PyramidalQuad = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>A 4-sample Gaussian filter used as a texture magnification or minification filter.  Use with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong> is undefined.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_GAUSSIANQUAD']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_GAUSSIANQUAD</unmanaged>	
        /// <unmanaged-short>D3DTEXF_GAUSSIANQUAD</unmanaged-short>	
        GaussianQuad = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Convolution filter for monochrome textures.  See <see cref="SharpDX.Direct3D9.Format.A1"/>. </p> <table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 9Ex:</p> <p>This flag is available in Direct3D 9Ex only.</p> </td></tr> </table> <p>?</p> <p> Use with <strong><see cref="SharpDX.Direct3D9.SamplerState.MipFilter"/></strong> is undefined. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXF_CONVOLUTIONMONO']/*"/>	
        /// <msdn-id>bb172615</msdn-id>	
        /// <unmanaged>D3DTEXF_CONVOLUTIONMONO</unmanaged>	
        /// <unmanaged-short>D3DTEXF_CONVOLUTIONMONO</unmanaged-short>	
        ConvolutionMono = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Defines per-stage texture-blending operations.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The members of this type are used when setting color or alpha operations by using the <see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/> or <see cref="SharpDX.Direct3D9.TextureStage.AlphaOperation"/> values with the <strong><see cref="SharpDX.Direct3D9.Device.SetTextureStageState"/></strong> method. </p><p> In the above formulas, SRGBA is the RGBA color produced by a texture operation, and 	Arg1, Arg2, and Arg3 represent the complete RGBA color of the texture arguments. Individual components of an argument are shown with subscripts. For example, the alpha component for argument 1 would be shown as Arg1A. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXTUREOP']/*"/>	
    /// <msdn-id>bb172616</msdn-id>	
    /// <unmanaged>D3DTEXTUREOP</unmanaged>	
    /// <unmanaged-short>D3DTEXTUREOP</unmanaged-short>	
    public enum TextureOperation : int {	
        
        /// <summary>	
        /// <dd> <p>Disables output from this texture stage and all stages with a higher index. To disable texture mapping, set this as the color operation for the first texture stage (stage 0). Alpha operations cannot be disabled when color operations are enabled. Setting the alpha operation to <see cref="SharpDX.Direct3D9.TextureOperation.Disable"/> when color blending is enabled causes undefined behavior. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_DISABLE']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_DISABLE</unmanaged>	
        /// <unmanaged-short>D3DTOP_DISABLE</unmanaged-short>	
        Disable = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use this texture stage's first color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/> texture-stage state, and the alpha argument when used with <see cref="SharpDX.Direct3D9.TextureStage.AlphaOperation"/>. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_SELECTARG1']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_SELECTARG1</unmanaged>	
        /// <unmanaged-short>D3DTOP_SELECTARG1</unmanaged-short>	
        SelectArg1 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Use this texture stage's second color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/> texture stage state, and the alpha argument when used with <see cref="SharpDX.Direct3D9.TextureStage.AlphaOperation"/>. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_SELECTARG2']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_SELECTARG2</unmanaged>	
        /// <unmanaged-short>D3DTOP_SELECTARG2</unmanaged-short>	
        SelectArg2 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Multiply the components of the arguments. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATE']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATE</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATE</unmanaged-short>	
        Modulate = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Multiply the components of the arguments, and shift the products to the left 1 bit (effectively multiplying them by 2) for brightening. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATE2X']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATE2X</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATE2X</unmanaged-short>	
        Modulate2X = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Multiply the components of the arguments, and shift the products to the left 2 bits (effectively multiplying them by 4) for brightening. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATE4X']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATE4X</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATE4X</unmanaged-short>	
        Modulate4X = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>Add the components of the arguments. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_ADD']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_ADD</unmanaged>	
        /// <unmanaged-short>D3DTOP_ADD</unmanaged-short>	
        Add = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Add the components of the arguments with a  - 0.5 bias, making the effective range of values from  - 0.5 through 0.5. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_ADDSIGNED']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_ADDSIGNED</unmanaged>	
        /// <unmanaged-short>D3DTOP_ADDSIGNED</unmanaged-short>	
        AddSigned = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Add the components of the arguments with a  - 0.5 bias, and shift the products to the left 1 bit. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_ADDSIGNED2X']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_ADDSIGNED2X</unmanaged>	
        /// <unmanaged-short>D3DTOP_ADDSIGNED2X</unmanaged-short>	
        AddSigned2X = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>Subtract the components of the second argument from those of the first argument. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_SUBTRACT']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D3DTOP_SUBTRACT</unmanaged-short>	
        Subtract = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Add the first and second arguments; then subtract their product from the sum. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_ADDSMOOTH']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_ADDSMOOTH</unmanaged>	
        /// <unmanaged-short>D3DTOP_ADDSMOOTH</unmanaged-short>	
        AddSmooth = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>Linearly blend this texture stage, using the interpolated alpha from each vertex. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BLENDDIFFUSEALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BLENDDIFFUSEALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_BLENDDIFFUSEALPHA</unmanaged-short>	
        BlendDiffuseAlpha = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>Linearly blend this texture stage, using the alpha from this stage's texture. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BLENDTEXTUREALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BLENDTEXTUREALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_BLENDTEXTUREALPHA</unmanaged-short>	
        BlendTextureAlpha = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>Linearly blend this texture stage, using a scalar alpha set with the <see cref="SharpDX.Direct3D9.RenderState.TextureFactor"/> render state. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BLENDFACTORALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BLENDFACTORALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_BLENDFACTORALPHA</unmanaged-short>	
        BlendFactorAlpha = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>Linearly blend a texture stage that uses a premultiplied alpha. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BLENDTEXTUREALPHAPM']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BLENDTEXTUREALPHAPM</unmanaged>	
        /// <unmanaged-short>D3DTOP_BLENDTEXTUREALPHAPM</unmanaged-short>	
        BlendTextureAlphaPM = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>Linearly blend this texture stage, using the alpha taken from the previous texture stage. </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BLENDCURRENTALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BLENDCURRENTALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_BLENDCURRENTALPHA</unmanaged-short>	
        BlendCurrentAlpha = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p><see cref="SharpDX.Direct3D9.TextureOperation.Premodulate"/> is set in stage n. The output of stage n is arg1. Additionally, if there is a texture in stage n + 1, any <see cref="SharpDX.Direct3D9.TextureArgument.Current"/> in stage n + 1 is premultiplied by texture in stage n + 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_PREMODULATE']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_PREMODULATE</unmanaged>	
        /// <unmanaged-short>D3DTOP_PREMODULATE</unmanaged-short>	
        Premodulate = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>Modulate the color of the second argument, using the alpha of the first argument; then add the result to argument one. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATEALPHA_ADDCOLOR']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATEALPHA_ADDCOLOR</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATEALPHA_ADDCOLOR</unmanaged-short>	
        ModulateAlphaAddColor = unchecked((int)18),			
        
        /// <summary>	
        /// <dd> <p>Modulate the arguments; then add the alpha of the first argument. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATECOLOR_ADDALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATECOLOR_ADDALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATECOLOR_ADDALPHA</unmanaged-short>	
        ModulateColorAddAlpha = unchecked((int)19),			
        
        /// <summary>	
        /// <dd> <p>Similar to <see cref="SharpDX.Direct3D9.TextureOperation.ModulateAlphaAddColor"/>, but use the inverse of the alpha of the first argument. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATEINVALPHA_ADDCOLOR']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATEINVALPHA_ADDCOLOR</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATEINVALPHA_ADDCOLOR</unmanaged-short>	
        ModulateInvAlphaAddColor = unchecked((int)20),			
        
        /// <summary>	
        /// <dd> <p>Similar to <see cref="SharpDX.Direct3D9.TextureOperation.ModulateColorAddAlpha"/>, but use the inverse of the color of the first argument. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> <p></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MODULATEINVCOLOR_ADDALPHA']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MODULATEINVCOLOR_ADDALPHA</unmanaged>	
        /// <unmanaged-short>D3DTOP_MODULATEINVCOLOR_ADDALPHA</unmanaged-short>	
        ModulateInvColorAddAlpha = unchecked((int)21),			
        
        /// <summary>	
        /// <dd> <p>Perform per-pixel bump mapping, using the environment map in the next texture stage, without luminance. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BUMPENVMAP']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BUMPENVMAP</unmanaged>	
        /// <unmanaged-short>D3DTOP_BUMPENVMAP</unmanaged-short>	
        BumpEnvironmentMap = unchecked((int)22),			
        
        /// <summary>	
        /// <dd> <p>Perform per-pixel bump mapping, using the environment map in the next texture stage, with luminance. This operation is supported only for color operations (<see cref="SharpDX.Direct3D9.TextureStage.ColorOperation"/>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_BUMPENVMAPLUMINANCE']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_BUMPENVMAPLUMINANCE</unmanaged>	
        /// <unmanaged-short>D3DTOP_BUMPENVMAPLUMINANCE</unmanaged-short>	
        BumpEnvironmentMapLuminance = unchecked((int)23),			
        
        /// <summary>	
        /// <dd> <p> Modulate the components of each argument as signed components, add their products; then replicate the sum to all color channels, including alpha. This operation is supported for color and alpha operations. </p> <p></p> <p> In DirectX 6 and DirectX 7, multitexture operations the above inputs are all shifted down by half (y = x - 0.5) before use to simulate signed data, and the scalar result is automatically clamped to positive values and replicated to all three output channels. Also, note that as a color operation this does not updated the alpha it just updates the RGB components.  </p> <p>However, in DirectX 8.1 shaders you can specify that the output be routed to the .rgb or the .a components or both (the default). You can also specify a separate scalar operation on the alpha channel.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_DOTPRODUCT3']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_DOTPRODUCT3</unmanaged>	
        /// <unmanaged-short>D3DTOP_DOTPRODUCT3</unmanaged-short>	
        DotProduct3 = unchecked((int)24),			
        
        /// <summary>	
        /// <dd> <p>Performs a multiply-accumulate operation. It takes the last two arguments, multiplies them together, and adds them to the remaining input/source argument, and places that into the result. </p> <p>SRGBA = Arg1 + Arg2 *  Arg3  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_MULTIPLYADD']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_MULTIPLYADD</unmanaged>	
        /// <unmanaged-short>D3DTOP_MULTIPLYADD</unmanaged-short>	
        MultiplyAdd = unchecked((int)25),			
        
        /// <summary>	
        /// <dd> <p>Linearly interpolates between the second and third source arguments by a proportion specified in the first source argument.</p> <p>SRGBA = (Arg1) *  Arg2 + (1- Arg1) *  Arg3.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTOP_LERP']/*"/>	
        /// <msdn-id>bb172616</msdn-id>	
        /// <unmanaged>D3DTOP_LERP</unmanaged>	
        /// <unmanaged-short>D3DTOP_LERP</unmanaged-short>	
        Lerp = unchecked((int)26),			
    }
    
    /// <summary>	
    /// <p>Represents the capabilities of the hardware exposed through the Direct3D object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The MaxTextureBlendStages and MaxSimultaneousTextures members might seem similar, but they contain different information. The MaxTextureBlendStages member contains the total number of texture-blending stages supported by the current device, and the MaxSimultaneousTextures member describes how many of those stages can have textures bound to them by using the <strong>SetTexture</strong> method.</p><p>When the driver fills this structure, it can set values for execute-buffer capabilities, even when the interface being used to retrieve the capabilities (such as <strong><see cref="SharpDX.Direct3D9.Device"/></strong>) does not support execute buffers.</p><p>In general, performance problems may occur if you use a texture and then modify it during a scene. Ensure that no texture used in the current <strong>BeginScene</strong> and <strong>EndScene</strong> block is evicted unless absolutely necessary. In the case of extremely high texture usage within a scene, the results are undefined. This occurs when you modify a texture that you have used in the scene and there is no spare texture memory available. For such systems, the contents of the z-buffer become invalid at EndScene. Applications should not call <strong>UpdateSurface</strong> to or from the back buffer on this type of hardware inside a BeginScene/EndScene pair. In addition, applications should not try to access the z-buffer if the <see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/> capability flag is set. Finally, applications should not lock the back buffer or the z-buffer inside a BeginScene/EndScene pair.</p><p>The following flags concerning mipmapped textures are not supported in Direct3D 9. </p><ul> <li>D3DPTFILTERCAPS_LINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPLINEAR</li> <li>D3DPTFILTERCAPS_LINEARMIPNEAREST</li> <li>D3DPTFILTERCAPS_MIPNEAREST</li> <li>D3DPTFILTERCAPS_NEAREST</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS']/*"/>	
    /// <msdn-id>bb172513</msdn-id>	
    /// <unmanaged>D3DTEXOPCAPS</unmanaged>	
    /// <unmanaged-short>D3DTEXOPCAPS</unmanaged-short>	
    [Flags]
    public enum TextureOperationCaps : int {	
        
        /// <summary>	
        /// <dd> <p>Member of the <strong><see cref="SharpDX.Direct3D9.DeviceType"/></strong> enumerated type, which identifies what type of resources are used for processing vertices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_DISABLE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_DISABLE</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_DISABLE</unmanaged-short>	
        Disable = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Adapter on which this Direct3D device was created. This ordinal is valid only to pass to methods of the <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface that created this Direct3D device. The <strong><see cref="SharpDX.Direct3D9.Direct3D"/></strong> interface can always be retrieved by calling <strong>GetDirect3D</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_SELECTARG1']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_SELECTARG1</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_SELECTARG1</unmanaged-short>	
        SelectArg1 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> </p><p>The following driver-specific capability.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.ReadScanline"/></strong></dt> </dl> </td><td> <p>Display hardware is capable of returning the current scan line.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.Caps.Overlay"/></strong></dt> </dl> </td><td> <p>The display driver supports an overlay DDI that allows for verification of overlay capabilities. For more information about the overlay DDI, see Overlay DDI.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_SELECTARG2']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_SELECTARG2</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_SELECTARG2</unmanaged-short>	
        SelectArg2 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps2"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATE</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATE</unmanaged-short>	
        Modulate = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Driver-specific capabilities identified in <see cref="SharpDX.Direct3D9.Caps3"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE2X']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATE2X</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATE2X</unmanaged-short>	
        Modulate2X = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask of values representing what presentation swap intervals are available.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Immediate"/></strong></dt> </dl> </td><td> <p>The driver supports an immediate presentation swap interval.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.One"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Two"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every second screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Three"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every third screen refresh.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.PresentInterval.Four"/></strong></dt> </dl> </td><td> <p>The driver supports a presentation swap interval of every fourth screen refresh.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATE4X']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATE4X</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATE4X</unmanaged-short>	
        Modulate4X = unchecked((int)32),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Bit mask indicating what hardware support is available for cursors. Direct3D 9 does not define alpha-blending cursor capabilities.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.Color"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports at least a hardware color cursor in high-resolution modes (with scan lines greater than or equal to 400).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CursorCaps.LowResolution"/></strong></dt> </dl> </td><td> <p>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports a hardware color cursor in both high-resolution and low-resolution modes (with scan lines less than 400).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_ADD']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_ADD</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_ADD</unmanaged-short>	
        Add = unchecked((int)64),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Flags identifying the capabilities of the device.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanBlitSysToNonLocal"/></strong></dt> </dl> </td><td> <p>Device supports blits from system-memory textures to nonlocal video-memory textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.CanRenderAfterFlip"/></strong></dt> </dl> </td><td> <p>Device can queue rendering commands after a page flip. Applications do not change their behavior if this flag is set; this capability means that the device is relatively fast.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 5-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimitives2Extended"/></strong></dt> </dl> </td><td> <p>Device can support at least a DirectX 7-compliant driver.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.DrawPrimTLVertex"/></strong></dt> </dl> </td><td> <p>Device exports an <strong><see cref="SharpDX.Direct3D9.Device.DrawPrimitives"/></strong>-aware hal.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.ExecuteVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use execute buffers from video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWRasterization"/></strong></dt> </dl> </td><td> <p>Device has hardware acceleration for scene rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.HWTransformAndLight"/></strong></dt> </dl> </td><td> <p>Device can support transformation and lighting in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.NPatches"/></strong></dt> </dl> </td><td> <p>Device supports N patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.PureDevice"/></strong></dt> </dl> </td><td> <p>Device can support rasterization, transform, lighting, and shading in hardware.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.QuinticRTPatches"/></strong></dt> </dl> </td><td> <p>Device supports quintic B?zier curves and B-splines.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatches"/></strong></dt> </dl> </td><td> <p>Device supports rectangular and triangular patches.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/></strong></dt> </dl> </td><td> <p>When this device capability is set, the hardware architecture does not require caching of any information, and uncached patches (handle zero) will be drawn as efficiently as cached ones. Note that setting <see cref="SharpDX.Direct3D9.DeviceCaps.RTPatchHandleZero"/> does not mean that a patch with handle zero can be drawn. A handle-zero patch can always be drawn whether this cap is set or not.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.SeparateTextureMemory"/></strong></dt> </dl> </td><td> <p>Device is texturing from separate memory pools.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureNonLocalVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from non-local video memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from system memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TextureVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can retrieve textures from device memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexSystemMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from system memory for transformed and lit vertices.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.DeviceCaps.TLVertexVideoMemory"/></strong></dt> </dl> </td><td> <p>Device can use buffers from video memory for transformed and lit vertices.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_ADDSIGNED']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_ADDSIGNED</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_ADDSIGNED</unmanaged-short>	
        AddSigned = unchecked((int)128),			
        
        /// <summary>	
        /// <dd> <p>Miscellaneous driver primitive capabilities. See <see cref="SharpDX.Direct3D9.PrimitiveMiscCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_ADDSIGNED2X']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_ADDSIGNED2X</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_ADDSIGNED2X</unmanaged-short>	
        AddSigned2X = unchecked((int)256),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Information on raster-drawing capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Anisotropy"/></strong></dt> </dl> </td><td> <p>Device supports anisotropic filtering.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ColorPerspective"/></strong></dt> </dl> </td><td> <p>Device iterates colors perspective correctly.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.Dither"/></strong></dt> </dl> </td><td> <p>Device can dither to improve color resolution.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthBias"/></strong></dt> </dl> </td><td> <p>Device supports legacy depth bias. For true depth bias, see <see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogRange"/></strong></dt> </dl> </td><td> <p>Device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogTable"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.FogVertex"/></strong></dt> </dl> </td><td> <p>Device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MipMapLodBias"/></strong></dt> </dl> </td><td> <p>Device supports level-of-detail bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would. For more information about level-of-detail bias in mipmaps, see <see cref="SharpDX.Direct3D9.SamplerState.MipMapLodBias"/>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.MultisampleToggle"/></strong></dt> </dl> </td><td> <p>Device supports toggling multisampling on and off between <strong><see cref="SharpDX.Direct3D9.Device.BeginScene"/></strong> and <strong><see cref="SharpDX.Direct3D9.Device.EndScene"/></strong> (using <see cref="SharpDX.Direct3D9.RenderState.MultisampleAntialias"/>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ScissorTest"/></strong></dt> </dl> </td><td> <p>Device supports scissor test. See Scissor Test (Direct3D 9).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.SlopeScaleDepthBias"/></strong></dt> </dl> </td><td> <p>Device performs true slope-scale based depth bias. This is in contrast to the legacy style depth bias.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WBuffer"/></strong></dt> </dl> </td><td> <p>Device supports depth buffering using w.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.WFog"/></strong></dt> </dl> </td><td> <p>Device supports w-based fog. W-based fog is used when a perspective projection matrix is specified, but affine projections still use z-based fog. The system considers a projection matrix that contains a nonzero value in the [3][4] element to be a perspective projection matrix.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZBufferLessHsr"/></strong></dt> </dl> </td><td> <p>Device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth-buffer. This leaves more video memory for textures. The method used to perform HSR is hardware-dependent and is transparent to the application.</p> <p>Z-bufferless HSR is performed if no depth-buffer surface is associated with the rendering-target surface and the depth-buffer comparison test is enabled (that is, when the state value associated with the <strong><see cref="SharpDX.Direct3D9.RenderState.ZEnable"/></strong> enumeration constant is set to <strong>TRUE</strong>).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.ZFog"/></strong></dt> </dl> </td><td> <p>Device supports z-based fog.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.RasterCaps.DepthTest"/></strong></dt> </dl> </td><td> <p>Device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels have been rendered.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_SUBTRACT']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_SUBTRACT</unmanaged-short>	
        Subtract = unchecked((int)512),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Z-buffer comparison capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Always"/></strong></dt> </dl> </td><td> <p>Always pass the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Equal"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z equals the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Greater"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.GreaterEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is greater than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Less"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.LessEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z is less than or equal to the current z.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.Never"/></strong></dt> </dl> </td><td> <p>Always fail the z-test.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.CompareCaps.NotEqual"/></strong></dt> </dl> </td><td> <p>Pass the z-test if the new z does not equal the current z.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_ADDSMOOTH']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_ADDSMOOTH</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_ADDSMOOTH</unmanaged-short>	
        AddSmooth = unchecked((int)1024),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Source-blending capabilities. This member can be one or more of the following flags. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BlendFactor"/></strong></dt> </dl> </td><td> <p>The driver supports both <see cref="SharpDX.Direct3D9.Blend.BlendFactor"/> and <see cref="SharpDX.Direct3D9.Blend.InverseBlendFactor"/>. See <strong><see cref="SharpDX.Direct3D9.Blend"/></strong>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.BothInverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As) and destination blend factor is (As, As, As, As); the destination blend selection is overridden.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Bothsrcalpha"/></strong></dt> </dl> </td><td> <p>The driver supports the <see cref="SharpDX.Direct3D9.Blend.Bothsrcalpha"/> blend mode. (This blend mode is obsolete. For more information, see <see cref="SharpDX.Direct3D9.Blend"/>.)</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (Ad, Ad, Ad, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.DestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rd, Gd, Bd, Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseDestinationColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - As, 1 - As, 1 - As, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.InverseSourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (1 - PSOutColor[1]r, 1 - PSOutColor[1]g, 1 - PSOutColor[1]b, not used)). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.One"/></strong></dt> </dl> </td><td> <p>Blend factor is (1, 1, 1, 1).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlpha"/></strong></dt> </dl> </td><td> <p>Blend factor is (As, As, As, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceAlphaSaturated"/></strong></dt> </dl> </td><td> <p>Blend factor is (f, f, f, 1); f = min(As, 1 - Ad).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor"/></strong></dt> </dl> </td><td> <p>Blend factor is (Rs, Gs, Bs, As).</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.SourceColor2"/></strong></dt> </dl> </td><td> <p>Blend factor is (PSOutColor[1]r, PSOutColor[1]g, PSOutColor[1]b, not used). See <strong>Render Target Blending</strong>.</p> <p> </p>  Differences between Direct3D 9 and Direct3D 9Ex: This flag is available in Direct3D 9Ex only.   <p>?</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.BlendCaps.Zero"/></strong></dt> </dl> </td><td> <p>Blend factor is (0, 0, 0, 0).</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BLENDDIFFUSEALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BLENDDIFFUSEALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BLENDDIFFUSEALPHA</unmanaged-short>	
        BlendDiffuseAlpha = unchecked((int)2048),			
        
        /// <summary>	
        /// <dd> <p>Destination-blending capabilities. This member can be the same capabilities that are defined for the SrcBlendCaps member. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BLENDTEXTUREALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BLENDTEXTUREALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BLENDTEXTUREALPHA</unmanaged-short>	
        BlendTextureAlpha = unchecked((int)4096),			
        
        /// <summary>	
        /// <dd> <p>Alpha-test comparison capabilities. This member can include the same capability flags defined for the ZCmpCaps member. If this member contains only the <see cref="SharpDX.Direct3D9.CompareCaps.Always"/> capability or only the <see cref="SharpDX.Direct3D9.CompareCaps.Never"/> capability, the driver does not support alpha tests. Otherwise, the flags identify the individual comparisons that are supported for alpha testing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BLENDFACTORALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BLENDFACTORALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BLENDFACTORALPHA</unmanaged-short>	
        BlendFactorAlpha = unchecked((int)8192),			
        
        /// <summary>	
        /// <dd> <p>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the <see cref="SharpDX.Direct3D9.ShadeMode.Flat"/> mode (as specified in the <strong><see cref="SharpDX.Direct3D9.ShadeMode"/></strong> enumerated type). This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). </p> <p>The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver.</p> <p> </p><p>This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.AlphaGouraudBlend"/></strong></dt> </dl> </td><td> <p>Device can support an alpha component for Gouraud-blended transparency (the <see cref="SharpDX.Direct3D9.ShadeMode.Gouraud"/> state for the <see cref="SharpDX.Direct3D9.ShadeMode"/> enumerated type). In this mode, the alpha color component of a primitive is provided at vertices and interpolated across a face along with the other color components.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.ColorGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device can support colored Gouraud shading. In this mode, the per-vertex color components (red, green, and blue) are interpolated across a triangle face.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.FogGouraud"/></strong></dt> </dl> </td><td> <p>Device can support fog in the Gouraud shading mode.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.ShadeCaps.SpecularGouraudRgb"/></strong></dt> </dl> </td><td> <p>Device supports Gouraud shading of specular highlights.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BLENDTEXTUREALPHAPM']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BLENDTEXTUREALPHAPM</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BLENDTEXTUREALPHAPM</unmanaged-short>	
        BlendTextureAlphaPM = unchecked((int)16384),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Miscellaneous texture-mapping capabilities. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Alpha"/></strong></dt> </dl> </td><td> <p>Alpha in texture pixels is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.AlphaPalette"/></strong></dt> </dl> </td><td> <p>Device can draw alpha from texture palettes.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMap"/></strong></dt> </dl> </td><td> <p>Supports cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.CubeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that cube texture maps have dimensions specified as powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipCubeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped cube textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.MipVolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports mipmapped volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/></strong></dt> </dl> </td><td> <p><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. A device that exposes this capability can use such a texture if all of the following requirements are met.</p> <p> </p><ul> <li>The texture addressing mode for the texture stage is set to <see cref="SharpDX.Direct3D9.TextureAddress.Clamp"/>.</li> <li>Texture wrapping for the texture stage is disabled (<strong>D3DRS_WRAP</strong> n set to 0).</li> <li>Mipmapping is not in use (use magnification filter only).</li> <li>Texture formats must not be <see cref="SharpDX.Direct3D9.Format.Dxt1"/> through <see cref="SharpDX.Direct3D9.Format.Dxt5"/>.</li> </ul> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> <p>A texture that is not a power of two cannot be set at a stage that will be read based on a shader computation (such as the bem - ps and texm3x3 - ps instructions in pixel shaders versions 1_0 to 1_3). For example, these textures can be used to store bumps that will be fed into texture reads, but not the environment maps that are used in texbem - ps, texbeml - ps, and texm3x3spec - ps. This means that a texture with dimensions that are not powers of two cannot be addressed or sampled using texture coordinates computed within the shader. This type of operation is known as a dependent read and cannot be performed on these types of textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.NoProjectedBumpEnvironment"/></strong></dt> </dl> </td><td> <p>Device does not support a projected bump-environment loopkup operation in programmable and fixed function shaders.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Perspective"/></strong></dt> </dl> </td><td> <p>Perspective correction texturing is supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Pow2"/></strong></dt> </dl> </td><td> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is not set, all textures must have widths and heights specified as powers of two. This requirement does not apply to either cube textures or volume textures.</p> <p>If <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also set, conditionally supports the use of 2D textures with dimensions that are not powers of two. See <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> description.</p> <p>If this flag is not set, and <see cref="SharpDX.Direct3D9.TextureCaps.NonPow2Conditional"/> is also not set, then unconditional support is provided for 2D textures with dimensions that are not powers of two.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.Projected"/></strong></dt> </dl> </td><td> <p>Supports the <see cref="SharpDX.Direct3D9.TextureTransform.Projected"/> texture transformation flag. When applied, the device divides transformed texture coordinates by the last texture coordinate. If this capability is present, then the projective divide occurs per pixel. If this capability is not present, but the projective divide needs to occur anyway, then it is performed on a per-vertex basis by the Direct3D runtime.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.SquareOnly"/></strong></dt> </dl> </td><td> <p>All textures must be square.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/></strong></dt> </dl> </td><td> <p>Texture indices are not scaled by the texture size prior to interpolation.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMap"/></strong></dt> </dl> </td><td> <p>Device supports volume textures.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureCaps.VolumeMapPow2"/></strong></dt> </dl> </td><td> <p>Device requires that volume texture maps have dimensions specified as powers of two.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BLENDCURRENTALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BLENDCURRENTALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BLENDCURRENTALPHA</unmanaged-short>	
        BlendCurrentAlpha = unchecked((int)32768),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_PREMODULATE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_PREMODULATE</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_PREMODULATE</unmanaged-short>	
        Premodulate = unchecked((int)65536),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a cube texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR</unmanaged-short>	
        ModulateAlphaAddColor = unchecked((int)131072),			
        
        /// <summary>	
        /// <dd> <p>Texture-filtering capabilities for a volume texture. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending. This member can be any combination of the per-stage texture-filtering flags defined in <see cref="SharpDX.Direct3D9.FilterCaps"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA</unmanaged-short>	
        ModulateColorAddAlpha = unchecked((int)262144),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Texture-addressing capabilities for texture objects. This member can be one or more of the following flags.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Border"/></strong></dt> </dl> </td><td> <p>Device supports setting coordinates outside the range [0.0, 1.0] to the border color, as specified by the <see cref="SharpDX.Direct3D9.SamplerState.BorderColor"/> texture-stage state.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Clamp"/></strong></dt> </dl> </td><td> <p>Device can clamp textures to addresses.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.IndependentUV"/></strong></dt> </dl> </td><td> <p>Device can separate the texture-addressing modes of the u and v coordinates of the texture. This ability corresponds to the <see cref="SharpDX.Direct3D9.SamplerState.AddressU"/> and <see cref="SharpDX.Direct3D9.SamplerState.AddressV"/> render-state values.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Mirror"/></strong></dt> </dl> </td><td> <p>Device can mirror textures to addresses.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.MirrorOnce"/></strong></dt> </dl> </td><td> <p>Device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.TextureAddressCaps.Wrap"/></strong></dt> </dl> </td><td> <p>Device can wrap textures to addresses.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR</unmanaged-short>	
        ModulateInvAlphaAddColor = unchecked((int)524288),			
        
        /// <summary>	
        /// <dd> <p>Texture-addressing capabilities for a volume texture. This member can be one or more of the flags defined for the TextureAddressCaps member. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA</unmanaged-short>	
        ModulateInvColorAddAlpha = unchecked((int)1048576),			
        
        /// <summary>	
        /// <dd> <p> </p><p>Defines the capabilities for line-drawing primitives.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.AlphaCompare"/></strong></dt> </dl> </td><td> <p>Supports alpha-test comparisons.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.Antialias"/></strong></dt> </dl> </td><td> <p>Antialiased lines are supported.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.Blend"/></strong></dt> </dl> </td><td> <p>Supports source-blending.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.Fog"/></strong></dt> </dl> </td><td> <p>Supports fog.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.Texture"/></strong></dt> </dl> </td><td> <p>Supports texture-mapping.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.Direct3D9.LineCaps.DepthTest"/></strong></dt> </dl> </td><td> <p>Supports z-buffer comparisons.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BUMPENVMAP']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BUMPENVMAP</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BUMPENVMAP</unmanaged-short>	
        BumpEnvironmentMap = unchecked((int)2097152),			
        
        /// <summary>	
        /// <dd> <p>Maximum texture width for this device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_BUMPENVMAPLUMINANCE']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_BUMPENVMAPLUMINANCE</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_BUMPENVMAPLUMINANCE</unmanaged-short>	
        BumpEnvironmentMapLuminance = unchecked((int)4194304),			
        
        /// <summary>	
        /// <dd> <p>Maximum texture height for this device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_DOTPRODUCT3']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_DOTPRODUCT3</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_DOTPRODUCT3</unmanaged-short>	
        DotProduct3 = unchecked((int)8388608),			
        
        /// <summary>	
        /// <dd> <p>Maximum value for any of the three dimensions (width, height, and depth) of a volume texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_MULTIPLYADD']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_MULTIPLYADD</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_MULTIPLYADD</unmanaged-short>	
        MultiplyAdd = unchecked((int)16777216),			
        
        /// <summary>	
        /// <dd> <p>This number represents the maximum range of the integer bits of the post-normalized texture coordinates. A texture coordinate is stored as a 32-bit signed integer using 27 bits to store the integer part and 5 bits for the floating point fraction. The maximum integer index, 227, is used to determine the maximum texture coordinate, depending on how the hardware does texture-coordinate scaling.</p> <p>Some hardware reports the cap <see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/>. For this case, the device defers scaling texture coordinates by the texture size until after interpolation and application of the texture address mode, so the number of times a texture can be wrapped is given by the integer value in MaxTextureRepeat.</p> <p>Less desirably, on some hardware <see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/> is not set and the device scales the texture coordinates by the texture size (using the highest level of detail) prior to interpolation. This limits the number of times a texture can be wrapped to MaxTextureRepeat / texture size.</p> <p>For example, assume that MaxTextureRepeat is equal to 32k and the size of the texture is 4k. If the hardware sets <see cref="SharpDX.Direct3D9.TextureCaps.TextureRepeatNotScaledBySize"/>, then the number of times a texture can be wrapped is equal to MaxTextureRepeat, which is 32k in this example. Otherwise, the number of times a texture can be wrapped is equal to MaxTextureRepeat divided by texture size, which is 32k/4k in this example.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXOPCAPS_LERP']/*"/>	
        /// <msdn-id>bb172513</msdn-id>	
        /// <unmanaged>D3DTEXOPCAPS_LERP</unmanaged>	
        /// <unmanaged-short>D3DTEXOPCAPS_LERP</unmanaged-short>	
        Lerp = unchecked((int)33554432),			
    }
    
    /// <summary>	
    /// <p>Texture stage states define multi-blender texture operations. Some sampler states set up vertex processing, and some set up pixel processing. Texture stage states can be saved and restored using stateblocks (see State Blocks Save and Restore State (Direct3D 9)).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Members of this enumerated type are used with the <strong><see cref="SharpDX.Direct3D9.Device.GetTextureStageState"/></strong> and <strong><see cref="SharpDX.Direct3D9.Device.SetTextureStageState"/></strong> methods to retrieve and set texture state values.</p><p>The valid range of values for the <see cref="SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat00"/>, <see cref="SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat01"/>, <see cref="SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat10"/>, and <see cref="SharpDX.Direct3D9.TextureStage.BumpEnvironmentMat11"/> bump-mapping matrix coefficients is greater than or equal to -8.0 and less than 8.0. This range, expressed in mathematical notation is (-8.0,8.0).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXTURESTAGESTATETYPE']/*"/>	
    /// <msdn-id>bb172617</msdn-id>	
    /// <unmanaged>D3DTEXTURESTAGESTATETYPE</unmanaged>	
    /// <unmanaged-short>D3DTEXTURESTAGESTATETYPE</unmanaged-short>	
    public enum TextureStage : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_COLOROP']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_COLOROP</unmanaged>	
        /// <unmanaged-short>D3DTSS_COLOROP</unmanaged-short>	
        ColorOperation = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_COLORARG1']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_COLORARG1</unmanaged>	
        /// <unmanaged-short>D3DTSS_COLORARG1</unmanaged-short>	
        ColorArg1 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_COLORARG2']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_COLORARG2</unmanaged>	
        /// <unmanaged-short>D3DTSS_COLORARG2</unmanaged-short>	
        ColorArg2 = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_ALPHAOP']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_ALPHAOP</unmanaged>	
        /// <unmanaged-short>D3DTSS_ALPHAOP</unmanaged-short>	
        AlphaOperation = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_ALPHAARG1']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_ALPHAARG1</unmanaged>	
        /// <unmanaged-short>D3DTSS_ALPHAARG1</unmanaged-short>	
        AlphaArg1 = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_ALPHAARG2']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_ALPHAARG2</unmanaged>	
        /// <unmanaged-short>D3DTSS_ALPHAARG2</unmanaged-short>	
        AlphaArg2 = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVMAT00']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVMAT00</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVMAT00</unmanaged-short>	
        BumpEnvironmentMat00 = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVMAT01']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVMAT01</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVMAT01</unmanaged-short>	
        BumpEnvironmentMat01 = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVMAT10']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVMAT10</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVMAT10</unmanaged-short>	
        BumpEnvironmentMat10 = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVMAT11']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVMAT11</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVMAT11</unmanaged-short>	
        BumpEnvironmentMat11 = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TEXCOORDINDEX']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_TEXCOORDINDEX</unmanaged>	
        /// <unmanaged-short>D3DTSS_TEXCOORDINDEX</unmanaged-short>	
        TexCoordIndex = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVLSCALE']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVLSCALE</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVLSCALE</unmanaged-short>	
        BumpEnvironmentLScale = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_BUMPENVLOFFSET']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_BUMPENVLOFFSET</unmanaged>	
        /// <unmanaged-short>D3DTSS_BUMPENVLOFFSET</unmanaged-short>	
        BumpEnvironmentLOffset = unchecked((int)23),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_TEXTURETRANSFORMFLAGS']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_TEXTURETRANSFORMFLAGS</unmanaged>	
        /// <unmanaged-short>D3DTSS_TEXTURETRANSFORMFLAGS</unmanaged-short>	
        TextureTransformFlags = unchecked((int)24),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_COLORARG0']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_COLORARG0</unmanaged>	
        /// <unmanaged-short>D3DTSS_COLORARG0</unmanaged-short>	
        ColorArg0 = unchecked((int)26),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_ALPHAARG0']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_ALPHAARG0</unmanaged>	
        /// <unmanaged-short>D3DTSS_ALPHAARG0</unmanaged-short>	
        AlphaArg0 = unchecked((int)27),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_RESULTARG']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_RESULTARG</unmanaged>	
        /// <unmanaged-short>D3DTSS_RESULTARG</unmanaged-short>	
        ResultArg = unchecked((int)28),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTSS_CONSTANT']/*"/>	
        /// <msdn-id>bb172617</msdn-id>	
        /// <unmanaged>D3DTSS_CONSTANT</unmanaged>	
        /// <unmanaged-short>D3DTSS_CONSTANT</unmanaged-short>	
        Constant = unchecked((int)32),			
    }
    
    /// <summary>	
    /// <p>Defines texture coordinate transformation values.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Texture coordinates can be transformed using a 4 x 4 matrix before the results are passed to the rasterizer. The texture coordinate transforms are set by calling <strong><see cref="SharpDX.Direct3D9.Device.SetTextureStageState"/></strong>, and by passing in the <see cref="SharpDX.Direct3D9.TextureStage.TextureTransformFlags"/> texture stage state and one of the values from <strong><see cref="SharpDX.Direct3D9.TextureTransform"/></strong>. For more information about texture transforms, see Texture Coordinate Transformations (Direct3D 9).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTEXTURETRANSFORMFLAGS']/*"/>	
    /// <msdn-id>bb172618</msdn-id>	
    /// <unmanaged>D3DTEXTURETRANSFORMFLAGS</unmanaged>	
    /// <unmanaged-short>D3DTEXTURETRANSFORMFLAGS</unmanaged-short>	
    [Flags]
    public enum TextureTransform : int {	
        
        /// <summary>	
        /// <dd> <p>Texture coordinates are passed directly to the rasterizer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_DISABLE']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_DISABLE</unmanaged>	
        /// <unmanaged-short>D3DTTFF_DISABLE</unmanaged-short>	
        Disable = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The rasterizer should expect 1D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_COUNT1']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_COUNT1</unmanaged>	
        /// <unmanaged-short>D3DTTFF_COUNT1</unmanaged-short>	
        Count1 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The rasterizer should expect 2D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_COUNT2']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_COUNT2</unmanaged>	
        /// <unmanaged-short>D3DTTFF_COUNT2</unmanaged-short>	
        Count2 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The rasterizer should expect 3D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_COUNT3']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_COUNT3</unmanaged>	
        /// <unmanaged-short>D3DTTFF_COUNT3</unmanaged-short>	
        Count3 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The rasterizer should expect 4D texture coordinates. This value is used by fixed function vertex processing; it should be set to 0 when using a programmable vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_COUNT4']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_COUNT4</unmanaged>	
        /// <unmanaged-short>D3DTTFF_COUNT4</unmanaged-short>	
        Count4 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>This flag is honored by the fixed function pixel pipeline, as well as the programmable pixel pipeline in versions ps_1_1 to ps_1_3. When texture projection is enabled for a texture stage, all four floating point values must be written to the corresponding texture register. Each texture coordinate is divided by the last element before being passed to the rasterizer. For example, if this flag is specified with the <see cref="SharpDX.Direct3D9.TextureTransform.Count3"/> flag, the first and second texture coordinates are divided by the third coordinate before being passed to the rasterizer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTTFF_PROJECTED']/*"/>	
        /// <msdn-id>bb172618</msdn-id>	
        /// <unmanaged>D3DTTFF_PROJECTED</unmanaged>	
        /// <unmanaged-short>D3DTTFF_PROJECTED</unmanaged-short>	
        Projected = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p>In short, texture wrapping changes the basic way that Direct3D rasterizes textured polygons using the texture coordinates specified for each vertex. While rasterizing a polygon, the system interpolates between the texture coordinates at each of the polygon's vertices to determine the texels that should be used for every pixel of the polygon. Normally, the system treats the texture as a 2D plane, interpolating new texels by taking the shortest route from point A within a texture to point B. If point A represents the u, v position (0.8, 0.1), and point B is at (0.1,0.1), the line of interpolation looks like the following diagram.</p><p></p><p>Note that the shortest distance between A and B in this illustration runs roughly through the middle of the texture. Enabling u-texture or v-texture coordinate wrapping changes how Direct3D perceives the shortest route between texture coordinates in the u-direction and v-direction. By definition, texture wrapping causes the rasterizer to take the shortest route between texture coordinate sets, assuming that 0.0 and 1.0 are coincident. The last bit is the tricky part: You can imagine that enabling texture wrapping in one direction causes the system to treat a texture as though it were wrapped around a cylinder. For example, consider the following diagram.</p><p></p><p>The preceding illustration shows how wrapping in the u - direction affects how the system interpolates texture coordinates. Using the same points as in the example for normal, or nonwrapped, textures, you can see that the shortest route between points A and B is no longer across the middle of the texture; it's now across the border where 0.0 and 1.0 exist together. Wrapping in the v-direction is similar, except that it wraps the texture around a cylinder that is lying on its side. Wrapping in both the u-direction and v-direction is more complex. In this situation, you can envision the texture as a torus, or doughnut.</p><p>The most common practical application for texture wrapping is to perform environment mapping. Usually, an object textured with an environment map appears very reflective, showing a mirrored image of the object's surroundings in the scene. For the sake of this discussion, picture a room with four walls, each one painted with a letter R, G, B, Y and the corresponding colors: red, green, blue, and yellow. The environment map for such a simple room might look like the following illustration.</p><p></p><p>Imagine that the room's ceiling is held up by a perfectly reflective, four-sided, pillar. Mapping the environment map texture to the pillar is simple; making the pillar look as though it is reflecting the letters and colors is not as easy. The following diagram shows a wire frame of the pillar with the applicable texture coordinates listed near the top vertices. The seam where wrapping will cross the edges of the texture is shown with a dotted line.</p><p></p><p>With wrapping enabled in the u-direction, the textured pillar shows the colors and symbols from the environment map appropriately and, at the seam in the front of the texture, the rasterizer properly chooses the shortest route between the texture coordinates, assuming that u-coordinates 0.0 and 1.0 share the same location. The textured pillar looks like the following illustration.</p><p></p><p>If texture wrapping isn't enabled, the rasterizer does not interpolate in the direction needed to generate a believable, reflected image. Rather, the area at the front of the pillar contains a horizontally compressed version of the texels between u-coordinates 0.175 and 0.875, as they pass through the center of the texture. The wrap effect is ruined.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DWRAPCOORD']/*"/>	
    /// <msdn-id>bb206256</msdn-id>	
    /// <unmanaged>D3DWRAPCOORD</unmanaged>	
    /// <unmanaged-short>D3DWRAPCOORD</unmanaged-short>	
    [Flags]
    public enum TextureWrapping : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DWRAPCOORD_0']/*"/>	
        /// <msdn-id>bb206256</msdn-id>	
        /// <unmanaged>D3DWRAPCOORD_0</unmanaged>	
        /// <unmanaged-short>D3DWRAPCOORD_0</unmanaged-short>	
        WrapCoordinate0 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DWRAPCOORD_1']/*"/>	
        /// <msdn-id>bb206256</msdn-id>	
        /// <unmanaged>D3DWRAPCOORD_1</unmanaged>	
        /// <unmanaged-short>D3DWRAPCOORD_1</unmanaged-short>	
        WrapCoordinate1 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DWRAPCOORD_2']/*"/>	
        /// <msdn-id>bb206256</msdn-id>	
        /// <unmanaged>D3DWRAPCOORD_2</unmanaged>	
        /// <unmanaged-short>D3DWRAPCOORD_2</unmanaged-short>	
        WrapCoordinate2 = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DWRAPCOORD_3']/*"/>	
        /// <msdn-id>bb206256</msdn-id>	
        /// <unmanaged>D3DWRAPCOORD_3</unmanaged>	
        /// <unmanaged-short>D3DWRAPCOORD_3</unmanaged-short>	
        WrapCoordinate3 = unchecked((int)8),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines the priority type to which an animation track is assigned.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Tracks with the same priority are blended together, and the two resulting values are then blended using the priority blend factor.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPRIORITY_TYPE']/*"/>	
    /// <msdn-id>bb205401</msdn-id>	
    /// <unmanaged>D3DXPRIORITY_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXPRIORITY_TYPE</unmanaged-short>	
    public enum TrackPriority : int {	
        
        /// <summary>	
        /// <dd> <p>Track should be blended with all the low-priority tracks before the low-priority blend is mixed with the high-priority blend.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPRIORITY_LOW']/*"/>	
        /// <msdn-id>bb205401</msdn-id>	
        /// <unmanaged>D3DXPRIORITY_LOW</unmanaged>	
        /// <unmanaged-short>D3DXPRIORITY_LOW</unmanaged-short>	
        Low = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Track should be blended with all the high-priority tracks before the high-priority blend is mixed with the low-priority blend.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXPRIORITY_HIGH']/*"/>	
        /// <msdn-id>bb205401</msdn-id>	
        /// <unmanaged>D3DXPRIORITY_HIGH</unmanaged>	
        /// <unmanaged-short>D3DXPRIORITY_HIGH</unmanaged-short>	
        High = unchecked((int)1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTRANSFORMSTATETYPE2']/*"/>	
    /// <unmanaged>D3DTRANSFORMSTATETYPE2</unmanaged>	
    /// <unmanaged-short>D3DTRANSFORMSTATETYPE2</unmanaged-short>	
    public enum TransformState : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_VIEW']/*"/>	
        /// <unmanaged>D3DTS2_VIEW</unmanaged>	
        /// <unmanaged-short>D3DTS2_VIEW</unmanaged-short>	
        View = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_PROJECTION']/*"/>	
        /// <unmanaged>D3DTS2_PROJECTION</unmanaged>	
        /// <unmanaged-short>D3DTS2_PROJECTION</unmanaged-short>	
        Projection = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_WORLD']/*"/>	
        /// <unmanaged>D3DTS2_WORLD</unmanaged>	
        /// <unmanaged-short>D3DTS2_WORLD</unmanaged-short>	
        World = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_WORLD1']/*"/>	
        /// <unmanaged>D3DTS2_WORLD1</unmanaged>	
        /// <unmanaged-short>D3DTS2_WORLD1</unmanaged-short>	
        World1 = unchecked((int)257),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_WORLD2']/*"/>	
        /// <unmanaged>D3DTS2_WORLD2</unmanaged>	
        /// <unmanaged-short>D3DTS2_WORLD2</unmanaged-short>	
        World2 = unchecked((int)258),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_WORLD3']/*"/>	
        /// <unmanaged>D3DTS2_WORLD3</unmanaged>	
        /// <unmanaged-short>D3DTS2_WORLD3</unmanaged-short>	
        World3 = unchecked((int)259),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE0']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE0</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE0</unmanaged-short>	
        Texture0 = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE1']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE1</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE1</unmanaged-short>	
        Texture1 = unchecked((int)17),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE2']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE2</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE2</unmanaged-short>	
        Texture2 = unchecked((int)18),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE3']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE3</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE3</unmanaged-short>	
        Texture3 = unchecked((int)19),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE4']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE4</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE4</unmanaged-short>	
        Texture4 = unchecked((int)20),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE5']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE5</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE5</unmanaged-short>	
        Texture5 = unchecked((int)21),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE6']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE6</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE6</unmanaged-short>	
        Texture6 = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DTS2_TEXTURE7']/*"/>	
        /// <unmanaged>D3DTS2_TEXTURE7</unmanaged>	
        /// <unmanaged-short>D3DTS2_TEXTURE7</unmanaged-short>	
        Texture7 = unchecked((int)23),			
    }
    
    /// <summary>	
    /// <p>Defines the transition style between values of a mesh animation.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The calculation for the ramp from ease in to ease out is calculated as follows:</p><dl> <dd>Q(t) = 2(x - y)t3 + 3(y - x)t2 + x</dd> </dl><p>where the ramp is a function Q(t) with the following properties:</p><ul> <li>Q(t) is a cubic spline.</li> <li>Q(t) interpolates between x and y as t ranges from 0 to 1.</li> <li>Q(t) is horizontal when t = 0 and t = 1.</li> </ul><p>Mathematically, this translates into:</p><dl> <dd>Q(t) = At3 + Bt2 + Ct + D (and therefore, Q'(t) = 3At2 + 2Bt + C)</dd> <dd>2a) Q(0) = x</dd> <dd>2b) Q(1) = y</dd> <dd>3a) Q'(0) = 0</dd> <dd>3b) Q'(1) = 0</dd> </dl><p>Solving for A, B, C, D: </p><dl> <dd>D = x   (from 2a)</dd> <dd>C = 0  (from 3a)</dd> <dd>3A + 2B = 0 (from 3b)</dd> <dd>A + B = y - x (from 2b and D = x)</dd> </dl><p>Therefore:</p><dl> <dd>A = 2(x - y), B = 3(y - x), C = 0, D = x</dd> </dl>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTRANSITION_TYPE']/*"/>	
    /// <msdn-id>bb205475</msdn-id>	
    /// <unmanaged>D3DXTRANSITION_TYPE</unmanaged>	
    /// <unmanaged-short>D3DXTRANSITION_TYPE</unmanaged-short>	
    public enum TransitionType : int {	
        
        /// <summary>	
        /// <dd> <p>Linear transition between values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTRANSITION_LINEAR']/*"/>	
        /// <msdn-id>bb205475</msdn-id>	
        /// <unmanaged>D3DXTRANSITION_LINEAR</unmanaged>	
        /// <unmanaged-short>D3DXTRANSITION_LINEAR</unmanaged-short>	
        Linear = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Ease-in, ease-out spline transition between values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXTRANSITION_EASEINEASEOUT']/*"/>	
        /// <msdn-id>bb205475</msdn-id>	
        /// <unmanaged>D3DXTRANSITION_EASEINEASEOUT</unmanaged>	
        /// <unmanaged-short>D3DXTRANSITION_EASEINEASEOUT</unmanaged-short>	
        EaseInEaseOut = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Usage options that identify how resources are to be used.</p><p>The following table summarizes the available usage options.</p><p></p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE']/*"/>	
    /// <msdn-id>bb172625</msdn-id>	
    /// <unmanaged>D3DUSAGE</unmanaged>	
    /// <unmanaged-short>D3DUSAGE</unmanaged-short>	
    [Flags]
    public enum Usage : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_RENDERTARGET']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_RENDERTARGET</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_RENDERTARGET</unmanaged-short>	
        RenderTarget = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_DEPTHSTENCIL']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_DEPTHSTENCIL</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_DEPTHSTENCIL</unmanaged-short>	
        DepthStencil = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_DYNAMIC']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_DYNAMIC</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_DYNAMIC</unmanaged-short>	
        Dynamic = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_NONSECURE']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_NONSECURE</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_NONSECURE</unmanaged-short>	
        NonSecure = unchecked((int)8388608),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_AUTOGENMIPMAP']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_AUTOGENMIPMAP</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_AUTOGENMIPMAP</unmanaged-short>	
        AutoGenerateMipMap = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_DMAP']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_DMAP</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_DMAP</unmanaged-short>	
        DisplacementMap = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_LEGACYBUMPMAP']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_LEGACYBUMPMAP</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_LEGACYBUMPMAP</unmanaged-short>	
        QueryLegacyBumpMap = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_SRGBREAD']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_SRGBREAD</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_SRGBREAD</unmanaged-short>	
        QuerySrgbRead = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_FILTER']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_FILTER</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_FILTER</unmanaged-short>	
        QueryFilter = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_SRGBWRITE']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_SRGBWRITE</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_SRGBWRITE</unmanaged-short>	
        QuerySrgbWrite = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING</unmanaged-short>	
        QueryPostPixelShaderBlending = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_VERTEXTEXTURE']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_VERTEXTEXTURE</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_VERTEXTEXTURE</unmanaged-short>	
        QueryVertexTexture = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_QUERY_WRAPANDMIP']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_QUERY_WRAPANDMIP</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_QUERY_WRAPANDMIP</unmanaged-short>	
        QueryWrapAndMip = unchecked((int)2097152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_WRITEONLY']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_WRITEONLY</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_WRITEONLY</unmanaged-short>	
        WriteOnly = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_SOFTWAREPROCESSING']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_SOFTWAREPROCESSING</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_SOFTWAREPROCESSING</unmanaged-short>	
        SoftwareProcessing = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_DONOTCLIP']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_DONOTCLIP</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_DONOTCLIP</unmanaged-short>	
        DoNotClip = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_POINTS']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_POINTS</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_POINTS</unmanaged-short>	
        Points = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_RTPATCHES']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_RTPATCHES</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_RTPATCHES</unmanaged-short>	
        RTPatches = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_NPATCHES']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_NPATCHES</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_NPATCHES</unmanaged-short>	
        NPatches = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_TEXTAPI']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_TEXTAPI</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_TEXTAPI</unmanaged-short>	
        TextApi = unchecked((int)268435456),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_RESTRICTED_CONTENT']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_RESTRICTED_CONTENT</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_RESTRICTED_CONTENT</unmanaged-short>	
        RestrictedContent = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_RESTRICT_SHARED_RESOURCE']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_RESTRICT_SHARED_RESOURCE</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_RESTRICT_SHARED_RESOURCE</unmanaged-short>	
        RestrictSharedResource = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER']/*"/>	
        /// <msdn-id>bb172625</msdn-id>	
        /// <unmanaged>D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>	
        /// <unmanaged-short>D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged-short>	
        RestrictSharedResourceDriver = unchecked((int)4096),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Texture wrapping options for IMT computation APIs.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIMT']/*"/>	
    /// <msdn-id>bb172880</msdn-id>	
    /// <unmanaged>D3DXIMT</unmanaged>	
    /// <unmanaged-short>D3DXIMT</unmanaged-short>	
    public enum UVAtlasQuality : int {	
        
        /// <summary>	
        /// <dd> <p>The texture wraps in the U direction.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIMT_WRAP_U']/*"/>	
        /// <msdn-id>bb172880</msdn-id>	
        /// <unmanaged>D3DXIMT_WRAP_U</unmanaged>	
        /// <unmanaged-short>D3DXIMT_WRAP_U</unmanaged-short>	
        WrapU = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The texture wraps in the V direction.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIMT_WRAP_V']/*"/>	
        /// <msdn-id>bb172880</msdn-id>	
        /// <unmanaged>D3DXIMT_WRAP_V</unmanaged>	
        /// <unmanaged-short>D3DXIMT_WRAP_V</unmanaged-short>	
        WrapV = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The texture wraps in both the U and V direction.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXIMT_WRAP_UV']/*"/>	
        /// <msdn-id>bb172880</msdn-id>	
        /// <unmanaged>D3DXIMT_WRAP_UV</unmanaged>	
        /// <unmanaged-short>D3DXIMT_WRAP_UV</unmanaged-short>	
        WrapUv = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Defines flags used to control the number or matrices that the system applies when performing multimatrix vertex blending.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Members of this type are used with the <see cref="SharpDX.Direct3D9.RenderState.VertexBlend"/> render state.</p><p>Geometry blending (multimatrix vertex blending) requires that your application use a vertex format that has blending (beta) weights for each vertex.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXBLENDFLAGS']/*"/>	
    /// <msdn-id>bb172628</msdn-id>	
    /// <unmanaged>D3DVERTEXBLENDFLAGS</unmanaged>	
    /// <unmanaged-short>D3DVERTEXBLENDFLAGS</unmanaged-short>	
    [Flags]
    public enum VertexBlend : int {	
        
        /// <summary>	
        /// <dd> <p>Disable vertex blending; apply only the world matrix set by the <strong>D3DTS_WORLDMATRIX</strong> macro, where the index value for the transformation state is 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_DISABLE']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_DISABLE</unmanaged>	
        /// <unmanaged-short>D3DVBF_DISABLE</unmanaged-short>	
        Disable = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Enable vertex blending between the two matrices set by the <strong>D3DTS_WORLDMATRIX</strong> macro, where the index value for the transformation states are 0 and 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_1WEIGHTS']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_1WEIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVBF_1WEIGHTS</unmanaged-short>	
        Weights1 = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Enable vertex blending between the three matrices set by the <strong>D3DTS_WORLDMATRIX</strong> macro, where the index value for the transformation states are 0, 1, and 2. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_2WEIGHTS']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_2WEIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVBF_2WEIGHTS</unmanaged-short>	
        Weights2 = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Enable vertex blending between the four matrices set by the <strong>D3DTS_WORLDMATRIX</strong> macro, where the index value for the transformation states are 0, 1, 2, and 3. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_3WEIGHTS']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_3WEIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVBF_3WEIGHTS</unmanaged-short>	
        Weights3 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Vertex blending is done by using the value assigned to <see cref="SharpDX.Direct3D9.RenderState.TweenFactor"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_TWEENING']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_TWEENING</unmanaged>	
        /// <unmanaged-short>D3DVBF_TWEENING</unmanaged-short>	
        Tweening = unchecked((int)255),			
        
        /// <summary>	
        /// <dd> <p>Use a single matrix with a weight of 1.0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVBF_0WEIGHTS']/*"/>	
        /// <msdn-id>bb172628</msdn-id>	
        /// <unmanaged>D3DVBF_0WEIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVBF_0WEIGHTS</unmanaged-short>	
        Weights0 = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p>Flexible Vertex Format Constants, or FVF codes, are used to describe the contents of vertices  interleaved in a single data stream that will be processed by the fixed-function pipeline.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF']/*"/>	
    /// <msdn-id>bb172559</msdn-id>	
    /// <unmanaged>D3DFVF</unmanaged>	
    /// <unmanaged-short>D3DFVF</unmanaged-short>	
    [Flags]
    public enum VertexFormat : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_RESERVED0']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_RESERVED0</unmanaged>	
        /// <unmanaged-short>D3DFVF_RESERVED0</unmanaged-short>	
        Reserved0 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_POSITION_MASK']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_POSITION_MASK</unmanaged>	
        /// <unmanaged-short>D3DFVF_POSITION_MASK</unmanaged-short>	
        PositionMask = unchecked((int)16398),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZ']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZ</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZ</unmanaged-short>	
        Position = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZRHW']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZRHW</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZRHW</unmanaged-short>	
        PositionRhw = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZB1']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZB1</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZB1</unmanaged-short>	
        PositionBlend1 = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZB2']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZB2</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZB2</unmanaged-short>	
        PositionBlend2 = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZB3']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZB3</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZB3</unmanaged-short>	
        PositionBlend3 = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZB4']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZB4</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZB4</unmanaged-short>	
        PositionBlend4 = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZB5']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZB5</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZB5</unmanaged-short>	
        PositionBlend5 = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_XYZW']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_XYZW</unmanaged>	
        /// <unmanaged-short>D3DFVF_XYZW</unmanaged-short>	
        PositionW = unchecked((int)16386),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_NORMAL']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_NORMAL</unmanaged>	
        /// <unmanaged-short>D3DFVF_NORMAL</unmanaged-short>	
        Normal = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_PSIZE']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_PSIZE</unmanaged>	
        /// <unmanaged-short>D3DFVF_PSIZE</unmanaged-short>	
        PointSize = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_DIFFUSE']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_DIFFUSE</unmanaged>	
        /// <unmanaged-short>D3DFVF_DIFFUSE</unmanaged-short>	
        Diffuse = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_SPECULAR']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_SPECULAR</unmanaged>	
        /// <unmanaged-short>D3DFVF_SPECULAR</unmanaged-short>	
        Specular = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEXCOUNT_MASK']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEXCOUNT_MASK</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEXCOUNT_MASK</unmanaged-short>	
        TextureCountMask = unchecked((int)3840),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEXCOUNT_SHIFT']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEXCOUNT_SHIFT</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEXCOUNT_SHIFT</unmanaged-short>	
        TextureCountShift = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX0']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX0</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX0</unmanaged-short>	
        Texture0 = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX1']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX1</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX1</unmanaged-short>	
        Texture1 = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX2']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX2</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX2</unmanaged-short>	
        Texture2 = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX3']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX3</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX3</unmanaged-short>	
        Texture3 = unchecked((int)768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX4']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX4</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX4</unmanaged-short>	
        Texture4 = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX5']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX5</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX5</unmanaged-short>	
        Texture5 = unchecked((int)1280),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX6']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX6</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX6</unmanaged-short>	
        Texture6 = unchecked((int)1536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX7']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX7</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX7</unmanaged-short>	
        Texture7 = unchecked((int)1792),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_TEX8']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_TEX8</unmanaged>	
        /// <unmanaged-short>D3DFVF_TEX8</unmanaged-short>	
        Texture8 = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_LASTBETA_UBYTE4']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_LASTBETA_UBYTE4</unmanaged>	
        /// <unmanaged-short>D3DFVF_LASTBETA_UBYTE4</unmanaged-short>	
        LastBetaUByte4 = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVF_LASTBETA_D3DCOLOR']/*"/>	
        /// <msdn-id>bb172559</msdn-id>	
        /// <unmanaged>D3DFVF_LASTBETA_D3DCOLOR</unmanaged>	
        /// <unmanaged-short>D3DFVF_LASTBETA_D3DCOLOR</unmanaged-short>	
        LastBetaColor = unchecked((int)32768),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVFCAPS']/*"/>	
    /// <msdn-id>ff569467</msdn-id>	
    /// <unmanaged>D3DFVFCAPS</unmanaged>	
    /// <unmanaged-short>D3DFVFCAPS</unmanaged-short>	
    [Flags]
    public enum VertexFormatCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVFCAPS_TEXCOORDCOUNTMASK']/*"/>	
        /// <msdn-id>ff569467</msdn-id>	
        /// <unmanaged>D3DFVFCAPS_TEXCOORDCOUNTMASK</unmanaged>	
        /// <unmanaged-short>D3DFVFCAPS_TEXCOORDCOUNTMASK</unmanaged-short>	
        TextureCoordCountMask = unchecked((int)65535),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVFCAPS_DONOTSTRIPELEMENTS']/*"/>	
        /// <msdn-id>ff569467</msdn-id>	
        /// <unmanaged>D3DFVFCAPS_DONOTSTRIPELEMENTS</unmanaged>	
        /// <unmanaged-short>D3DFVFCAPS_DONOTSTRIPELEMENTS</unmanaged-short>	
        DoNotStripElements = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DFVFCAPS_PSIZE']/*"/>	
        /// <msdn-id>ff569467</msdn-id>	
        /// <unmanaged>D3DFVFCAPS_PSIZE</unmanaged>	
        /// <unmanaged-short>D3DFVFCAPS_PSIZE</unmanaged-short>	
        PointSize = unchecked((int)1048576),			
    }
    
    /// <summary>	
    /// <p>This constant is the maximum number of vertex declarators for a mesh.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>MAXD3DDECLLENGTH is defined as a maximum of 64 (see d3d9types.h). This does not include the "end" marker vertex element.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_MAX_FVF_DECL_SIZE']/*"/>	
    /// <msdn-id>bb147183</msdn-id>	
    /// <unmanaged>_MAX_FVF_DECL_SIZE</unmanaged>	
    /// <unmanaged-short>_MAX_FVF_DECL_SIZE</unmanaged-short>	
    internal enum VertexFormatDeclaratorCount : int {	
        
        /// <summary>	
        /// <dd> <p>The maximum number of elements in the vertex declaration. The additional (+1) is for <strong>D3DDECL_END</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='MAX_FVF_DECL_SIZE']/*"/>	
        /// <msdn-id>bb147183</msdn-id>	
        /// <unmanaged>MAX_FVF_DECL_SIZE</unmanaged>	
        /// <unmanaged-short>MAX_FVF_DECL_SIZE</unmanaged-short>	
        Max = unchecked((int)65),			
    }
    
    /// <summary>	
    /// <p>A combination of one or more flags that control the device create behavior.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS']/*"/>	
    /// <msdn-id>bb172637</msdn-id>	
    /// <unmanaged>D3DVTXPCAPS</unmanaged>	
    /// <unmanaged-short>D3DVTXPCAPS</unmanaged-short>	
    [Flags]
    public enum VertexProcessingCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_TEXGEN']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_TEXGEN</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_TEXGEN</unmanaged-short>	
        TextureGen = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_MATERIALSOURCE7']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_MATERIALSOURCE7</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_MATERIALSOURCE7</unmanaged-short>	
        MaterialSource7 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_DIRECTIONALLIGHTS']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_DIRECTIONALLIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_DIRECTIONALLIGHTS</unmanaged-short>	
        DirectionalLights = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_POSITIONALLIGHTS']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_POSITIONALLIGHTS</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_POSITIONALLIGHTS</unmanaged-short>	
        PositionalLights = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_LOCALVIEWER']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_LOCALVIEWER</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_LOCALVIEWER</unmanaged-short>	
        LocalViewer = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_TWEENING']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_TWEENING</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_TWEENING</unmanaged-short>	
        Tweening = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_TEXGEN_SPHEREMAP']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_TEXGEN_SPHEREMAP</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_TEXGEN_SPHEREMAP</unmanaged-short>	
        TexGenSphereMap = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER']/*"/>	
        /// <msdn-id>bb172637</msdn-id>	
        /// <unmanaged>D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER</unmanaged>	
        /// <unmanaged-short>D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER</unmanaged-short>	
        NoTexGenNonLocalViewer = unchecked((int)512),			
    }
    
    /// <summary>	
    /// <p>Vertex shader caps constants. These constants are used by the VS20Caps member of <strong><see cref="SharpDX.Direct3D9.Capabilities"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVS20CAPS']/*"/>	
    /// <msdn-id>bb172634</msdn-id>	
    /// <unmanaged>D3DVS20CAPS</unmanaged>	
    /// <unmanaged-short>D3DVS20CAPS</unmanaged-short>	
    [Flags]
    public enum VertexShaderCaps : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVS20CAPS_PREDICATION']/*"/>	
        /// <msdn-id>bb172634</msdn-id>	
        /// <unmanaged>D3DVS20CAPS_PREDICATION</unmanaged>	
        /// <unmanaged-short>D3DVS20CAPS_PREDICATION</unmanaged-short>	
        Predication = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Vertex texture sampler constants.</p><p>These constants identify the texture samplers used by vertex shaders.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER']/*"/>	
    /// <msdn-id>bb172631</msdn-id>	
    /// <unmanaged>D3DVERTEXTEXTURESAMPLER</unmanaged>	
    /// <unmanaged-short>D3DVERTEXTEXTURESAMPLER</unmanaged-short>	
    public enum VertexTextureSampler : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER0']/*"/>	
        /// <msdn-id>bb172631</msdn-id>	
        /// <unmanaged>D3DVERTEXTEXTURESAMPLER0</unmanaged>	
        /// <unmanaged-short>D3DVERTEXTEXTURESAMPLER0</unmanaged-short>	
        Sampler0 = unchecked((int)257),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER1']/*"/>	
        /// <msdn-id>bb172631</msdn-id>	
        /// <unmanaged>D3DVERTEXTEXTURESAMPLER1</unmanaged>	
        /// <unmanaged-short>D3DVERTEXTEXTURESAMPLER1</unmanaged-short>	
        Sampler1 = unchecked((int)258),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER2']/*"/>	
        /// <msdn-id>bb172631</msdn-id>	
        /// <unmanaged>D3DVERTEXTEXTURESAMPLER2</unmanaged>	
        /// <unmanaged-short>D3DVERTEXTEXTURESAMPLER2</unmanaged-short>	
        Sampler2 = unchecked((int)259),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLER3']/*"/>	
        /// <msdn-id>bb172631</msdn-id>	
        /// <unmanaged>D3DVERTEXTEXTURESAMPLER3</unmanaged>	
        /// <unmanaged-short>D3DVERTEXTEXTURESAMPLER3</unmanaged-short>	
        Sampler3 = unchecked((int)260),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DVERTEXTEXTURESAMPLERMAPSAMPLER']/*"/>	
        /// <msdn-id>bb172631</msdn-id>	
        /// <unmanaged>D3DVERTEXTEXTURESAMPLERMAPSAMPLER</unmanaged>	
        /// <unmanaged-short>D3DVERTEXTEXTURESAMPLERMAPSAMPLER</unmanaged-short>	
        DisplacementMapSampler = unchecked((int)256),			
    }
    
    /// <summary>	
    /// <p>Specifies the type of I/O bus used by the graphics adapter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>As many as three flags can be set. Flags in the range 0x00 through 0x04 (<strong>D3DBUSTYPE_Xxx</strong>) provide the basic bus type. Flags in the range 0x10000 through 0x50000 (<strong>D3DBUSIMPL_MODIFIER_Xxx</strong>) modify the basic description. The driver sets one bus-type flag, and can set zero or one modifier flag. If the driver sets a modifier flag, it also sets the <strong><see cref="SharpDX.Direct3D9.VideoSubType.NonStandard"/></strong> flag. Flags are combined with a bitwise <strong>OR</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE']/*"/>	
    /// <msdn-id>dd318379</msdn-id>	
    /// <unmanaged>D3DBUSTYPE</unmanaged>	
    /// <unmanaged-short>D3DBUSTYPE</unmanaged-short>	
    public enum VideoSubType : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates a type of bus other than the types listed here.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE_OTHER']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSTYPE_OTHER</unmanaged>	
        /// <unmanaged-short>D3DBUSTYPE_OTHER</unmanaged-short>	
        Other = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>PCI bus.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE_PCI']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSTYPE_PCI</unmanaged>	
        /// <unmanaged-short>D3DBUSTYPE_PCI</unmanaged-short>	
        Pci = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>PCI-X bus.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE_PCIX']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSTYPE_PCIX</unmanaged>	
        /// <unmanaged-short>D3DBUSTYPE_PCIX</unmanaged-short>	
        PciX = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>PCI Express bus.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE_PCIEXPRESS']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSTYPE_PCIEXPRESS</unmanaged>	
        /// <unmanaged-short>D3DBUSTYPE_PCIEXPRESS</unmanaged-short>	
        PciExpress = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Accelerated Graphics Port (AGP) bus.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSTYPE_AGP']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSTYPE_AGP</unmanaged>	
        /// <unmanaged-short>D3DBUSTYPE_AGP</unmanaged-short>	
        Agp = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The implementation for the graphics adapter is in a motherboard chipset's north bridge. This flag implies that data never goes over an expansion bus (such as PCI or AGP) when it is transferred from main memory to the graphics adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET</unmanaged-short>	
        InsideOfChipset = unchecked((int)65536),			
        
        /// <summary>	
        /// <dd> <p>Indicates that the graphics adapter is connected to a motherboard chipset's north bridge by tracks on the motherboard and all of the graphics adapter's chips are soldered to the motherboard. This flag implies that data never goes over an expansion bus (such as PCI or AGP) when it is transferred from main memory to the graphics adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP</unmanaged-short>	
        TracksOnMotherBoardToChip = unchecked((int)131072),			
        
        /// <summary>	
        /// <dd> <p>The graphics adapter is connected to a motherboard chipset's north bridge by tracks on the motherboard, and all of the graphics adapter's chips are connected through sockets to the motherboard.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET</unmanaged-short>	
        TracksOnMotherBoardToSocket = unchecked((int)196608),			
        
        /// <summary>	
        /// <dd> <p>The graphics adapter is connected to the motherboard through a daughterboard connector.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR</unmanaged-short>	
        DaughterBoardConnector = unchecked((int)262144),			
        
        /// <summary>	
        /// <dd> <p>The graphics adapter is connected to the motherboard through a daughterboard connector, and the graphics adapter is inside an enclosure that is not user accessible.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE</unmanaged-short>	
        DaughterBoardConnectorInsideOfNuae = unchecked((int)327680),			
        
        /// <summary>	
        /// <dd> <p>One of the D3DBUSIMPL_MODIFIER_MODIFIER_Xxx flags is set.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DBUSIMPL_MODIFIER_NON_STANDARD']/*"/>	
        /// <msdn-id>dd318379</msdn-id>	
        /// <unmanaged>D3DBUSIMPL_MODIFIER_NON_STANDARD</unmanaged>	
        /// <unmanaged-short>D3DBUSIMPL_MODIFIER_NON_STANDARD</unmanaged-short>	
        NonStandard = unchecked((int)-2147483648),			
    }
    
    /// <summary>	
    /// <p>Options for welding together vertices.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='_D3DXWELDEPSILONSFLAGS']/*"/>	
    /// <msdn-id>bb205561</msdn-id>	
    /// <unmanaged>_D3DXWELDEPSILONSFLAGS</unmanaged>	
    /// <unmanaged-short>_D3DXWELDEPSILONSFLAGS</unmanaged-short>	
    [Flags]
    public enum WeldFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Weld together all vertices that are at the same location. Using this flag avoids an epsilon comparison between vertex components.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXWELDEPSILONS_WELDALL']/*"/>	
        /// <msdn-id>bb205561</msdn-id>	
        /// <unmanaged>D3DXWELDEPSILONS_WELDALL</unmanaged>	
        /// <unmanaged-short>D3DXWELDEPSILONS_WELDALL</unmanaged-short>	
        WeldAll = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>If a given vertex component is within epsilon, modify partially matched vertices so that both components are identical. If all components are equal, remove one of the vertices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXWELDEPSILONS_WELDPARTIALMATCHES']/*"/>	
        /// <msdn-id>bb205561</msdn-id>	
        /// <unmanaged>D3DXWELDEPSILONS_WELDPARTIALMATCHES</unmanaged>	
        /// <unmanaged-short>D3DXWELDEPSILONS_WELDPARTIALMATCHES</unmanaged-short>	
        WeldPartialMatches = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Instructs the weld to allow only modifications to vertices and not removal. This flag is valid only if <see cref="SharpDX.Direct3D9.WeldFlags.WeldPartialMatches"/> is set. It is useful to modify vertices to be equal, but not to allow vertices to be removed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXWELDEPSILONS_DONOTREMOVEVERTICES']/*"/>	
        /// <msdn-id>bb205561</msdn-id>	
        /// <unmanaged>D3DXWELDEPSILONS_DONOTREMOVEVERTICES</unmanaged>	
        /// <unmanaged-short>D3DXWELDEPSILONS_DONOTREMOVEVERTICES</unmanaged-short>	
        DoNotRemoveVertices = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Instructs the weld not to split vertices that are in separate attribute groups. When the <strong><see cref="SharpDX.Direct3D9.Mesh.Optimize"/></strong> method is called with the <see cref="SharpDX.Direct3D9.MeshOptimizeFlags.AttributeSort"/> flag, then the <see cref="SharpDX.Direct3D9.MeshOptimizeFlags.DoNotSplit"/> flag will also be set. Setting this flag can slow down software vertex processing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXWELDEPSILONS_DONOTSPLIT']/*"/>	
        /// <msdn-id>bb205561</msdn-id>	
        /// <unmanaged>D3DXWELDEPSILONS_DONOTSPLIT</unmanaged>	
        /// <unmanaged-short>D3DXWELDEPSILONS_DONOTSPLIT</unmanaged-short>	
        DoNotSplit = unchecked((int)8),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXF_FILEFORMAT2']/*"/>	
    /// <unmanaged>D3DXF_FILEFORMAT2</unmanaged>	
    /// <unmanaged-short>D3DXF_FILEFORMAT2</unmanaged-short>	
    [Flags]
    public enum XFileFormat : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXF_FILEFORMAT_BINARY']/*"/>	
        /// <unmanaged>D3DXF_FILEFORMAT_BINARY</unmanaged>	
        /// <unmanaged-short>D3DXF_FILEFORMAT_BINARY</unmanaged-short>	
        Binary = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXF_FILEFORMAT_TEXT']/*"/>	
        /// <unmanaged>D3DXF_FILEFORMAT_TEXT</unmanaged>	
        /// <unmanaged-short>D3DXF_FILEFORMAT_TEXT</unmanaged-short>	
        Text = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DXF_FILEFORMAT_COMPRESSED']/*"/>	
        /// <unmanaged>D3DXF_FILEFORMAT_COMPRESSED</unmanaged>	
        /// <unmanaged-short>D3DXF_FILEFORMAT_COMPRESSED</unmanaged-short>	
        Compressed = unchecked((int)2),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DZBUFFERTYPE']/*"/>	
    /// <unmanaged>D3DZBUFFERTYPE</unmanaged>	
    /// <unmanaged-short>D3DZBUFFERTYPE</unmanaged-short>	
    public enum ZBufferType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DZB_FALSE']/*"/>	
        /// <unmanaged>D3DZB_FALSE</unmanaged>	
        /// <unmanaged-short>D3DZB_FALSE</unmanaged-short>	
        DontUseZBuffer = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DZB_TRUE']/*"/>	
        /// <unmanaged>D3DZB_TRUE</unmanaged>	
        /// <unmanaged-short>D3DZB_TRUE</unmanaged-short>	
        UseZBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3DZB_USEW']/*"/>	
        /// <unmanaged>D3DZB_USEW</unmanaged>	
        /// <unmanaged-short>D3DZB_USEW</unmanaged-short>	
        UseWBuffer = unchecked((int)2),			
    }
}
